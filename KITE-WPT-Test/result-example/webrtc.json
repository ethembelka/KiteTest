{
  "run_info": {
    "product": "chrome",
    "bits": 64,
    "has_sandbox": true,
    "linux_distro": "Ubuntu",
    "verify": false,
    "os_version": "18.04",
    "browser_version": "70.0.3538.77",
    "version": "Ubuntu 18.04",
    "wasm": false,
    "debug": false,
    "os": "linux",
    "processor": "x86_64",
    "revision": "1893e9316c5187dcb93a0ecdb5c0ae07572543a9"
  },
  "time_start": 1547536095054,
  "time_end": 1547536335595,
  "results": [
    {
      "test": "/webrtc/datachannel-emptystring.html",
      "status": "OK",
      "message": null,
      "duration": 1374,
      "subtests": [
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_equals: Empty message not received expected \"\" but got \"done\"",
          "name": "Can send empty strings across a WebRTC data channel."
        }
      ]
    },
    {
      "test": "/webrtc/RTCRtpSender-transport.https.html",
      "status": "OK",
      "message": null,
      "duration": 1978,
      "subtests": [
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_equals: expected (object) null but got (undefined) undefined",
          "name": "RTCRtpSender.transport is null when unconnected"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "promise_test: Unhandled rejection with value: object \"TypeError: Cannot read property 'sender' of undefined\"",
          "name": "RTCRtpSender/receiver.transport has a value when connected"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_equals: expected (object) null but got (undefined) undefined",
          "name": "RTCRtpSender/receiver.transport at the right time, with bundle policy balanced"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_equals: expected (object) null but got (undefined) undefined",
          "name": "RTCRtpSender/receiver.transport at the right time, with bundle policy max-bundle"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_equals: expected (object) null but got (undefined) undefined",
          "name": "RTCRtpSender/receiver.transport at the right time, with bundle policy max-compat"
        }
      ]
    },
    {
      "test": "/webrtc/RTCPeerConnection-setRemoteDescription-rollback.html",
      "status": "OK",
      "message": null,
      "duration": 1373,
      "subtests": [
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "promise_test: Unhandled rejection with value: object \"TypeError: Failed to execute 'setRemoteDescription' on 'RTCPeerConnection': The provided value 'rollback' is not a valid enum value of type RTCSdpType.\"",
          "name": "setRemoteDescription(rollback) in have-remote-offer state should revert to stable state"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_throws: function \"function() { throw e }\" threw object \"TypeError: Failed to execute 'setRemoteDescription' on 'RTCPeerConnection': The provided value 'rollback' is not a valid enum value of type RTCSdpType.\" that is not a DOMException InvalidStateError: property \"code\" is equal to undefined, expected 11",
          "name": "setRemoteDescription(rollback) from stable state should reject with InvalidStateError"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "promise_test: Unhandled rejection with value: object \"TypeError: Failed to execute 'setRemoteDescription' on 'RTCPeerConnection': The provided value 'rollback' is not a valid enum value of type RTCSdpType.\"",
          "name": "setRemoteDescription(rollback) should ignore invalid sdp content and succeed"
        }
      ]
    },
    {
      "test": "/webrtc/protocol/msid-parse.html",
      "status": "OK",
      "message": null,
      "duration": 369,
      "subtests": [
        {
          "status": "PASS",
          "message": null,
          "name": "Description with no msid produces a track with a stream"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_equals: expected 0 but got 1",
          "name": "Description with msid:- appid produces a track with no stream"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_equals: expected \"foo\" but got \"default\"",
          "name": "Description with msid:foo bar produces a stream with id foo"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_equals: expected 2 but got 1",
          "name": "Description with two msid produces two streams"
        }
      ]
    },
    {
      "test": "/webrtc/RTCRtpReceiver-getContributingSources.https.html",
      "status": "OK",
      "message": null,
      "duration": 408,
      "subtests": [
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_greater_than: Expect CSRCs to be available after RTP connection is established expected a number greater than 0 but got 0",
          "name": "getContributingSources() should return list of CSRC after connection is established"
        }
      ]
    },
    {
      "test": "/webrtc/RTCDTMFSender-ontonechange.https.html",
      "status": "OK",
      "message": null,
      "duration": 1073,
      "subtests": [
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_between_inclusive: Expect tonechange event for \"2\" to be fired approximately after 170 milliseconds expected a number greater than or equal to 170 and less than or equal to 4170 but got 167",
          "name": "insertDTMF() with default duration and intertoneGap should fire tonechange events at the expected time"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_between_inclusive: Expect tonechange event for \"B\" to be fired approximately after 170 milliseconds expected a number greater than or equal to 170 and less than or equal to 4170 but got 167",
          "name": "insertDTMF() with explicit duration and intertoneGap should fire tonechange events at the expected time"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_unreached: Expect no tonechange event to be fired Reached unreachable code",
          "name": "insertDTMF('') should not fire any tonechange event, including for '' tone"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_between_inclusive: Expect tonechange event for \"B\" to be fired approximately after 110 milliseconds expected a number greater than or equal to 110 and less than or equal to 4110 but got 107",
          "name": "insertDTMF() with duration less than 40 should be clamped to 40"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "insertDTMF() with interToneGap less than 30 should be clamped to 30"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_between_inclusive: Expect tonechange event for \",\" to be fired approximately after 170 milliseconds expected a number greater than or equal to 170 and less than or equal to 4170 but got 167",
          "name": "insertDTMF with comma should delay next tonechange event for a constant 2000ms"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_unreached: Unexpected promise rejection: Error: assert_equals: Expect there to be only one tranceiver in pc expected 1 but got 0 Reached unreachable code",
          "name": "insertDTMF() with transceiver stopped in the middle should stop future tonechange events from firing"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_between_inclusive: Expect tonechange event for \"B\" to be fired approximately after 170 milliseconds expected a number greater than or equal to 170 and less than or equal to 4170 but got 169",
          "name": "Calling insertDTMF() in the middle of tonechange events should cause future tonechanges to be updated to new tones"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_between_inclusive: Expect tonechange event for \"3\" to be fired approximately after 170 milliseconds expected a number greater than or equal to 170 and less than or equal to 4170 but got 2",
          "name": "Calling insertDTMF() multiple times in the middle of tonechange events should cause future tonechanges to be updated the last provided tones"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_between_inclusive: Expect tonechange event for \"\" to be fired approximately after 170 milliseconds expected a number greater than or equal to 170 and less than or equal to 4170 but got 1",
          "name": "Calling insertDTMF('') in the middle of tonechange events should stop future tonechange events from firing"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "Failed to execute 'addTransceiver' on 'RTCPeerConnection': This operation is only supported in 'unified-plan'. 'unified-plan' will become the default behavior in the future, but it is currently experimental. To try it out, construct the RTCPeerConnection with sdpSemantics:'unified-plan' present in the RTCConfiguration argument.",
          "name": "Setting transceiver.currentDirection to recvonly in the middle of tonechange events should stop future tonechange events from firing"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "Tone change event constructor works"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "Tone change event with unexpected name should not crash"
        }
      ]
    },
    {
      "test": "/webrtc/RTCRtpSender-getStats.https.html",
      "status": "OK",
      "message": null,
      "duration": 378,
      "subtests": [
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "promise_test: Unhandled rejection with value: object \"InvalidStateError: Failed to execute 'addTransceiver' on 'RTCPeerConnection': This operation is only supported in 'unified-plan'. 'unified-plan' will become the default behavior in the future, but it is currently experimental. To try it out, construct the RTCPeerConnection with sdpSemantics:'unified-plan' present in the RTCConfiguration argument.\"",
          "name": "sender.getStats() via addTransceiver should return stats report containing outbound-rtp stats"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_equals: Expect dictionary.remoteId to be string expected \"string\" but got \"undefined\"",
          "name": "sender.getStats() via addTrack should return stats report containing outbound-rtp stats"
        }
      ]
    },
    {
      "test": "/webrtc/RTCPeerConnection-add-track-no-deadlock.https.html",
      "status": "OK",
      "message": null,
      "duration": 1479,
      "subtests": [
        {
          "status": "PASS",
          "message": null,
          "name": "RTCPeerConnection addTrack does not deadlock."
        }
      ]
    },
    {
      "test": "/webrtc/RTCRtpReceiver-getStats.https.html",
      "status": "OK",
      "message": null,
      "duration": 1931,
      "subtests": [
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "promise_test: Unhandled rejection with value: object \"InvalidStateError: Failed to execute 'addTransceiver' on 'RTCPeerConnection': This operation is only supported in 'unified-plan'. 'unified-plan' will become the default behavior in the future, but it is currently experimental. To try it out, construct the RTCPeerConnection with sdpSemantics:'unified-plan' present in the RTCConfiguration argument.\"",
          "name": "receiver.getStats() via addTransceiver should return stats report containing inbound-rtp stats"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_equals: Expect dictionary.codecId to be string expected \"string\" but got \"undefined\"",
          "name": "receiver.getStats() via addTrack should return stats report containing inbound-rtp stats"
        }
      ]
    },
    {
      "test": "/webrtc/RTCPeerConnection-iceConnectionState.html",
      "status": "OK",
      "message": null,
      "duration": 319,
      "subtests": [
        {
          "status": "PASS",
          "message": null,
          "name": "Initial iceConnectionState should be new"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_equals: expected \"closed\" but got \"new\"",
          "name": "Closing the connection should set iceConnectionState to closed"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "connection with one data channel should eventually have connected or completed connection state"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "Cannot read property 'transport' of undefined",
          "name": "connection with one data channel should eventually have connected connection state"
        }
      ]
    },
    {
      "test": "/webrtc/RTCIceTransport-extension.https.html",
      "status": "OK",
      "message": null,
      "duration": 1386,
      "subtests": [
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "RTCIceTransport is not defined",
          "name": "RTCIceTransport constructor does not throw"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "RTCIceTransport is not defined",
          "name": "RTCIceTransport initial properties are set"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "RTCIceTransport is not defined",
          "name": "gather() with { iceServers: null } should throw TypeError"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "RTCIceTransport is not defined",
          "name": "gather() with { iceServers: undefined } should succeed"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "RTCIceTransport is not defined",
          "name": "gather() with one turns server, one turn server, username, credential should succeed"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "RTCIceTransport is not defined",
          "name": "gather() with 2 stun servers should succeed"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "RTCIceTransport is not defined",
          "name": "gather() throws if closed"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "RTCIceTransport is not defined",
          "name": "gather() transitions gatheringState to 'gathering'"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "RTCIceTransport is not defined",
          "name": "gather() throws if called twice"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "promise_test: Unhandled rejection with value: object \"ReferenceError: RTCIceTransport is not defined\"",
          "name": "eventually transition gatheringState to 'complete'"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "promise_test: Unhandled rejection with value: object \"ReferenceError: RTCIceTransport is not defined\"",
          "name": "onicecandidate fires with null candidate before gatheringState transitions to 'complete'"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "promise_test: Unhandled rejection with value: object \"ReferenceError: RTCIceTransport is not defined\"",
          "name": "gather() returns at least one host candidate"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "promise_test: Unhandled rejection with value: object \"ReferenceError: RTCIceTransport is not defined\"",
          "name": "gather() returns no candidates with { gatherPolicy: 'relay'} and no turn servers"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "RTCIceTransport is not defined",
          "name": "start() throws if closed"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "RTCIceTransport is not defined",
          "name": "start() throws if usernameFragment or password not set"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "RTCIceTransport is not defined",
          "name": "start() does not transition state to 'checking' if no remote candidates added"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "RTCIceTransport is not defined",
          "name": "start() with default role sets role attribute to 'controlled'"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "RTCIceTransport is not defined",
          "name": "start() sets role attribute to 'controlling'"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "RTCIceTransport is not defined",
          "name": "addRemoteCandidate() throws if closed"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "RTCIceTransport is not defined",
          "name": "addRemoteCandidate() throws on invalid candidate"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "RTCIceTransport is not defined",
          "name": "start() transitions state to 'checking' if one remote candidate had been added"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "RTCIceTransport is not defined",
          "name": "addRemoteCandidate() transitions state to 'checking' if start() had been called before"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "RTCIceTransport is not defined",
          "name": "start() throws if later called with a different role"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "RTCIceTransport is not defined",
          "name": "start() flushes remote candidates and transitions state to 'new' if later called with different remote parameters"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "promise_test: Unhandled rejection with value: object \"ReferenceError: RTCIceTransport is not defined\"",
          "name": "Two RTCIceTransports connect to each other"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "promise_test: Unhandled rejection with value: object \"ReferenceError: RTCIceTransport is not defined\"",
          "name": "Selected candidate pair changes once the RTCIceTransports connect."
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "promise_test: Unhandled rejection with value: object \"ReferenceError: RTCIceTransport is not defined\"",
          "name": "getSelectedCandidatePair() returns null once the RTCIceTransport is stopped."
        }
      ]
    },
    {
      "test": "/webrtc/protocol/video-codecs.https.html",
      "status": "OK",
      "message": null,
      "duration": 2033,
      "subtests": [
        {
          "status": "PASS",
          "message": null,
          "name": "H.264 and VP8 should be supported in initial offer"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "H.264 and VP8 should be negotiated after handshake"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "All H.264 codecs MUST include profile-level-id"
        }
      ]
    },
    {
      "test": "/webrtc/RTCConfiguration-rtcpMuxPolicy.html",
      "status": "OK",
      "message": null,
      "duration": 1120,
      "subtests": [
        {
          "status": "PASS",
          "message": null,
          "name": "new RTCPeerConnection() should have default rtcpMuxPolicy require"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "new RTCPeerConnection({ rtcpMuxPolicy: undefined }) should have default rtcpMuxPolicy require"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "new RTCPeerConnection({ rtcpMuxPolicy: 'require' }) should succeed"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "new RTCPeerConnection({ rtcpMuxPolicy: 'negotiate' }) may succeed or throw NotSupportedError"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "new RTCPeerConnection(config) - with { rtcpMuxPolicy: null } should throw TypeError"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "setConfiguration(config) - with { rtcpMuxPolicy: null } should throw TypeError"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "new RTCPeerConnection(config) - with { rtcpMuxPolicy: 'invalid' } should throw TypeError"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "setConfiguration(config) - with { rtcpMuxPolicy: 'invalid' } should throw TypeError"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "setConfiguration({ rtcpMuxPolicy: 'negotiate' }) with initial rtcpMuxPolicy require should throw InvalidModificationError"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "setConfiguration({ rtcpMuxPolicy: 'require' }) with initial rtcpMuxPolicy negotiate should throw InvalidModificationError"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "setConfiguration({}) with initial rtcpMuxPolicy negotiate should throw InvalidModificationError"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "setRemoteDescription throws InvalidAccessError when called with an offer without rtcp-mux and rtcpMuxPolicy is set to require"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "setRemoteDescription throws InvalidAccessError when called with an answer without rtcp-mux and rtcpMuxPolicy is set to require"
        }
      ]
    },
    {
      "test": "/webrtc/RTCPeerConnection-addTransceiver.https.html",
      "status": "OK",
      "message": null,
      "duration": 2186,
      "subtests": [
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_throws: function \"() => pc.addTransceiver('invalid')\" threw object \"InvalidStateError: Failed to execute 'addTransceiver' on 'RTCPeerConnection': This operation is only supported in 'unified-plan'. 'unified-plan' will become the default behavior in the future, but it is currently experimental. To try it out, construct the RTCPeerConnection with sdpSemantics:'unified-plan' present in the RTCConfiguration argument.\" (\"InvalidStateError\") expected object \"TypeError\" (\"TypeError\")",
          "name": "addTransceiver() with string argument as invalid kind should throw TypeError"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "Failed to execute 'addTransceiver' on 'RTCPeerConnection': This operation is only supported in 'unified-plan'. 'unified-plan' will become the default behavior in the future, but it is currently experimental. To try it out, construct the RTCPeerConnection with sdpSemantics:'unified-plan' present in the RTCConfiguration argument.",
          "name": "addTransceiver('audio') should return an audio transceiver"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "Failed to execute 'addTransceiver' on 'RTCPeerConnection': This operation is only supported in 'unified-plan'. 'unified-plan' will become the default behavior in the future, but it is currently experimental. To try it out, construct the RTCPeerConnection with sdpSemantics:'unified-plan' present in the RTCConfiguration argument.",
          "name": "addTransceiver('video') should return a video transceiver"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "Failed to execute 'addTransceiver' on 'RTCPeerConnection': This operation is only supported in 'unified-plan'. 'unified-plan' will become the default behavior in the future, but it is currently experimental. To try it out, construct the RTCPeerConnection with sdpSemantics:'unified-plan' present in the RTCConfiguration argument.",
          "name": "addTransceiver() with direction sendonly should have result transceiver.direction be the same"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "Failed to execute 'addTransceiver' on 'RTCPeerConnection': This operation is only supported in 'unified-plan'. 'unified-plan' will become the default behavior in the future, but it is currently experimental. To try it out, construct the RTCPeerConnection with sdpSemantics:'unified-plan' present in the RTCConfiguration argument.",
          "name": "addTransceiver() with direction inactive should have result transceiver.direction be the same"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "addTransceiver() with invalid direction should throw TypeError"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "promise_test: Unhandled rejection with value: object \"InvalidStateError: Failed to execute 'addTransceiver' on 'RTCPeerConnection': This operation is only supported in 'unified-plan'. 'unified-plan' will become the default behavior in the future, but it is currently experimental. To try it out, construct the RTCPeerConnection with sdpSemantics:'unified-plan' present in the RTCConfiguration argument.\"",
          "name": "addTransceiver(track) should have result with sender.track be given track"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "promise_test: Unhandled rejection with value: object \"InvalidStateError: Failed to execute 'addTransceiver' on 'RTCPeerConnection': This operation is only supported in 'unified-plan'. 'unified-plan' will become the default behavior in the future, but it is currently experimental. To try it out, construct the RTCPeerConnection with sdpSemantics:'unified-plan' present in the RTCConfiguration argument.\"",
          "name": "addTransceiver(track) multiple times should create multiple transceivers"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_throws: function \"() =>\n      pc.addTransceiver('audio', {\n        sendEncodings: [{\n          rid: '@Invalid!'\n        }]\n      })\" threw object \"InvalidStateError: Failed to execute 'addTransceiver' on 'RTCPeerConnection': This operation is only supported in 'unified-plan'. 'unified-plan' will become the default behavior in the future, but it is currently experimental. To try it out, construct the RTCPeerConnection with sdpSemantics:'unified-plan' present in the RTCConfiguration argument.\" (\"InvalidStateError\") expected object \"TypeError\" (\"TypeError\")",
          "name": "addTransceiver() with rid containing invalid non-alphanumeric characters should throw TypeError"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_throws: function \"() =>\n      pc.addTransceiver('audio', {\n        sendEncodings: [{\n          rid: 'a'.repeat(17)\n        }]\n      })\" threw object \"InvalidStateError: Failed to execute 'addTransceiver' on 'RTCPeerConnection': This operation is only supported in 'unified-plan'. 'unified-plan' will become the default behavior in the future, but it is currently experimental. To try it out, construct the RTCPeerConnection with sdpSemantics:'unified-plan' present in the RTCConfiguration argument.\" (\"InvalidStateError\") expected object \"TypeError\" (\"TypeError\")",
          "name": "addTransceiver() with rid longer than 16 characters should throw TypeError"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "Failed to execute 'addTransceiver' on 'RTCPeerConnection': This operation is only supported in 'unified-plan'. 'unified-plan' will become the default behavior in the future, but it is currently experimental. To try it out, construct the RTCPeerConnection with sdpSemantics:'unified-plan' present in the RTCConfiguration argument.",
          "name": "addTransceiver() with valid rid value should succeed"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "Failed to execute 'addTransceiver' on 'RTCPeerConnection': This operation is only supported in 'unified-plan'. 'unified-plan' will become the default behavior in the future, but it is currently experimental. To try it out, construct the RTCPeerConnection with sdpSemantics:'unified-plan' present in the RTCConfiguration argument.",
          "name": "addTransceiver() with valid sendEncodings should succeed"
        }
      ]
    },
    {
      "test": "/webrtc/RTCPeerConnection-createAnswer.html",
      "status": "OK",
      "message": null,
      "duration": 1318,
      "subtests": [
        {
          "status": "PASS",
          "message": null,
          "name": "createAnswer() with null remoteDescription should reject with InvalidStateError"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_false: Expect answer to not be instance of RTCSessionDescription expected false got true",
          "name": "createAnswer() after setting remote description should succeed"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "createAnswer() when connection is closed reject with InvalidStateError"
        }
      ]
    },
    {
      "test": "/webrtc/RTCPeerConnection-setRemoteDescription-tracks.https.html",
      "status": "OK",
      "message": null,
      "duration": 1530,
      "subtests": [
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_equals: No remote stream created. expected 0 but got 1",
          "name": "addTrack() with a track and no stream makes ontrack fire with a track and no stream."
        },
        {
          "status": "PASS",
          "message": null,
          "name": "addTrack() with a track and a stream makes ontrack fire with a track and a stream."
        },
        {
          "status": "PASS",
          "message": null,
          "name": "ontrack fires before setRemoteDescription resolves."
        },
        {
          "status": "PASS",
          "message": null,
          "name": "addTrack() with two tracks and one stream makes ontrack fire twice with the tracks and shared stream."
        },
        {
          "status": "PASS",
          "message": null,
          "name": "addTrack() for an existing stream makes stream.onaddtrack fire."
        },
        {
          "status": "PASS",
          "message": null,
          "name": "stream.onaddtrack fires before setRemoteDescription resolves."
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "promise_test: Unhandled rejection with value: object \"NotSupportedError: Failed to execute 'addTrack' on 'RTCPeerConnection': Adding a track to multiple streams is not supported.\"",
          "name": "addTrack() with a track and two streams makes ontrack fire with a track and two streams."
        },
        {
          "status": "PASS",
          "message": null,
          "name": "ontrack's receiver matches getReceivers()."
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_equals: Receiver not removed. expected 1 but got 0",
          "name": "removeTrack() does not remove the receiver."
        },
        {
          "status": "PASS",
          "message": null,
          "name": "removeTrack() makes stream.onremovetrack fire and the track to be removed from the stream."
        },
        {
          "status": "PASS",
          "message": null,
          "name": "stream.onremovetrack fires before setRemoteDescription resolves."
        },
        {
          "status": "PASS",
          "message": null,
          "name": "removeTrack() makes track.onmute fire and the track to be muted."
        },
        {
          "status": "PASS",
          "message": null,
          "name": "track.onmute fires before setRemoteDescription resolves."
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "promise_test: Unhandled rejection with value: object \"InvalidAccessError: Failed to execute 'removeTrack' on 'RTCPeerConnection': The sender was not created by this peer connection.\"",
          "name": "removeTrack() twice is safe."
        }
      ]
    },
    {
      "test": "/webrtc/RTCRtpParameters-transactionId.html",
      "status": "OK",
      "message": null,
      "duration": 1670,
      "subtests": [
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "promise_test: Unhandled rejection with value: object \"InvalidStateError: Failed to execute 'addTransceiver' on 'RTCPeerConnection': This operation is only supported in 'unified-plan'. 'unified-plan' will become the default behavior in the future, but it is currently experimental. To try it out, construct the RTCPeerConnection with sdpSemantics:'unified-plan' present in the RTCConfiguration argument.\"",
          "name": "sender.getParameters() should return different transaction IDs for each call"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "promise_test: Unhandled rejection with value: object \"InvalidStateError: Failed to execute 'addTransceiver' on 'RTCPeerConnection': This operation is only supported in 'unified-plan'. 'unified-plan' will become the default behavior in the future, but it is currently experimental. To try it out, construct the RTCPeerConnection with sdpSemantics:'unified-plan' present in the RTCConfiguration argument.\"",
          "name": "sender.setParameters() with transaction ID different from last getParameters() should reject with InvalidModificationError"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "promise_test: Unhandled rejection with value: object \"InvalidStateError: Failed to execute 'addTransceiver' on 'RTCPeerConnection': This operation is only supported in 'unified-plan'. 'unified-plan' will become the default behavior in the future, but it is currently experimental. To try it out, construct the RTCPeerConnection with sdpSemantics:'unified-plan' present in the RTCConfiguration argument.\"",
          "name": "sender.setParameters() with transaction ID unset should reject with TypeError"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "promise_test: Unhandled rejection with value: object \"InvalidStateError: Failed to execute 'addTransceiver' on 'RTCPeerConnection': This operation is only supported in 'unified-plan'. 'unified-plan' will become the default behavior in the future, but it is currently experimental. To try it out, construct the RTCPeerConnection with sdpSemantics:'unified-plan' present in the RTCConfiguration argument.\"",
          "name": "setParameters() twice with the same parameters should reject with InvalidStateError"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "promise_test: Unhandled rejection with value: object \"InvalidStateError: Failed to execute 'addTransceiver' on 'RTCPeerConnection': This operation is only supported in 'unified-plan'. 'unified-plan' will become the default behavior in the future, but it is currently experimental. To try it out, construct the RTCPeerConnection with sdpSemantics:'unified-plan' present in the RTCConfiguration argument.\"",
          "name": "setParameters() with parameters older than last getParameters() should reject with InvalidModificationError"
        }
      ]
    },
    {
      "test": "/webrtc/RTCConfiguration-iceCandidatePoolSize.html",
      "status": "OK",
      "message": null,
      "duration": 417,
      "subtests": [
        {
          "status": "PASS",
          "message": null,
          "name": "Initialize a new RTCPeerConnection with no iceCandidatePoolSize"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "Initialize a new RTCPeerConnection with iceCandidatePoolSize: 0"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "Initialize a new RTCPeerConnection with iceCandidatePoolSize: 255"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "Initialize a new RTCPeerConnection with iceCandidatePoolSize: -1 (Out Of Range)"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "Initialize a new RTCPeerConnection with iceCandidatePoolSize: 256 (Out Of Range)"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "Reconfigure RTCPeerConnection instance iceCandidatePoolSize to 0"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "Reconfigure RTCPeerConnection instance iceCandidatePoolSize to 255"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "Reconfigure RTCPeerConnection instance iceCandidatePoolSize to -1 (Out Of Range)"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "Reconfigure RTCPeerConnection instance iceCandidatePoolSize to 256 (Out Of Range)"
        }
      ]
    },
    {
      "test": "/webrtc/RTCCertificate-postMessage.html",
      "status": "OK",
      "message": null,
      "duration": 1120,
      "subtests": [
        {
          "status": "PASS",
          "message": null,
          "name": "Check same-origin RTCCertificate serialization"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "Check cross-origin RTCCertificate serialization"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_throws: function \"() => { new RTCPeerConnection({certificates: [certificate2]}) }\" did not throw",
          "name": "Check cross-origin created RTCCertificate"
        }
      ]
    },
    {
      "test": "/webrtc/RTCPeerConnection-addTrack.https.html",
      "status": "OK",
      "message": null,
      "duration": 1432,
      "subtests": [
        {
          "status": "PASS",
          "message": null,
          "name": "addTrack when pc is closed should throw InvalidStateError"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_equals: Expect only one transceiver with sender added expected 1 but got 0",
          "name": "addTrack with single track argument and no stream should succeed"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "addTrack with single track argument and single stream should succeed"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "promise_test: Unhandled rejection with value: object \"NotSupportedError: Failed to execute 'addTrack' on 'RTCPeerConnection': Adding a track to multiple streams is not supported.\"",
          "name": "addTrack with single track argument and multiple streams should succeed"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "Adding the same track multiple times should throw InvalidAccessError"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "promise_test: Unhandled rejection with value: object \"InvalidStateError: Failed to execute 'addTransceiver' on 'RTCPeerConnection': This operation is only supported in 'unified-plan'. 'unified-plan' will become the default behavior in the future, but it is currently experimental. To try it out, construct the RTCPeerConnection with sdpSemantics:'unified-plan' present in the RTCConfiguration argument.\"",
          "name": "addTrack with existing sender with null track, same kind, and recvonly direction should reuse sender"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "promise_test: Unhandled rejection with value: object \"InvalidStateError: Failed to execute 'addTransceiver' on 'RTCPeerConnection': This operation is only supported in 'unified-plan'. 'unified-plan' will become the default behavior in the future, but it is currently experimental. To try it out, construct the RTCPeerConnection with sdpSemantics:'unified-plan' present in the RTCConfiguration argument.\"",
          "name": "addTrack with existing sender that has not been used to send should reuse the sender"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "promise_test: Unhandled rejection with value: object \"InvalidStateError: Failed to execute 'addTransceiver' on 'RTCPeerConnection': This operation is only supported in 'unified-plan'. 'unified-plan' will become the default behavior in the future, but it is currently experimental. To try it out, construct the RTCPeerConnection with sdpSemantics:'unified-plan' present in the RTCConfiguration argument.\"",
          "name": "addTrack with existing sender that has been used to send should create new sender"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "promise_test: Unhandled rejection with value: object \"InvalidStateError: Failed to execute 'addTransceiver' on 'RTCPeerConnection': This operation is only supported in 'unified-plan'. 'unified-plan' will become the default behavior in the future, but it is currently experimental. To try it out, construct the RTCPeerConnection with sdpSemantics:'unified-plan' present in the RTCConfiguration argument.\"",
          "name": "addTrack with existing sender with null track, different kind, and recvonly direction should create new sender"
        }
      ]
    },
    {
      "test": "/webrtc/RTCPeerConnection-removeTrack.https.html",
      "status": "OK",
      "message": null,
      "duration": 1282,
      "subtests": [
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "promise_test: Unhandled rejection with value: object \"InvalidStateError: Failed to execute 'addTransceiver' on 'RTCPeerConnection': This operation is only supported in 'unified-plan'. 'unified-plan' will become the default behavior in the future, but it is currently experimental. To try it out, construct the RTCPeerConnection with sdpSemantics:'unified-plan' present in the RTCConfiguration argument.\"",
          "name": "addTransceiver - Calling removeTrack when connection is closed should throw InvalidStateError"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "addTrack - Calling removeTrack when connection is closed should throw InvalidStateError"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "promise_test: Unhandled rejection with value: object \"InvalidStateError: Failed to execute 'addTransceiver' on 'RTCPeerConnection': This operation is only supported in 'unified-plan'. 'unified-plan' will become the default behavior in the future, but it is currently experimental. To try it out, construct the RTCPeerConnection with sdpSemantics:'unified-plan' present in the RTCConfiguration argument.\"",
          "name": "addTransceiver - Calling removeTrack on different connection that is closed should throw InvalidStateError"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "addTrack - Calling removeTrack on different connection that is closed should throw InvalidStateError"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "promise_test: Unhandled rejection with value: object \"InvalidStateError: Failed to execute 'addTransceiver' on 'RTCPeerConnection': This operation is only supported in 'unified-plan'. 'unified-plan' will become the default behavior in the future, but it is currently experimental. To try it out, construct the RTCPeerConnection with sdpSemantics:'unified-plan' present in the RTCConfiguration argument.\"",
          "name": "addTransceiver - Calling removeTrack on different connection should throw InvalidAccessError"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "addTrack - Calling removeTrack on different connection should throw InvalidAccessError"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "promise_test: Unhandled rejection with value: object \"InvalidStateError: Failed to execute 'addTransceiver' on 'RTCPeerConnection': This operation is only supported in 'unified-plan'. 'unified-plan' will become the default behavior in the future, but it is currently experimental. To try it out, construct the RTCPeerConnection with sdpSemantics:'unified-plan' present in the RTCConfiguration argument.\"",
          "name": "addTransceiver - Calling removeTrack with valid sender should set sender.track to null"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "addTrack - Calling removeTrack with valid sender should set sender.track to null"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "promise_test: Unhandled rejection with value: object \"InvalidStateError: Failed to execute 'addTransceiver' on 'RTCPeerConnection': This operation is only supported in 'unified-plan'. 'unified-plan' will become the default behavior in the future, but it is currently experimental. To try it out, construct the RTCPeerConnection with sdpSemantics:'unified-plan' present in the RTCConfiguration argument.\"",
          "name": "Calling removeTrack with currentDirection sendrecv should set direction to recvonly"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "promise_test: Unhandled rejection with value: object \"InvalidStateError: Failed to execute 'addTransceiver' on 'RTCPeerConnection': This operation is only supported in 'unified-plan'. 'unified-plan' will become the default behavior in the future, but it is currently experimental. To try it out, construct the RTCPeerConnection with sdpSemantics:'unified-plan' present in the RTCConfiguration argument.\"",
          "name": "Calling removeTrack with currentDirection sendonly should set direction to inactive"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "promise_test: Unhandled rejection with value: object \"InvalidStateError: Failed to execute 'addTransceiver' on 'RTCPeerConnection': This operation is only supported in 'unified-plan'. 'unified-plan' will become the default behavior in the future, but it is currently experimental. To try it out, construct the RTCPeerConnection with sdpSemantics:'unified-plan' present in the RTCConfiguration argument.\"",
          "name": "Calling removeTrack with currentDirection recvonly should not change direction"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "promise_test: Unhandled rejection with value: object \"InvalidStateError: Failed to execute 'addTransceiver' on 'RTCPeerConnection': This operation is only supported in 'unified-plan'. 'unified-plan' will become the default behavior in the future, but it is currently experimental. To try it out, construct the RTCPeerConnection with sdpSemantics:'unified-plan' present in the RTCConfiguration argument.\"",
          "name": "Calling removeTrack with currentDirection inactive should not change direction"
        }
      ]
    },
    {
      "test": "/webrtc/RTCPeerConnection-track-stats.https.html",
      "status": "OK",
      "message": null,
      "duration": 11612,
      "subtests": [
        {
          "status": "PASS",
          "message": null,
          "name": "addTrack() without setLocalDescription() yields track stats"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "addTrack() without setLocalDescription() yields media stream stats"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "addTrack() with setLocalDescription() yields track stats"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "addTrack() with setLocalDescription() yields media stream stats"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "addTrack(): Media stream stats references track stats"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "Media stream stats references track stats"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "O/A exchange yields outbound RTP stream stats for sending track"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "O/A exchange yields inbound RTP stream stats for receiving track"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "replaceTrack() before offer: new track attachment stats present"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "replaceTrack() after offer, before answer: new track attachment stats present"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "replaceTrack() after answer: new track attachment stats present"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_true: Has stats for original track expected true got false",
          "name": "replaceTrack(): original track attachment stats present after replacing"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "RTCRtpSender.getStats() contains only outbound-rtp and related stats"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "RTCRtpReceiver.getStats() contains only inbound-rtp and related stats"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "RTCPeerConnection.getStats(sendingTrack) is the same as RTCRtpSender.getStats()"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "RTCPeerConnection.getStats(receivingTrack) is the same as RTCRtpReceiver.getStats()"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "RTCPeerConnection.getStats(track) throws InvalidAccessError when there are zero senders or receivers for the track"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "RTCPeerConnection.getStats(track) throws InvalidAccessError when there are multiple senders for the track"
        }
      ]
    },
    {
      "test": "/webrtc/RTCRtpReceiver-getSynchronizationSources.https.html",
      "status": "OK",
      "message": null,
      "duration": 1982,
      "subtests": [
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "promise_test: Unhandled rejection with value: object \"TypeError: receiver.getSynchronizationSources is not a function\"",
          "name": "[audio] getSynchronizationSources() eventually returns a non-empty list"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "promise_test: Unhandled rejection with value: object \"TypeError: receiver.getSynchronizationSources is not a function\"",
          "name": "[audio] RTCRtpSynchronizationSource.timestamp is a number"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "promise_test: Unhandled rejection with value: object \"TypeError: receiver.getSynchronizationSources is not a function\"",
          "name": "[audio] getSynchronizationSources() does not contain SSRCs older than 10 seconds"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "promise_test: Unhandled rejection with value: object \"TypeError: receiver.getSynchronizationSources is not a function\"",
          "name": "[audio] RTCRtpSynchronizationSource.timestamp is comparable to performance.timeOrigin + performance.now()"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "promise_test: Unhandled rejection with value: object \"TypeError: receiver.getSynchronizationSources is not a function\"",
          "name": "[audio] RTCRtpSynchronizationSource.source is a number"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "promise_test: Unhandled rejection with value: object \"TypeError: receiver.getSynchronizationSources is not a function\"",
          "name": "[video] getSynchronizationSources() eventually returns a non-empty list"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "promise_test: Unhandled rejection with value: object \"TypeError: receiver.getSynchronizationSources is not a function\"",
          "name": "[video] RTCRtpSynchronizationSource.timestamp is a number"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "promise_test: Unhandled rejection with value: object \"TypeError: receiver.getSynchronizationSources is not a function\"",
          "name": "[video] getSynchronizationSources() does not contain SSRCs older than 10 seconds"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "promise_test: Unhandled rejection with value: object \"TypeError: receiver.getSynchronizationSources is not a function\"",
          "name": "[video] RTCRtpSynchronizationSource.timestamp is comparable to performance.timeOrigin + performance.now()"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "promise_test: Unhandled rejection with value: object \"TypeError: receiver.getSynchronizationSources is not a function\"",
          "name": "[video] RTCRtpSynchronizationSource.source is a number"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "promise_test: Unhandled rejection with value: object \"TypeError: receiver.getSynchronizationSources is not a function\"",
          "name": "[audio-only] RTCRtpSynchronizationSource.audioLevel is a number [0, 1]"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "promise_test: Unhandled rejection with value: object \"TypeError: receiver.getSynchronizationSources is not a function\"",
          "name": "[audio-only] RTCRtpSynchronizationSource.voiceActivityFlag is a boolean"
        }
      ]
    },
    {
      "test": "/webrtc/RTCDataChannel-id.html",
      "status": "OK",
      "message": null,
      "duration": 1270,
      "subtests": [
        {
          "status": "PASS",
          "message": null,
          "name": "DTLS client uses odd data channel IDs"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "DTLS server uses even data channel IDs"
        }
      ]
    },
    {
      "test": "/webrtc/RTCRtpTransceiver-direction.html",
      "status": "OK",
      "message": null,
      "duration": 1971,
      "subtests": [
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "Failed to execute 'addTransceiver' on 'RTCPeerConnection': This operation is only supported in 'unified-plan'. 'unified-plan' will become the default behavior in the future, but it is currently experimental. To try it out, construct the RTCPeerConnection with sdpSemantics:'unified-plan' present in the RTCConfiguration argument.",
          "name": "setting direction should change transceiver.direction"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "Failed to execute 'addTransceiver' on 'RTCPeerConnection': This operation is only supported in 'unified-plan'. 'unified-plan' will become the default behavior in the future, but it is currently experimental. To try it out, construct the RTCPeerConnection with sdpSemantics:'unified-plan' present in the RTCConfiguration argument.",
          "name": "setting direction with same direction should have no effect"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "Failed to execute 'addTransceiver' on 'RTCPeerConnection': This operation is only supported in 'unified-plan'. 'unified-plan' will become the default behavior in the future, but it is currently experimental. To try it out, construct the RTCPeerConnection with sdpSemantics:'unified-plan' present in the RTCConfiguration argument.",
          "name": "setting direction should change transceiver.direction independent of transceiver.currentDirection"
        }
      ]
    },
    {
      "test": "/webrtc/RTCPeerConnection-setLocalDescription-offer.html",
      "status": "OK",
      "message": null,
      "duration": 1571,
      "subtests": [
        {
          "status": "PASS",
          "message": null,
          "name": "setLocalDescription with valid offer should succeed"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "setLocalDescription with type offer and null sdp should use lastOffer generated from createOffer"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "setLocalDescription() with offer not created by own createOffer() should reject with InvalidModificationError"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_unreached: Should have rejected: undefined Reached unreachable code",
          "name": "Set created offer other than last offer should reject with InvalidModificationError"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "Creating and setting offer multiple times should succeed"
        }
      ]
    },
    {
      "test": "/webrtc/RTCDataChannelEvent-constructor.html",
      "status": "OK",
      "message": null,
      "duration": 1267,
      "subtests": [
        {
          "status": "PASS",
          "message": null,
          "name": "RTCDataChannelEvent constructor without a required argument."
        },
        {
          "status": "PASS",
          "message": null,
          "name": "RTCDataChannelEvent constructor with channel passed as null."
        },
        {
          "status": "PASS",
          "message": null,
          "name": "RTCDataChannelEvent constructor with a channel passed as undefined."
        },
        {
          "status": "PASS",
          "message": null,
          "name": "RTCDataChannelEvent constructor with full arguments."
        }
      ]
    },
    {
      "test": "/webrtc/RTCDataChannel-bufferedAmount.html",
      "status": "OK",
      "message": null,
      "duration": 1319,
      "subtests": [
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_equals: Expect bufferedAmount to be the byte length of the unicode string expected 12 but got 0",
          "name": "bufferedAmount should increase to byte length of encoded unicode string sent"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_equals: Expect bufferedAmount to increase to byte length of sent buffer expected 5 but got 0",
          "name": "bufferedAmount should increase to byte length of buffer sent"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "promise_test: Unhandled rejection with value: object \"NotSupportedError: Failed to execute 'send' on 'RTCDataChannel': Blob support not implemented yet\"",
          "name": "bufferedAmount should increase to size of blob sent"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_unreached: Unexpected promise rejection: Error: assert_equals: Expect bufferedAmount to be the total length of all messages queued to send expected 5 but got 0 Reached unreachable code",
          "name": "bufferedAmount should increase by byte length for each message sent"
        }
      ]
    },
    {
      "test": "/webrtc/RTCPeerConnection-getDefaultIceServers.html",
      "status": "OK",
      "message": null,
      "duration": 1269,
      "subtests": [
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "RTCPeerConnection.getDefaultIceServers is not a function",
          "name": "RTCPeerConnection.getDefaultIceServers() should return array of RTCIceServer"
        }
      ]
    },
    {
      "test": "/webrtc/RTCPeerConnection-iceGatheringState.html",
      "status": "OK",
      "message": null,
      "duration": 2021,
      "subtests": [
        {
          "status": "PASS",
          "message": null,
          "name": "Initial iceGatheringState should be new"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "iceGatheringState should eventually become complete after setLocalDescription"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "Cannot read property 'transport' of undefined",
          "name": "connection with one data channel should eventually have connected connection state"
        }
      ]
    },
    {
      "test": "/webrtc/RTCTrackEvent-constructor.html",
      "status": "OK",
      "message": null,
      "duration": 1521,
      "subtests": [
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "Failed to execute 'addTransceiver' on 'RTCPeerConnection': This operation is only supported in 'unified-plan'. 'unified-plan' will become the default behavior in the future, but it is currently experimental. To try it out, construct the RTCPeerConnection with sdpSemantics:'unified-plan' present in the RTCConfiguration argument.",
          "name": "new RTCTrackEvent() with valid receiver, track, transceiver should succeed"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "Failed to execute 'addTransceiver' on 'RTCPeerConnection': This operation is only supported in 'unified-plan'. 'unified-plan' will become the default behavior in the future, but it is currently experimental. To try it out, construct the RTCPeerConnection with sdpSemantics:'unified-plan' present in the RTCConfiguration argument.",
          "name": "new RTCTrackEvent() with valid receiver, track, streams, transceiver should succeed"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "Failed to execute 'addTransceiver' on 'RTCPeerConnection': This operation is only supported in 'unified-plan'. 'unified-plan' will become the default behavior in the future, but it is currently experimental. To try it out, construct the RTCPeerConnection with sdpSemantics:'unified-plan' present in the RTCConfiguration argument.",
          "name": "new RTCTrackEvent() with valid receiver, track, multiple streams, transceiver should succeed"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "Failed to execute 'addTransceiver' on 'RTCPeerConnection': This operation is only supported in 'unified-plan'. 'unified-plan' will become the default behavior in the future, but it is currently experimental. To try it out, construct the RTCPeerConnection with sdpSemantics:'unified-plan' present in the RTCConfiguration argument.",
          "name": "new RTCTrackEvent() with unrelated receiver, track, streams, transceiver should succeed"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "Failed to execute 'addTransceiver' on 'RTCPeerConnection': This operation is only supported in 'unified-plan'. 'unified-plan' will become the default behavior in the future, but it is currently experimental. To try it out, construct the RTCPeerConnection with sdpSemantics:'unified-plan' present in the RTCConfiguration argument.",
          "name": "new RTCTrackEvent() with no transceiver should throw TypeError"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "Failed to execute 'addTransceiver' on 'RTCPeerConnection': This operation is only supported in 'unified-plan'. 'unified-plan' will become the default behavior in the future, but it is currently experimental. To try it out, construct the RTCPeerConnection with sdpSemantics:'unified-plan' present in the RTCConfiguration argument.",
          "name": "new RTCTrackEvent() with no track should throw TypeError"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "Failed to execute 'addTransceiver' on 'RTCPeerConnection': This operation is only supported in 'unified-plan'. 'unified-plan' will become the default behavior in the future, but it is currently experimental. To try it out, construct the RTCPeerConnection with sdpSemantics:'unified-plan' present in the RTCConfiguration argument.",
          "name": "new RTCTrackEvent() with no receiver should throw TypeError"
        }
      ]
    },
    {
      "test": "/webrtc/RTCConfiguration-iceTransportPolicy.html",
      "status": "OK",
      "message": null,
      "duration": 1270,
      "subtests": [
        {
          "status": "PASS",
          "message": null,
          "name": "new RTCPeerConnection() should have default iceTransportPolicy all"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "new RTCPeerConnection({ iceTransportPolicy: undefined }) should have default iceTransportPolicy all"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "new RTCPeerConnection({ iceTransportPolicy: 'all' }) should succeed"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "new RTCPeerConnection({ iceTransportPolicy: 'relay' }) should succeed"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "setConfiguration({ iceTransportPolicy: 'relay' }) with initial iceTransportPolicy all should succeed"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "setConfiguration({ iceTransportPolicy: 'all' }) with initial iceTransportPolicy relay should succeed"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "setConfiguration({}) with initial iceTransportPolicy relay should set new value to all"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "new RTCPeerConnection(config) - with invalid iceTransportPolicy should throw TypeError"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "setConfiguration(config) - with invalid iceTransportPolicy should throw TypeError"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "new RTCPeerConnection(config) - with none iceTransportPolicy should throw TypeError"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "setConfiguration(config) - with none iceTransportPolicy should throw TypeError"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "new RTCPeerConnection(config) - with null iceTransportPolicy should throw TypeError"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "setConfiguration(config) - with null iceTransportPolicy should throw TypeError"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_equals: expected \"all\" but got \"relay\"",
          "name": "new RTCPeerConnection({ iceTransports: 'relay' }) should have no effect"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "Failed to construct 'RTCPeerConnection': The provided value 'invalid' is not a valid enum value of type RTCIceTransportPolicy.",
          "name": "new RTCPeerConnection({ iceTransports: 'invalid' }) should have no effect"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "Failed to construct 'RTCPeerConnection': The provided value 'null' is not a valid enum value of type RTCIceTransportPolicy.",
          "name": "new RTCPeerConnection({ iceTransports: null }) should have no effect"
        }
      ]
    },
    {
      "test": "/webrtc/RTCDTMFSender-insertDTMF.https.html",
      "status": "OK",
      "message": null,
      "duration": 462,
      "subtests": [
        {
          "status": "PASS",
          "message": null,
          "name": "insertDTMF() should succeed if tones contains valid DTMF characters"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "insertDTMF() should throw InvalidCharacterError if tones contains invalid DTMF characters"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "Failed to execute 'addTransceiver' on 'RTCPeerConnection': This operation is only supported in 'unified-plan'. 'unified-plan' will become the default behavior in the future, but it is currently experimental. To try it out, construct the RTCPeerConnection with sdpSemantics:'unified-plan' present in the RTCConfiguration argument.",
          "name": "insertDTMF() should throw InvalidStateError if transceiver is stopped"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "promise_test: Unhandled rejection with value: object \"InvalidStateError: Failed to execute 'addTransceiver' on 'RTCPeerConnection': This operation is only supported in 'unified-plan'. 'unified-plan' will become the default behavior in the future, but it is currently experimental. To try it out, construct the RTCPeerConnection with sdpSemantics:'unified-plan' present in the RTCConfiguration argument.\"",
          "name": "insertDTMF() should throw InvalidStateError if transceiver.currentDirection is recvonly"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "promise_test: Unhandled rejection with value: object \"InvalidStateError: Failed to execute 'addTransceiver' on 'RTCPeerConnection': This operation is only supported in 'unified-plan'. 'unified-plan' will become the default behavior in the future, but it is currently experimental. To try it out, construct the RTCPeerConnection with sdpSemantics:'unified-plan' present in the RTCConfiguration argument.\"",
          "name": "insertDTMF() should throw InvalidStateError if transceiver.currentDirection is inactive"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "insertDTMF() should set toneBuffer to provided tones normalized, with old tones overridden"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "insertDTMF() after remove and close should reject"
        }
      ]
    },
    {
      "status": "TIMEOUT",
      "expected": "OK",
      "test": "/webrtc/RTCPeerConnection-remote-track-mute.https.html",
      "subtests": [
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_true: track is muted in ontrack expected true got false",
          "name": "ontrack: track goes from muted to unmuted"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "promise_test: Unhandled rejection with value: object \"TypeError: Cannot set property 'direction' of null\"",
          "name": "Changing transceiver direction to 'inactive' mutes the remote track"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "promise_test: Unhandled rejection with value: object \"TypeError: Cannot set property 'direction' of null\"",
          "name": "Changing transceiver direction to 'sendrecv' unmutes the remote track"
        },
        {
          "status": "TIMEOUT",
          "expected": "PASS",
          "message": "Test timed out",
          "name": "pc.close() mutes remote tracks"
        }
      ],
      "duration": 11553,
      "message": null
    },
    {
      "test": "/webrtc/RTCConfiguration-iceServers.html",
      "status": "OK",
      "message": null,
      "duration": 219,
      "subtests": [
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_equals: expected (undefined) undefined but got (object) []",
          "name": "new RTCPeerConnection() should have default configuration.iceServers of undefined"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "new RTCPeerConnection(config) - {} should succeed"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "setConfiguration(config) - {} should succeed"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "new RTCPeerConnection(config) - { iceServers: null } should throw TypeError"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "setConfiguration(config) - { iceServers: null } should throw TypeError"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_equals: expected (undefined) undefined but got (object) []",
          "name": "new RTCPeerConnection(config) - { iceServers: undefined } should succeed"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_equals: expected (undefined) undefined but got (object) []",
          "name": "setConfiguration(config) - { iceServers: undefined } should succeed"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "new RTCPeerConnection(config) - { iceServers: [] } should succeed"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "setConfiguration(config) - { iceServers: [] } should succeed"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "new RTCPeerConnection(config) - { iceServers: [null] } should throw TypeError"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "setConfiguration(config) - { iceServers: [null] } should throw TypeError"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "new RTCPeerConnection(config) - { iceServers: [undefined] } should throw TypeError"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "setConfiguration(config) - { iceServers: [undefined] } should throw TypeError"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "new RTCPeerConnection(config) - { iceServers: [{}] } should throw TypeError"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "setConfiguration(config) - { iceServers: [{}] } should throw TypeError"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_equals: expected (string) \"password\" but got (undefined) undefined",
          "name": "new RTCPeerConnection(config) - with stun server should succeed"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_equals: expected (string) \"password\" but got (undefined) undefined",
          "name": "setConfiguration(config) - with stun server should succeed"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_equals: expected (string) \"password\" but got (undefined) undefined",
          "name": "new RTCPeerConnection(config) - with stun server array should succeed"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_equals: expected (string) \"password\" but got (undefined) undefined",
          "name": "setConfiguration(config) - with stun server array should succeed"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_equals: expected 1 but got 2",
          "name": "new RTCPeerConnection(config) - with 2 stun servers should succeed"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_equals: expected 1 but got 2",
          "name": "setConfiguration(config) - with 2 stun servers should succeed"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_equals: expected (string) \"password\" but got (undefined) undefined",
          "name": "new RTCPeerConnection(config) - with turn server, username, credential should succeed"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_equals: expected (string) \"password\" but got (undefined) undefined",
          "name": "setConfiguration(config) - with turn server, username, credential should succeed"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "Failed to construct 'RTCPeerConnection': Failed to initialize native PeerConnection.",
          "name": "new RTCPeerConnection(config) - with turns server and empty string username, credential should succeed"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "Failed to execute 'setConfiguration' on 'RTCPeerConnection': Could not update the PeerConnection with the given configuration.",
          "name": "setConfiguration(config) - with turns server and empty string username, credential should succeed"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "Failed to construct 'RTCPeerConnection': Failed to initialize native PeerConnection.",
          "name": "new RTCPeerConnection(config) - with turn server and empty string username, credential should succeed"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "Failed to execute 'setConfiguration' on 'RTCPeerConnection': Could not update the PeerConnection with the given configuration.",
          "name": "setConfiguration(config) - with turn server and empty string username, credential should succeed"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_equals: expected 1 but got 2",
          "name": "new RTCPeerConnection(config) - with one turns server, one turn server, username, credential should succeed"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_equals: expected 1 but got 2",
          "name": "setConfiguration(config) - with one turns server, one turn server, username, credential should succeed"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_equals: expected (string) \"password\" but got (undefined) undefined",
          "name": "new RTCPeerConnection(config) - with stun server and credentialType password should succeed"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_equals: expected (string) \"password\" but got (undefined) undefined",
          "name": "setConfiguration(config) - with stun server and credentialType password should succeed"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "new RTCPeerConnection(config) - with turn server and no credentials should throw InvalidAccessError"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "setConfiguration(config) - with turn server and no credentials should throw InvalidAccessError"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "new RTCPeerConnection(config) - with turn server and only username should throw InvalidAccessError"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "setConfiguration(config) - with turn server and only username should throw InvalidAccessError"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "new RTCPeerConnection(config) - with turn server and only credential should throw InvalidAccessError"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "setConfiguration(config) - with turn server and only credential should throw InvalidAccessError"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "new RTCPeerConnection(config) - with turns server and no credentials should throw InvalidAccessError"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "setConfiguration(config) - with turns server and no credentials should throw InvalidAccessError"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "new RTCPeerConnection(config) - with turns server and only username should throw InvalidAccessError"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "setConfiguration(config) - with turns server and only username should throw InvalidAccessError"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "new RTCPeerConnection(config) - with turns server and only credential should throw InvalidAccessError"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "setConfiguration(config) - with turns server and only credential should throw InvalidAccessError"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "new RTCPeerConnection(config) - with \"\" url should throw SyntaxError"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "setConfiguration(config) - with \"\" url should throw SyntaxError"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "new RTCPeerConnection(config) - with [\"stun:stun1.example.net\", \"\"] url should throw SyntaxError"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "setConfiguration(config) - with [\"stun:stun1.example.net\", \"\"] url should throw SyntaxError"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "new RTCPeerConnection(config) - with relative url should throw SyntaxError"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "setConfiguration(config) - with relative url should throw SyntaxError"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "new RTCPeerConnection(config) - with http url should throw SyntaxError"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "setConfiguration(config) - with http url should throw SyntaxError"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_throws: function \"() =>\n      makePc({ iceServers: [{\n        urls: 'turn://example.org/foo?x=y'\n      }] })\" threw object \"InvalidAccessError: Failed to construct 'RTCPeerConnection': Both username and credential are required when the URL scheme is \"turn\" or \"turns\".\" (\"InvalidAccessError\") expected object \"SyntaxError\" (\"SyntaxError\")",
          "name": "new RTCPeerConnection(config) - with invalid turn url should throw SyntaxError"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_throws: function \"() =>\n      makePc({ iceServers: [{\n        urls: 'turn://example.org/foo?x=y'\n      }] })\" threw object \"InvalidAccessError: Failed to execute 'setConfiguration' on 'RTCPeerConnection': Both username and credential are required when the URL scheme is \"turn\" or \"turns\".\" (\"InvalidAccessError\") expected object \"SyntaxError\" (\"SyntaxError\")",
          "name": "setConfiguration(config) - with invalid turn url should throw SyntaxError"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_throws: function \"() =>\n      makePc({ iceServers: [{\n        urls: 'stun://example.org/foo?x=y'\n      }] })\" threw object \"NotSupportedError: Failed to construct 'RTCPeerConnection': Failed to initialize native PeerConnection.\" (\"NotSupportedError\") expected object \"SyntaxError\" (\"SyntaxError\")",
          "name": "new RTCPeerConnection(config) - with invalid stun url should throw SyntaxError"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_throws: function \"() =>\n      makePc({ iceServers: [{\n        urls: 'stun://example.org/foo?x=y'\n      }] })\" threw object \"OperationError: Failed to execute 'setConfiguration' on 'RTCPeerConnection': Could not update the PeerConnection with the given configuration.\" (\"OperationError\") expected object \"SyntaxError\" (\"SyntaxError\")",
          "name": "setConfiguration(config) - with invalid stun url should throw SyntaxError"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_throws: function \"() =>\n      makePc({ iceServers: [{\n        urls: []\n      }] })\" did not throw",
          "name": "new RTCPeerConnection(config) - with empty urls should throw SyntaxError"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_throws: function \"() =>\n      makePc({ iceServers: [{\n        urls: []\n      }] })\" did not throw",
          "name": "setConfiguration(config) - with empty urls should throw SyntaxError"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_throws: function \"() =>\n      makePc({ iceServers: [{\n        urls: [],\n        credentialType: 'invalid'\n      }] })\" did not throw",
          "name": "new RTCPeerConnection(config) - with invalid credentialType should throw TypeError"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_throws: function \"() =>\n      makePc({ iceServers: [{\n        urls: [],\n        credentialType: 'invalid'\n      }] })\" did not throw",
          "name": "setConfiguration(config) - with invalid credentialType should throw TypeError"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_throws: function \"() =>\n      makePc({ iceServers: [{\n        urls: [],\n        credentialType: 'token'\n      }] })\" did not throw",
          "name": "new RTCPeerConnection(config) - with credentialType token should throw TypeError"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_throws: function \"() =>\n      makePc({ iceServers: [{\n        urls: [],\n        credentialType: 'token'\n      }] })\" did not throw",
          "name": "setConfiguration(config) - with credentialType token should throw TypeError"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_throws: function \"() =>\n      makePc({ iceServers: [{\n        url: 'stun:stun1.example.net'\n      }] })\" did not throw",
          "name": "new RTCPeerConnection(config) - with url field should throw TypeError"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_throws: function \"() =>\n      makePc({ iceServers: [{\n        url: 'stun:stun1.example.net'\n      }] })\" did not throw",
          "name": "setConfiguration(config) - with url field should throw TypeError"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_throws: function \"() =>\n      makePc({ iceServers: [{\n        urls: 'turns:turn.example.org',\n        credentialType: 'password',\n        username: 'user',\n        credential: {\n          macKey: '',\n          accessToken: ''\n        }\n      }] })\" did not throw",
          "name": "new RTCPeerConnection(config) - with turns server, credentialType password, and RTCOauthCredential credential should throw InvalidAccessError"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_throws: function \"() =>\n      makePc({ iceServers: [{\n        urls: 'turns:turn.example.org',\n        credentialType: 'password',\n        username: 'user',\n        credential: {\n          macKey: '',\n          accessToken: ''\n        }\n      }] })\" did not throw",
          "name": "setConfiguration(config) - with turns server, credentialType password, and RTCOauthCredential credential should throw InvalidAccessError"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_throws: function \"() =>\n      makePc({ iceServers: [{\n        urls: 'turns:turn.example.org',\n        credentialType: 'oauth',\n        username: 'user',\n        credential: 'cred'\n      }] })\" did not throw",
          "name": "new RTCPeerConnection(config) - with turns server, credentialType oauth, and string credential should throw InvalidAccessError"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_throws: function \"() =>\n      makePc({ iceServers: [{\n        urls: 'turns:turn.example.org',\n        credentialType: 'oauth',\n        username: 'user',\n        credential: 'cred'\n      }] })\" did not throw",
          "name": "setConfiguration(config) - with turns server, credentialType oauth, and string credential should throw InvalidAccessError"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_equals: expected (string) \"oauth\" but got (undefined) undefined",
          "name": "new RTCPeerConnection(config) - with turns server, credentialType oauth and RTCOAuthCredential credential should succeed"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_equals: expected (string) \"oauth\" but got (undefined) undefined",
          "name": "setConfiguration(config) - with turns server, credentialType oauth and RTCOAuthCredential credential should succeed"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_equals: expected 1 but got 2",
          "name": "new RTCPeerConnection(config) - with both turns and stun server, credentialType oauth and RTCOAuthCredential credential should succeed"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_equals: expected 1 but got 2",
          "name": "setConfiguration(config) - with both turns and stun server, credentialType oauth and RTCOAuthCredential credential should succeed"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_equals: expected (string) \"oauth\" but got (undefined) undefined",
          "name": "new RTCPeerConnection(config) - with stun server, credentialType oauth, and string credential should succeed"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_equals: expected (string) \"oauth\" but got (undefined) undefined",
          "name": "setConfiguration(config) - with stun server, credentialType oauth, and string credential should succeed"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_equals: expected (string) \"password\" but got (undefined) undefined",
          "name": "new RTCPeerConnection(config) - with stun server, credentialType password, and RTCOAuthCredential credential should succeed"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_equals: expected (string) \"password\" but got (undefined) undefined",
          "name": "setConfiguration(config) - with stun server, credentialType password, and RTCOAuthCredential credential should succeed"
        }
      ]
    },
    {
      "test": "/webrtc/RTCPeerConnection-setDescription-transceiver.html",
      "status": "OK",
      "message": null,
      "duration": 1171,
      "subtests": [
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "Failed to execute 'addTransceiver' on 'RTCPeerConnection': This operation is only supported in 'unified-plan'. 'unified-plan' will become the default behavior in the future, but it is currently experimental. To try it out, construct the RTCPeerConnection with sdpSemantics:'unified-plan' present in the RTCConfiguration argument.",
          "name": "setLocalDescription(offer) with m= section should assign mid to corresponding transceiver"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "Failed to execute 'addTransceiver' on 'RTCPeerConnection': This operation is only supported in 'unified-plan'. 'unified-plan' will become the default behavior in the future, but it is currently experimental. To try it out, construct the RTCPeerConnection with sdpSemantics:'unified-plan' present in the RTCConfiguration argument.",
          "name": "setRemoteDescription(offer) with m= section and no existing transceiver should create corresponding transceiver"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "Failed to execute 'addTransceiver' on 'RTCPeerConnection': This operation is only supported in 'unified-plan'. 'unified-plan' will become the default behavior in the future, but it is currently experimental. To try it out, construct the RTCPeerConnection with sdpSemantics:'unified-plan' present in the RTCConfiguration argument.",
          "name": "setLocalDescription(rollback) should unset transceiver.mid"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "Failed to execute 'addTransceiver' on 'RTCPeerConnection': This operation is only supported in 'unified-plan'. 'unified-plan' will become the default behavior in the future, but it is currently experimental. To try it out, construct the RTCPeerConnection with sdpSemantics:'unified-plan' present in the RTCConfiguration argument.",
          "name": "setLocalDescription(rollback) should only unset transceiver mids associated with current round"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "Failed to execute 'addTransceiver' on 'RTCPeerConnection': This operation is only supported in 'unified-plan'. 'unified-plan' will become the default behavior in the future, but it is currently experimental. To try it out, construct the RTCPeerConnection with sdpSemantics:'unified-plan' present in the RTCConfiguration argument.",
          "name": "setRemoteDescription(rollback) should remove newly created transceiver from transceiver list"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "promise_test: Unhandled rejection with value: object \"InvalidStateError: Failed to execute 'addTransceiver' on 'RTCPeerConnection': This operation is only supported in 'unified-plan'. 'unified-plan' will become the default behavior in the future, but it is currently experimental. To try it out, construct the RTCPeerConnection with sdpSemantics:'unified-plan' present in the RTCConfiguration argument.\"",
          "name": "setRemoteDescription should stop the transceiver if its corresponding m section is rejected"
        }
      ]
    },
    {
      "test": "/webrtc/RTCRtpParameters-encodings.html",
      "status": "OK",
      "message": null,
      "duration": 1470,
      "subtests": [
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "promise_test: Unhandled rejection with value: object \"InvalidStateError: Failed to execute 'addTransceiver' on 'RTCPeerConnection': This operation is only supported in 'unified-plan'. 'unified-plan' will become the default behavior in the future, but it is currently experimental. To try it out, construct the RTCPeerConnection with sdpSemantics:'unified-plan' present in the RTCConfiguration argument.\"",
          "name": "addTransceiver() with undefined sendEncodings should have default encoding parameter with active set to true"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "promise_test: Unhandled rejection with value: object \"InvalidStateError: Failed to execute 'addTransceiver' on 'RTCPeerConnection': This operation is only supported in 'unified-plan'. 'unified-plan' will become the default behavior in the future, but it is currently experimental. To try it out, construct the RTCPeerConnection with sdpSemantics:'unified-plan' present in the RTCConfiguration argument.\"",
          "name": "addTransceiver() with empty list sendEncodings should have default encoding parameter with active set to true"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "promise_test: Unhandled rejection with value: object \"InvalidStateError: Failed to execute 'addTransceiver' on 'RTCPeerConnection': This operation is only supported in 'unified-plan'. 'unified-plan' will become the default behavior in the future, but it is currently experimental. To try it out, construct the RTCPeerConnection with sdpSemantics:'unified-plan' present in the RTCConfiguration argument.\"",
          "name": "sender.getParameters() should return sendEncodings set by addTransceiver()"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "promise_test: Unhandled rejection with value: object \"InvalidStateError: Failed to execute 'addTransceiver' on 'RTCPeerConnection': This operation is only supported in 'unified-plan'. 'unified-plan' will become the default behavior in the future, but it is currently experimental. To try it out, construct the RTCPeerConnection with sdpSemantics:'unified-plan' present in the RTCConfiguration argument.\"",
          "name": "sender.setParameters() with mismatch number of encodings should reject with InvalidModificationError"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "promise_test: Unhandled rejection with value: object \"InvalidStateError: Failed to execute 'addTransceiver' on 'RTCPeerConnection': This operation is only supported in 'unified-plan'. 'unified-plan' will become the default behavior in the future, but it is currently experimental. To try it out, construct the RTCPeerConnection with sdpSemantics:'unified-plan' present in the RTCConfiguration argument.\"",
          "name": "sender.setParameters() with encodings unset should reject with TypeError"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "promise_test: Unhandled rejection with value: object \"InvalidStateError: Failed to execute 'addTransceiver' on 'RTCPeerConnection': This operation is only supported in 'unified-plan'. 'unified-plan' will become the default behavior in the future, but it is currently experimental. To try it out, construct the RTCPeerConnection with sdpSemantics:'unified-plan' present in the RTCConfiguration argument.\"",
          "name": "setParameters() with modified encoding.rid field should reject with InvalidModificationError"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "promise_test: Unhandled rejection with value: object \"InvalidStateError: Failed to execute 'addTransceiver' on 'RTCPeerConnection': This operation is only supported in 'unified-plan'. 'unified-plan' will become the default behavior in the future, but it is currently experimental. To try it out, construct the RTCPeerConnection with sdpSemantics:'unified-plan' present in the RTCConfiguration argument.\"",
          "name": "setParameters() with encoding.scaleResolutionDownBy field set to less than 1.0 should reject with RangeError"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "promise_test: Unhandled rejection with value: object \"InvalidStateError: Failed to execute 'addTransceiver' on 'RTCPeerConnection': This operation is only supported in 'unified-plan'. 'unified-plan' will become the default behavior in the future, but it is currently experimental. To try it out, construct the RTCPeerConnection with sdpSemantics:'unified-plan' present in the RTCConfiguration argument.\"",
          "name": "setParameters() with encoding.scaleResolutionDownBy field set to greater than 1.0 should succeed"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "promise_test: Unhandled rejection with value: object \"InvalidStateError: Failed to execute 'addTransceiver' on 'RTCPeerConnection': This operation is only supported in 'unified-plan'. 'unified-plan' will become the default behavior in the future, but it is currently experimental. To try it out, construct the RTCPeerConnection with sdpSemantics:'unified-plan' present in the RTCConfiguration argument.\"",
          "name": "setParameters() with modified encoding.dtx should succeed with RTCRtpTransceiverInit"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "promise_test: Unhandled rejection with value: object \"InvalidStateError: Failed to execute 'addTransceiver' on 'RTCPeerConnection': This operation is only supported in 'unified-plan'. 'unified-plan' will become the default behavior in the future, but it is currently experimental. To try it out, construct the RTCPeerConnection with sdpSemantics:'unified-plan' present in the RTCConfiguration argument.\"",
          "name": "setParameters() with modified encoding.dtx should succeed without RTCRtpTransceiverInit"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "promise_test: Unhandled rejection with value: object \"InvalidStateError: Failed to execute 'addTransceiver' on 'RTCPeerConnection': This operation is only supported in 'unified-plan'. 'unified-plan' will become the default behavior in the future, but it is currently experimental. To try it out, construct the RTCPeerConnection with sdpSemantics:'unified-plan' present in the RTCConfiguration argument.\"",
          "name": "setParameters() with unset encoding.dtx should succeed with RTCRtpTransceiverInit"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "promise_test: Unhandled rejection with value: object \"InvalidStateError: Failed to execute 'addTransceiver' on 'RTCPeerConnection': This operation is only supported in 'unified-plan'. 'unified-plan' will become the default behavior in the future, but it is currently experimental. To try it out, construct the RTCPeerConnection with sdpSemantics:'unified-plan' present in the RTCConfiguration argument.\"",
          "name": "setParameters() with unset encoding.dtx should succeed without RTCRtpTransceiverInit"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "promise_test: Unhandled rejection with value: object \"InvalidStateError: Failed to execute 'addTransceiver' on 'RTCPeerConnection': This operation is only supported in 'unified-plan'. 'unified-plan' will become the default behavior in the future, but it is currently experimental. To try it out, construct the RTCPeerConnection with sdpSemantics:'unified-plan' present in the RTCConfiguration argument.\"",
          "name": "setParameters() with modified encoding.active should succeed with RTCRtpTransceiverInit"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "promise_test: Unhandled rejection with value: object \"InvalidStateError: Failed to execute 'addTransceiver' on 'RTCPeerConnection': This operation is only supported in 'unified-plan'. 'unified-plan' will become the default behavior in the future, but it is currently experimental. To try it out, construct the RTCPeerConnection with sdpSemantics:'unified-plan' present in the RTCConfiguration argument.\"",
          "name": "setParameters() with modified encoding.active should succeed without RTCRtpTransceiverInit"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "promise_test: Unhandled rejection with value: object \"InvalidStateError: Failed to execute 'addTransceiver' on 'RTCPeerConnection': This operation is only supported in 'unified-plan'. 'unified-plan' will become the default behavior in the future, but it is currently experimental. To try it out, construct the RTCPeerConnection with sdpSemantics:'unified-plan' present in the RTCConfiguration argument.\"",
          "name": "setParameters() with modified encoding.priority should succeed with RTCRtpTransceiverInit"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "promise_test: Unhandled rejection with value: object \"InvalidStateError: Failed to execute 'addTransceiver' on 'RTCPeerConnection': This operation is only supported in 'unified-plan'. 'unified-plan' will become the default behavior in the future, but it is currently experimental. To try it out, construct the RTCPeerConnection with sdpSemantics:'unified-plan' present in the RTCConfiguration argument.\"",
          "name": "setParameters() with modified encoding.priority should succeed without RTCRtpTransceiverInit"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "promise_test: Unhandled rejection with value: object \"InvalidStateError: Failed to execute 'addTransceiver' on 'RTCPeerConnection': This operation is only supported in 'unified-plan'. 'unified-plan' will become the default behavior in the future, but it is currently experimental. To try it out, construct the RTCPeerConnection with sdpSemantics:'unified-plan' present in the RTCConfiguration argument.\"",
          "name": "setParameters() with modified encoding.networkPriority should succeed with RTCRtpTransceiverInit"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "promise_test: Unhandled rejection with value: object \"InvalidStateError: Failed to execute 'addTransceiver' on 'RTCPeerConnection': This operation is only supported in 'unified-plan'. 'unified-plan' will become the default behavior in the future, but it is currently experimental. To try it out, construct the RTCPeerConnection with sdpSemantics:'unified-plan' present in the RTCConfiguration argument.\"",
          "name": "setParameters() with modified encoding.networkPriority should succeed without RTCRtpTransceiverInit"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "promise_test: Unhandled rejection with value: object \"InvalidStateError: Failed to execute 'addTransceiver' on 'RTCPeerConnection': This operation is only supported in 'unified-plan'. 'unified-plan' will become the default behavior in the future, but it is currently experimental. To try it out, construct the RTCPeerConnection with sdpSemantics:'unified-plan' present in the RTCConfiguration argument.\"",
          "name": "setParameters() with modified encoding.ptime should succeed with RTCRtpTransceiverInit"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "promise_test: Unhandled rejection with value: object \"InvalidStateError: Failed to execute 'addTransceiver' on 'RTCPeerConnection': This operation is only supported in 'unified-plan'. 'unified-plan' will become the default behavior in the future, but it is currently experimental. To try it out, construct the RTCPeerConnection with sdpSemantics:'unified-plan' present in the RTCConfiguration argument.\"",
          "name": "setParameters() with modified encoding.ptime should succeed without RTCRtpTransceiverInit"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "promise_test: Unhandled rejection with value: object \"InvalidStateError: Failed to execute 'addTransceiver' on 'RTCPeerConnection': This operation is only supported in 'unified-plan'. 'unified-plan' will become the default behavior in the future, but it is currently experimental. To try it out, construct the RTCPeerConnection with sdpSemantics:'unified-plan' present in the RTCConfiguration argument.\"",
          "name": "setParameters() with modified encoding.maxBitrate should succeed with RTCRtpTransceiverInit"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "promise_test: Unhandled rejection with value: object \"InvalidStateError: Failed to execute 'addTransceiver' on 'RTCPeerConnection': This operation is only supported in 'unified-plan'. 'unified-plan' will become the default behavior in the future, but it is currently experimental. To try it out, construct the RTCPeerConnection with sdpSemantics:'unified-plan' present in the RTCConfiguration argument.\"",
          "name": "setParameters() with modified encoding.maxBitrate should succeed without RTCRtpTransceiverInit"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "promise_test: Unhandled rejection with value: object \"InvalidStateError: Failed to execute 'addTransceiver' on 'RTCPeerConnection': This operation is only supported in 'unified-plan'. 'unified-plan' will become the default behavior in the future, but it is currently experimental. To try it out, construct the RTCPeerConnection with sdpSemantics:'unified-plan' present in the RTCConfiguration argument.\"",
          "name": "setParameters() with modified encoding.maxFramerate should succeed with RTCRtpTransceiverInit"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "promise_test: Unhandled rejection with value: object \"InvalidStateError: Failed to execute 'addTransceiver' on 'RTCPeerConnection': This operation is only supported in 'unified-plan'. 'unified-plan' will become the default behavior in the future, but it is currently experimental. To try it out, construct the RTCPeerConnection with sdpSemantics:'unified-plan' present in the RTCConfiguration argument.\"",
          "name": "setParameters() with modified encoding.maxFramerate should succeed without RTCRtpTransceiverInit"
        }
      ]
    },
    {
      "test": "/webrtc/RTCDataChannel-send.html",
      "status": "OK",
      "message": null,
      "duration": 371,
      "subtests": [
        {
          "status": "PASS",
          "message": null,
          "name": "Calling send() when data channel is in connecting state should throw InvalidStateError"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "Data channel should be able to send simple string and receive as string"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "Data channel should be able to send unicode string and receive as unicode string"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "Data channel should ignore binaryType and always receive string message as string"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "Data channel should be able to send Uint8Array message and receive as ArrayBuffer"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "Data channel should be able to send ArrayBuffer message and receive as ArrayBuffer"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "promise_test: Unhandled rejection with value: object \"NotSupportedError: Failed to execute 'send' on 'RTCDataChannel': Blob support not implemented yet\"",
          "name": "Data channel should be able to send Blob message and receive as ArrayBuffer"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "promise_test: Unhandled rejection with value: object \"NotSupportedError: Failed to set the 'binaryType' property on 'RTCDataChannel': Blob support not implemented yet\"",
          "name": "Data channel should be able to send ArrayBuffer message and receive as Blob"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_equals: Expect initial binaryType value to be blob expected \"blob\" but got \"arraybuffer\"",
          "name": "Data channel binaryType should receive message as Blob by default"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_unreached: Unexpected promise rejection: NotSupportedError: Failed to execute 'send' on 'RTCDataChannel': Blob support not implemented yet Reached unreachable code",
          "name": "Sending multiple messages with different types should succeed and be received"
        }
      ]
    },
    {
      "test": "/webrtc/RTCPeerConnection-constructor.html",
      "status": "OK",
      "message": null,
      "duration": 1322,
      "subtests": [
        {
          "status": "PASS",
          "message": null,
          "name": "RTCPeerConnection.length"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "new RTCPeerConnection()"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "new RTCPeerConnection(null)"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "new RTCPeerConnection(undefined)"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "new RTCPeerConnection({})"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "new RTCPeerConnection({ certificates: null })"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "new RTCPeerConnection({ certificates: undefined })"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "new RTCPeerConnection({ certificates: [] })"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "new RTCPeerConnection({ certificates: [null] })"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "new RTCPeerConnection({ certificates: [undefined] })"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "new RTCPeerConnection({ iceCandidatePoolSize: toNumberThrows })"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "localDescription initial value"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "currentLocalDescription initial value"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "pendingLocalDescription initial value"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "remoteDescription initial value"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "currentRemoteDescription initial value"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "pendingRemoteDescription initial value"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "signalingState initial value"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "iceGatheringState initial value"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "iceConnectionState initial value"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_equals: expected (string) \"new\" but got (undefined) undefined",
          "name": "connectionState initial value"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_equals: expected (object) null but got (undefined) undefined",
          "name": "canTrickleIceCandidates initial value"
        }
      ]
    },
    {
      "test": "/webrtc/RTCDtlsTransport-state.html",
      "status": "OK",
      "message": null,
      "duration": 1269,
      "subtests": [
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "promise_test: Unhandled rejection with value: object \"TypeError: Cannot read property 'sender' of undefined\"",
          "name": "DTLS transport goes to connected state"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "promise_test: Unhandled rejection with value: object \"TypeError: Cannot read property 'sender' of undefined\"",
          "name": "close() causes the local transport to close immediately"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "promise_test: Unhandled rejection with value: object \"TypeError: Cannot read property 'sender' of undefined\"",
          "name": "close() causes the other end's DTLS transport to close"
        }
      ]
    },
    {
      "test": "/webrtc/legacy/RTCPeerConnection-createOffer-offerToReceive.html",
      "status": "OK",
      "message": null,
      "duration": 477,
      "subtests": [
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_equals: Expect audio line to remain in created offer expected 1 but got 0",
          "name": "createOffer() with offerToReceiveAudio should add audio line to all subsequent created offers"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_equals: Expect video line to remain in created offer expected 1 but got 0",
          "name": "createOffer() with offerToReceiveVideo should add video line to all subsequent created offers"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_equals: Expect audio line to remain in created offer expected 1 but got 0",
          "name": "createOffer() with offerToReceiveAudio:true, then with offerToReceiveVideo:true, should have result offer with both audio and video line"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "createOffer() with offerToReceiveAudio set to false should not create a transceiver"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_equals: Expect pc to have one transceiver expected 1 but got 0",
          "name": "createOffer() with offerToReceiveAudio should create a \"recvonly\" transceiver"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_equals: Expect pc to have one transceiver expected 1 but got 0",
          "name": "offerToReceiveAudio option should be ignored if a non-stopped \"recvonly\" transceiver exists"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_equals: Expect pc to have one transceiver expected 1 but got 0",
          "name": "offerToReceiveAudio option should be ignored if a non-stopped \"sendrecv\" transceiver exists"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_equals: Expect pc to have one transceiver expected 1 but got 0",
          "name": "offerToReceiveAudio set to false with a track should create a \"sendonly\" transceiver"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "Failed to execute 'addTransceiver' on 'RTCPeerConnection': This operation is only supported in 'unified-plan'. 'unified-plan' will become the default behavior in the future, but it is currently experimental. To try it out, construct the RTCPeerConnection with sdpSemantics:'unified-plan' present in the RTCConfiguration argument.",
          "name": "offerToReceiveAudio set to false with a \"recvonly\" transceiver should change the direction to \"inactive\""
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_equals: Expect pc to have one transceiver expected 1 but got 0",
          "name": "subsequent offerToReceiveAudio set to false with a track should change the direction to \"sendonly\""
        },
        {
          "status": "PASS",
          "message": null,
          "name": "createOffer() with offerToReceiveVideo set to false should not create a transceiver"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_equals: Expect pc to have one transceiver expected 1 but got 0",
          "name": "createOffer() with offerToReceiveVideo should create a \"recvonly\" transceiver"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_equals: Expect pc to have one transceiver expected 1 but got 0",
          "name": "offerToReceiveVideo option should be ignored if a non-stopped \"recvonly\" transceiver exists"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_equals: Expect pc to have one transceiver expected 1 but got 0",
          "name": "offerToReceiveVideo option should be ignored if a non-stopped \"sendrecv\" transceiver exists"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_equals: Expect pc to have one transceiver expected 1 but got 0",
          "name": "offerToReceiveVideo set to false with a track should create a \"sendonly\" transceiver"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "Failed to execute 'addTransceiver' on 'RTCPeerConnection': This operation is only supported in 'unified-plan'. 'unified-plan' will become the default behavior in the future, but it is currently experimental. To try it out, construct the RTCPeerConnection with sdpSemantics:'unified-plan' present in the RTCConfiguration argument.",
          "name": "offerToReceiveVideo set to false with a \"recvonly\" transceiver should change the direction to \"inactive\""
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_equals: Expect pc to have one transceiver expected 1 but got 0",
          "name": "subsequent offerToReceiveVideo set to false with a track should change the direction to \"sendonly\""
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_equals: Expect pc to have two transceivers expected 2 but got 0",
          "name": "offerToReceiveAudio and Video should create two \"recvonly\" transceivers"
        }
      ]
    },
    {
      "test": "/webrtc/no-media-call.html",
      "status": "OK",
      "message": null,
      "duration": 1820,
      "subtests": [
        {
          "status": "PASS",
          "message": null,
          "name": "Can set up a basic WebRTC call with no data."
        }
      ]
    },
    {
      "test": "/webrtc/RTCPeerConnection-setRemoteDescription-offer.html",
      "status": "OK",
      "message": null,
      "duration": 216,
      "subtests": [
        {
          "status": "PASS",
          "message": null,
          "name": "setRemoteDescription with valid offer should succeed"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "setRemoteDescription multiple times should succeed"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "setRemoteDescription multiple times with different offer should succeed"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_equals: Expect error detail field to set to sdp-syntax-error expected (string) \"sdp-syntax-error\" but got (undefined) undefined",
          "name": "setRemoteDescription(offer) with invalid SDP should reject with RTCError"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "setRemoteDescription(offer) from have-local-offer state should reject with InvalidStateError"
        }
      ]
    },
    {
      "test": "/webrtc/RTCDtlsTransport-getRemoteCertificates.html",
      "status": "OK",
      "message": null,
      "duration": 115,
      "subtests": [
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "RTCSctpTransport is not defined",
          "name": "RTCDtlsTransport.prototype.getRemoteCertificates"
        }
      ]
    },
    {
      "test": "/webrtc/RTCPeerConnection-setRemoteDescription.html",
      "status": "OK",
      "message": null,
      "duration": 218,
      "subtests": [
        {
          "status": "PASS",
          "message": null,
          "name": "setRemoteDescription with invalid type and invalid SDP should reject with TypeError"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_throws: function \"() => { throw e }\" threw object \"OperationError: Failed to execute 'setRemoteDescription' on 'RTCPeerConnection': Failed to parse SessionDescription. invalid Expect line: v=\" that is not a DOMException InvalidStateError: property \"code\" is equal to 0, expected 11",
          "name": "setRemoteDescription() with invalid SDP and stable state should reject with InvalidStateError"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "Negotiation should fire signalingsstate events"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "Calling setRemoteDescription() again after one round of remote-offer/local-answer should succeed"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "Switching role from offerer to answerer after going back to stable state should succeed"
        }
      ]
    },
    {
      "test": "/webrtc/idlharness.https.window.html",
      "status": "OK",
      "message": null,
      "duration": 2533,
      "subtests": [
        {
          "status": "PASS",
          "message": null,
          "name": "idl_test setup"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "Test driver for asyncInitCertificate"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_unreached: Failed to run asyncInitTransports: ReferenceError: RTCSctpTransport is not defined Reached unreachable code",
          "name": "Test driver for asyncInitTransports"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "Test driver for asyncInitMediaStreamTrack"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "Partial interface RTCPeerConnection: original interface defined"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "Partial dictionary RTCOfferOptions: original dictionary defined"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "Partial interface RTCPeerConnection[2]: original interface defined"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "Partial interface RTCPeerConnection[3]: original interface defined"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "Partial interface RTCPeerConnection[4]: original interface defined"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "Partial interface RTCRtpSender: original interface defined"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "Partial interface RTCPeerConnection[5]: original interface defined"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "RTCPeerConnection interface: existence and properties of interface object"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "RTCPeerConnection interface object length"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "RTCPeerConnection interface object name"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "RTCPeerConnection interface: existence and properties of interface prototype object"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "RTCPeerConnection interface: existence and properties of interface prototype object's \"constructor\" property"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "RTCPeerConnection interface: existence and properties of interface prototype object's @@unscopables property"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "RTCPeerConnection interface: operation createOffer(RTCOfferOptions)"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "RTCPeerConnection interface: operation createAnswer(RTCAnswerOptions)"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "RTCPeerConnection interface: operation setLocalDescription(RTCSessionDescriptionInit)"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_equals: getter must have the name 'get localDescription' expected \"get localDescription\" but got \"\"",
          "name": "RTCPeerConnection interface: attribute localDescription"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_equals: getter must have the name 'get currentLocalDescription' expected \"get currentLocalDescription\" but got \"\"",
          "name": "RTCPeerConnection interface: attribute currentLocalDescription"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_equals: getter must have the name 'get pendingLocalDescription' expected \"get pendingLocalDescription\" but got \"\"",
          "name": "RTCPeerConnection interface: attribute pendingLocalDescription"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "RTCPeerConnection interface: operation setRemoteDescription(RTCSessionDescriptionInit)"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_equals: getter must have the name 'get remoteDescription' expected \"get remoteDescription\" but got \"\"",
          "name": "RTCPeerConnection interface: attribute remoteDescription"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_equals: getter must have the name 'get currentRemoteDescription' expected \"get currentRemoteDescription\" but got \"\"",
          "name": "RTCPeerConnection interface: attribute currentRemoteDescription"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_equals: getter must have the name 'get pendingRemoteDescription' expected \"get pendingRemoteDescription\" but got \"\"",
          "name": "RTCPeerConnection interface: attribute pendingRemoteDescription"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "RTCPeerConnection interface: operation addIceCandidate(RTCIceCandidateInit)"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_equals: getter must have the name 'get signalingState' expected \"get signalingState\" but got \"\"",
          "name": "RTCPeerConnection interface: attribute signalingState"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_equals: getter must have the name 'get iceGatheringState' expected \"get iceGatheringState\" but got \"\"",
          "name": "RTCPeerConnection interface: attribute iceGatheringState"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_equals: getter must have the name 'get iceConnectionState' expected \"get iceConnectionState\" but got \"\"",
          "name": "RTCPeerConnection interface: attribute iceConnectionState"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_true: The prototype object must have a property \"connectionState\" expected true got false",
          "name": "RTCPeerConnection interface: attribute connectionState"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_true: The prototype object must have a property \"canTrickleIceCandidates\" expected true got false",
          "name": "RTCPeerConnection interface: attribute canTrickleIceCandidates"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_own_property: interface object missing static operation expected property \"getDefaultIceServers\" missing",
          "name": "RTCPeerConnection interface: operation getDefaultIceServers()"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "RTCPeerConnection interface: operation getConfiguration()"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "RTCPeerConnection interface: operation setConfiguration(RTCConfiguration)"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "RTCPeerConnection interface: operation close()"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_equals: getter must have the name 'get onnegotiationneeded' expected \"get onnegotiationneeded\" but got \"\"",
          "name": "RTCPeerConnection interface: attribute onnegotiationneeded"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_equals: getter must have the name 'get onicecandidate' expected \"get onicecandidate\" but got \"\"",
          "name": "RTCPeerConnection interface: attribute onicecandidate"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_true: The prototype object must have a property \"onicecandidateerror\" expected true got false",
          "name": "RTCPeerConnection interface: attribute onicecandidateerror"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_equals: getter must have the name 'get onsignalingstatechange' expected \"get onsignalingstatechange\" but got \"\"",
          "name": "RTCPeerConnection interface: attribute onsignalingstatechange"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_equals: getter must have the name 'get oniceconnectionstatechange' expected \"get oniceconnectionstatechange\" but got \"\"",
          "name": "RTCPeerConnection interface: attribute oniceconnectionstatechange"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_equals: getter must have the name 'get onicegatheringstatechange' expected \"get onicegatheringstatechange\" but got \"\"",
          "name": "RTCPeerConnection interface: attribute onicegatheringstatechange"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_true: The prototype object must have a property \"onconnectionstatechange\" expected true got false",
          "name": "RTCPeerConnection interface: attribute onconnectionstatechange"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "RTCPeerConnection interface: operation createOffer(RTCSessionDescriptionCallback, RTCPeerConnectionErrorCallback, RTCOfferOptions)"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "RTCPeerConnection interface: operation setLocalDescription(RTCSessionDescriptionInit, VoidFunction, RTCPeerConnectionErrorCallback)"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "RTCPeerConnection interface: operation createAnswer(RTCSessionDescriptionCallback, RTCPeerConnectionErrorCallback)"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "RTCPeerConnection interface: operation setRemoteDescription(RTCSessionDescriptionInit, VoidFunction, RTCPeerConnectionErrorCallback)"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "RTCPeerConnection interface: operation addIceCandidate(RTCIceCandidateInit, VoidFunction, RTCPeerConnectionErrorCallback)"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "RTCPeerConnection interface: operation generateCertificate(AlgorithmIdentifier)"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "RTCPeerConnection interface: operation getSenders()"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "RTCPeerConnection interface: operation getReceivers()"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "RTCPeerConnection interface: operation getTransceivers()"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "RTCPeerConnection interface: operation addTrack(MediaStreamTrack, MediaStream)"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "RTCPeerConnection interface: operation removeTrack(RTCRtpSender)"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "RTCPeerConnection interface: operation addTransceiver([object Object],[object Object], RTCRtpTransceiverInit)"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_equals: getter must have the name 'get ontrack' expected \"get ontrack\" but got \"\"",
          "name": "RTCPeerConnection interface: attribute ontrack"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_true: The prototype object must have a property \"sctp\" expected true got false",
          "name": "RTCPeerConnection interface: attribute sctp"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "RTCPeerConnection interface: operation createDataChannel(USVString, RTCDataChannelInit)"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_equals: getter must have the name 'get ondatachannel' expected \"get ondatachannel\" but got \"\"",
          "name": "RTCPeerConnection interface: attribute ondatachannel"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "RTCPeerConnection interface: operation getStats(MediaStreamTrack)"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_true: The prototype object must have a property \"onstatsended\" expected true got false",
          "name": "RTCPeerConnection interface: attribute onstatsended"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "RTCPeerConnection must be primary interface of new RTCPeerConnection()"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "Stringification of new RTCPeerConnection()"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "RTCPeerConnection interface: new RTCPeerConnection() must inherit property \"createOffer(RTCOfferOptions)\" with the proper type"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "RTCPeerConnection interface: calling createOffer(RTCOfferOptions) on new RTCPeerConnection() with too few arguments must throw TypeError"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "RTCPeerConnection interface: new RTCPeerConnection() must inherit property \"createAnswer(RTCAnswerOptions)\" with the proper type"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "RTCPeerConnection interface: calling createAnswer(RTCAnswerOptions) on new RTCPeerConnection() with too few arguments must throw TypeError"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "RTCPeerConnection interface: new RTCPeerConnection() must inherit property \"setLocalDescription(RTCSessionDescriptionInit)\" with the proper type"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "RTCPeerConnection interface: calling setLocalDescription(RTCSessionDescriptionInit) on new RTCPeerConnection() with too few arguments must throw TypeError"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "RTCPeerConnection interface: new RTCPeerConnection() must inherit property \"localDescription\" with the proper type"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "RTCPeerConnection interface: new RTCPeerConnection() must inherit property \"currentLocalDescription\" with the proper type"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "RTCPeerConnection interface: new RTCPeerConnection() must inherit property \"pendingLocalDescription\" with the proper type"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "RTCPeerConnection interface: new RTCPeerConnection() must inherit property \"setRemoteDescription(RTCSessionDescriptionInit)\" with the proper type"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "RTCPeerConnection interface: calling setRemoteDescription(RTCSessionDescriptionInit) on new RTCPeerConnection() with too few arguments must throw TypeError"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "RTCPeerConnection interface: new RTCPeerConnection() must inherit property \"remoteDescription\" with the proper type"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "RTCPeerConnection interface: new RTCPeerConnection() must inherit property \"currentRemoteDescription\" with the proper type"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "RTCPeerConnection interface: new RTCPeerConnection() must inherit property \"pendingRemoteDescription\" with the proper type"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "RTCPeerConnection interface: new RTCPeerConnection() must inherit property \"addIceCandidate(RTCIceCandidateInit)\" with the proper type"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "RTCPeerConnection interface: calling addIceCandidate(RTCIceCandidateInit) on new RTCPeerConnection() with too few arguments must throw TypeError"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "RTCPeerConnection interface: new RTCPeerConnection() must inherit property \"signalingState\" with the proper type"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "RTCPeerConnection interface: new RTCPeerConnection() must inherit property \"iceGatheringState\" with the proper type"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "RTCPeerConnection interface: new RTCPeerConnection() must inherit property \"iceConnectionState\" with the proper type"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_inherits: property \"connectionState\" not found in prototype chain",
          "name": "RTCPeerConnection interface: new RTCPeerConnection() must inherit property \"connectionState\" with the proper type"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_inherits: property \"canTrickleIceCandidates\" not found in prototype chain",
          "name": "RTCPeerConnection interface: new RTCPeerConnection() must inherit property \"canTrickleIceCandidates\" with the proper type"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "RTCPeerConnection interface: new RTCPeerConnection() must inherit property \"getDefaultIceServers()\" with the proper type"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "RTCPeerConnection interface: new RTCPeerConnection() must inherit property \"getConfiguration()\" with the proper type"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "RTCPeerConnection interface: new RTCPeerConnection() must inherit property \"setConfiguration(RTCConfiguration)\" with the proper type"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "RTCPeerConnection interface: calling setConfiguration(RTCConfiguration) on new RTCPeerConnection() with too few arguments must throw TypeError"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "RTCPeerConnection interface: new RTCPeerConnection() must inherit property \"close()\" with the proper type"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "Unrecognized type EventHandler",
          "name": "RTCPeerConnection interface: new RTCPeerConnection() must inherit property \"onnegotiationneeded\" with the proper type"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "Unrecognized type EventHandler",
          "name": "RTCPeerConnection interface: new RTCPeerConnection() must inherit property \"onicecandidate\" with the proper type"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_inherits: property \"onicecandidateerror\" not found in prototype chain",
          "name": "RTCPeerConnection interface: new RTCPeerConnection() must inherit property \"onicecandidateerror\" with the proper type"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "Unrecognized type EventHandler",
          "name": "RTCPeerConnection interface: new RTCPeerConnection() must inherit property \"onsignalingstatechange\" with the proper type"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "Unrecognized type EventHandler",
          "name": "RTCPeerConnection interface: new RTCPeerConnection() must inherit property \"oniceconnectionstatechange\" with the proper type"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "Unrecognized type EventHandler",
          "name": "RTCPeerConnection interface: new RTCPeerConnection() must inherit property \"onicegatheringstatechange\" with the proper type"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_inherits: property \"onconnectionstatechange\" not found in prototype chain",
          "name": "RTCPeerConnection interface: new RTCPeerConnection() must inherit property \"onconnectionstatechange\" with the proper type"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "RTCPeerConnection interface: new RTCPeerConnection() must inherit property \"createOffer(RTCSessionDescriptionCallback, RTCPeerConnectionErrorCallback, RTCOfferOptions)\" with the proper type"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "RTCPeerConnection interface: calling createOffer(RTCSessionDescriptionCallback, RTCPeerConnectionErrorCallback, RTCOfferOptions) on new RTCPeerConnection() with too few arguments must throw TypeError"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "RTCPeerConnection interface: new RTCPeerConnection() must inherit property \"setLocalDescription(RTCSessionDescriptionInit, VoidFunction, RTCPeerConnectionErrorCallback)\" with the proper type"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "RTCPeerConnection interface: calling setLocalDescription(RTCSessionDescriptionInit, VoidFunction, RTCPeerConnectionErrorCallback) on new RTCPeerConnection() with too few arguments must throw TypeError"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "RTCPeerConnection interface: new RTCPeerConnection() must inherit property \"createAnswer(RTCSessionDescriptionCallback, RTCPeerConnectionErrorCallback)\" with the proper type"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "RTCPeerConnection interface: calling createAnswer(RTCSessionDescriptionCallback, RTCPeerConnectionErrorCallback) on new RTCPeerConnection() with too few arguments must throw TypeError"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "RTCPeerConnection interface: new RTCPeerConnection() must inherit property \"setRemoteDescription(RTCSessionDescriptionInit, VoidFunction, RTCPeerConnectionErrorCallback)\" with the proper type"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "RTCPeerConnection interface: calling setRemoteDescription(RTCSessionDescriptionInit, VoidFunction, RTCPeerConnectionErrorCallback) on new RTCPeerConnection() with too few arguments must throw TypeError"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "RTCPeerConnection interface: new RTCPeerConnection() must inherit property \"addIceCandidate(RTCIceCandidateInit, VoidFunction, RTCPeerConnectionErrorCallback)\" with the proper type"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "RTCPeerConnection interface: calling addIceCandidate(RTCIceCandidateInit, VoidFunction, RTCPeerConnectionErrorCallback) on new RTCPeerConnection() with too few arguments must throw TypeError"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "RTCPeerConnection interface: new RTCPeerConnection() must inherit property \"generateCertificate(AlgorithmIdentifier)\" with the proper type"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "RTCPeerConnection interface: calling generateCertificate(AlgorithmIdentifier) on new RTCPeerConnection() with too few arguments must throw TypeError"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "RTCPeerConnection interface: new RTCPeerConnection() must inherit property \"getSenders()\" with the proper type"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "RTCPeerConnection interface: new RTCPeerConnection() must inherit property \"getReceivers()\" with the proper type"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "RTCPeerConnection interface: new RTCPeerConnection() must inherit property \"getTransceivers()\" with the proper type"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "RTCPeerConnection interface: new RTCPeerConnection() must inherit property \"addTrack(MediaStreamTrack, MediaStream)\" with the proper type"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "RTCPeerConnection interface: calling addTrack(MediaStreamTrack, MediaStream) on new RTCPeerConnection() with too few arguments must throw TypeError"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "RTCPeerConnection interface: new RTCPeerConnection() must inherit property \"removeTrack(RTCRtpSender)\" with the proper type"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "RTCPeerConnection interface: calling removeTrack(RTCRtpSender) on new RTCPeerConnection() with too few arguments must throw TypeError"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "RTCPeerConnection interface: new RTCPeerConnection() must inherit property \"addTransceiver([object Object],[object Object], RTCRtpTransceiverInit)\" with the proper type"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "RTCPeerConnection interface: calling addTransceiver([object Object],[object Object], RTCRtpTransceiverInit) on new RTCPeerConnection() with too few arguments must throw TypeError"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "Unrecognized type EventHandler",
          "name": "RTCPeerConnection interface: new RTCPeerConnection() must inherit property \"ontrack\" with the proper type"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_inherits: property \"sctp\" not found in prototype chain",
          "name": "RTCPeerConnection interface: new RTCPeerConnection() must inherit property \"sctp\" with the proper type"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "RTCPeerConnection interface: new RTCPeerConnection() must inherit property \"createDataChannel(USVString, RTCDataChannelInit)\" with the proper type"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "RTCPeerConnection interface: calling createDataChannel(USVString, RTCDataChannelInit) on new RTCPeerConnection() with too few arguments must throw TypeError"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "Unrecognized type EventHandler",
          "name": "RTCPeerConnection interface: new RTCPeerConnection() must inherit property \"ondatachannel\" with the proper type"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "RTCPeerConnection interface: new RTCPeerConnection() must inherit property \"getStats(MediaStreamTrack)\" with the proper type"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "RTCPeerConnection interface: calling getStats(MediaStreamTrack) on new RTCPeerConnection() with too few arguments must throw TypeError"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_inherits: property \"onstatsended\" not found in prototype chain",
          "name": "RTCPeerConnection interface: new RTCPeerConnection() must inherit property \"onstatsended\" with the proper type"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "RTCSessionDescription interface: existence and properties of interface object"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_equals: wrong value for RTCSessionDescription.length expected 1 but got 0",
          "name": "RTCSessionDescription interface object length"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "RTCSessionDescription interface object name"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "RTCSessionDescription interface: existence and properties of interface prototype object"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "RTCSessionDescription interface: existence and properties of interface prototype object's \"constructor\" property"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "RTCSessionDescription interface: existence and properties of interface prototype object's @@unscopables property"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_equals: getter must have the name 'get type' expected \"get type\" but got \"\"",
          "name": "RTCSessionDescription interface: attribute type"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_equals: getter must have the name 'get sdp' expected \"get sdp\" but got \"\"",
          "name": "RTCSessionDescription interface: attribute sdp"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "RTCSessionDescription interface: operation toJSON()"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "RTCSessionDescription must be primary interface of new RTCSessionDescription({ type: 'offer' })"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "Stringification of new RTCSessionDescription({ type: 'offer' })"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "RTCSessionDescription interface: new RTCSessionDescription({ type: 'offer' }) must inherit property \"type\" with the proper type"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_equals: expected \"string\" but got \"object\"",
          "name": "RTCSessionDescription interface: new RTCSessionDescription({ type: 'offer' }) must inherit property \"sdp\" with the proper type"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "RTCSessionDescription interface: new RTCSessionDescription({ type: 'offer' }) must inherit property \"toJSON()\" with the proper type"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_equals: expected \"string\" but got \"object\"",
          "name": "Test default toJSON operation of RTCSessionDescription"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "RTCIceCandidate interface: existence and properties of interface object"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_equals: wrong value for RTCIceCandidate.length expected 0 but got 1",
          "name": "RTCIceCandidate interface object length"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "RTCIceCandidate interface object name"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "RTCIceCandidate interface: existence and properties of interface prototype object"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "RTCIceCandidate interface: existence and properties of interface prototype object's \"constructor\" property"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "RTCIceCandidate interface: existence and properties of interface prototype object's @@unscopables property"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_equals: getter must have the name 'get candidate' expected \"get candidate\" but got \"\"",
          "name": "RTCIceCandidate interface: attribute candidate"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_equals: getter must have the name 'get sdpMid' expected \"get sdpMid\" but got \"\"",
          "name": "RTCIceCandidate interface: attribute sdpMid"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_equals: getter must have the name 'get sdpMLineIndex' expected \"get sdpMLineIndex\" but got \"\"",
          "name": "RTCIceCandidate interface: attribute sdpMLineIndex"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_true: The prototype object must have a property \"foundation\" expected true got false",
          "name": "RTCIceCandidate interface: attribute foundation"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_true: The prototype object must have a property \"component\" expected true got false",
          "name": "RTCIceCandidate interface: attribute component"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_true: The prototype object must have a property \"priority\" expected true got false",
          "name": "RTCIceCandidate interface: attribute priority"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_true: The prototype object must have a property \"address\" expected true got false",
          "name": "RTCIceCandidate interface: attribute address"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_true: The prototype object must have a property \"protocol\" expected true got false",
          "name": "RTCIceCandidate interface: attribute protocol"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_true: The prototype object must have a property \"port\" expected true got false",
          "name": "RTCIceCandidate interface: attribute port"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_true: The prototype object must have a property \"type\" expected true got false",
          "name": "RTCIceCandidate interface: attribute type"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_true: The prototype object must have a property \"tcpType\" expected true got false",
          "name": "RTCIceCandidate interface: attribute tcpType"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_true: The prototype object must have a property \"relatedAddress\" expected true got false",
          "name": "RTCIceCandidate interface: attribute relatedAddress"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_true: The prototype object must have a property \"relatedPort\" expected true got false",
          "name": "RTCIceCandidate interface: attribute relatedPort"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_true: The prototype object must have a property \"usernameFragment\" expected true got false",
          "name": "RTCIceCandidate interface: attribute usernameFragment"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "RTCIceCandidate interface: operation toJSON()"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_equals: Unexpected exception when evaluating object expected null but got object \"TypeMismatchError: Failed to construct 'RTCIceCandidate': The 'candidate' property is not a string, or is empty.\"",
          "name": "RTCIceCandidate must be primary interface of new RTCIceCandidate({ sdpMid: 1 })"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_equals: Unexpected exception when evaluating object expected null but got object \"TypeMismatchError: Failed to construct 'RTCIceCandidate': The 'candidate' property is not a string, or is empty.\"",
          "name": "Stringification of new RTCIceCandidate({ sdpMid: 1 })"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_equals: Unexpected exception when evaluating object expected null but got object \"TypeMismatchError: Failed to construct 'RTCIceCandidate': The 'candidate' property is not a string, or is empty.\"",
          "name": "RTCIceCandidate interface: new RTCIceCandidate({ sdpMid: 1 }) must inherit property \"candidate\" with the proper type"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_equals: Unexpected exception when evaluating object expected null but got object \"TypeMismatchError: Failed to construct 'RTCIceCandidate': The 'candidate' property is not a string, or is empty.\"",
          "name": "RTCIceCandidate interface: new RTCIceCandidate({ sdpMid: 1 }) must inherit property \"sdpMid\" with the proper type"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_equals: Unexpected exception when evaluating object expected null but got object \"TypeMismatchError: Failed to construct 'RTCIceCandidate': The 'candidate' property is not a string, or is empty.\"",
          "name": "RTCIceCandidate interface: new RTCIceCandidate({ sdpMid: 1 }) must inherit property \"sdpMLineIndex\" with the proper type"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_equals: Unexpected exception when evaluating object expected null but got object \"TypeMismatchError: Failed to construct 'RTCIceCandidate': The 'candidate' property is not a string, or is empty.\"",
          "name": "RTCIceCandidate interface: new RTCIceCandidate({ sdpMid: 1 }) must inherit property \"foundation\" with the proper type"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_equals: Unexpected exception when evaluating object expected null but got object \"TypeMismatchError: Failed to construct 'RTCIceCandidate': The 'candidate' property is not a string, or is empty.\"",
          "name": "RTCIceCandidate interface: new RTCIceCandidate({ sdpMid: 1 }) must inherit property \"component\" with the proper type"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_equals: Unexpected exception when evaluating object expected null but got object \"TypeMismatchError: Failed to construct 'RTCIceCandidate': The 'candidate' property is not a string, or is empty.\"",
          "name": "RTCIceCandidate interface: new RTCIceCandidate({ sdpMid: 1 }) must inherit property \"priority\" with the proper type"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_equals: Unexpected exception when evaluating object expected null but got object \"TypeMismatchError: Failed to construct 'RTCIceCandidate': The 'candidate' property is not a string, or is empty.\"",
          "name": "RTCIceCandidate interface: new RTCIceCandidate({ sdpMid: 1 }) must inherit property \"address\" with the proper type"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_equals: Unexpected exception when evaluating object expected null but got object \"TypeMismatchError: Failed to construct 'RTCIceCandidate': The 'candidate' property is not a string, or is empty.\"",
          "name": "RTCIceCandidate interface: new RTCIceCandidate({ sdpMid: 1 }) must inherit property \"protocol\" with the proper type"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_equals: Unexpected exception when evaluating object expected null but got object \"TypeMismatchError: Failed to construct 'RTCIceCandidate': The 'candidate' property is not a string, or is empty.\"",
          "name": "RTCIceCandidate interface: new RTCIceCandidate({ sdpMid: 1 }) must inherit property \"port\" with the proper type"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_equals: Unexpected exception when evaluating object expected null but got object \"TypeMismatchError: Failed to construct 'RTCIceCandidate': The 'candidate' property is not a string, or is empty.\"",
          "name": "RTCIceCandidate interface: new RTCIceCandidate({ sdpMid: 1 }) must inherit property \"type\" with the proper type"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_equals: Unexpected exception when evaluating object expected null but got object \"TypeMismatchError: Failed to construct 'RTCIceCandidate': The 'candidate' property is not a string, or is empty.\"",
          "name": "RTCIceCandidate interface: new RTCIceCandidate({ sdpMid: 1 }) must inherit property \"tcpType\" with the proper type"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_equals: Unexpected exception when evaluating object expected null but got object \"TypeMismatchError: Failed to construct 'RTCIceCandidate': The 'candidate' property is not a string, or is empty.\"",
          "name": "RTCIceCandidate interface: new RTCIceCandidate({ sdpMid: 1 }) must inherit property \"relatedAddress\" with the proper type"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_equals: Unexpected exception when evaluating object expected null but got object \"TypeMismatchError: Failed to construct 'RTCIceCandidate': The 'candidate' property is not a string, or is empty.\"",
          "name": "RTCIceCandidate interface: new RTCIceCandidate({ sdpMid: 1 }) must inherit property \"relatedPort\" with the proper type"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_equals: Unexpected exception when evaluating object expected null but got object \"TypeMismatchError: Failed to construct 'RTCIceCandidate': The 'candidate' property is not a string, or is empty.\"",
          "name": "RTCIceCandidate interface: new RTCIceCandidate({ sdpMid: 1 }) must inherit property \"usernameFragment\" with the proper type"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_equals: Unexpected exception when evaluating object expected null but got object \"TypeMismatchError: Failed to construct 'RTCIceCandidate': The 'candidate' property is not a string, or is empty.\"",
          "name": "RTCIceCandidate interface: new RTCIceCandidate({ sdpMid: 1 }) must inherit property \"toJSON()\" with the proper type"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "Cannot read property 'toJSON' of undefined",
          "name": "Test toJSON operation of toJSON object"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "RTCPeerConnectionIceEvent interface: existence and properties of interface object"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "RTCPeerConnectionIceEvent interface object length"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "RTCPeerConnectionIceEvent interface object name"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "RTCPeerConnectionIceEvent interface: existence and properties of interface prototype object"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "RTCPeerConnectionIceEvent interface: existence and properties of interface prototype object's \"constructor\" property"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "RTCPeerConnectionIceEvent interface: existence and properties of interface prototype object's @@unscopables property"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_equals: getter must have the name 'get candidate' expected \"get candidate\" but got \"\"",
          "name": "RTCPeerConnectionIceEvent interface: attribute candidate"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_true: The prototype object must have a property \"url\" expected true got false",
          "name": "RTCPeerConnectionIceEvent interface: attribute url"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "RTCPeerConnectionIceEvent must be primary interface of new RTCPeerConnectionIceEvent('ice')"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "Stringification of new RTCPeerConnectionIceEvent('ice')"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "RTCPeerConnectionIceEvent interface: new RTCPeerConnectionIceEvent('ice') must inherit property \"candidate\" with the proper type"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_inherits: property \"url\" not found in prototype chain",
          "name": "RTCPeerConnectionIceEvent interface: new RTCPeerConnectionIceEvent('ice') must inherit property \"url\" with the proper type"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_own_property: self does not have own property \"RTCPeerConnectionIceErrorEvent\" expected property \"RTCPeerConnectionIceErrorEvent\" missing",
          "name": "RTCPeerConnectionIceErrorEvent interface: existence and properties of interface object"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_own_property: self does not have own property \"RTCPeerConnectionIceErrorEvent\" expected property \"RTCPeerConnectionIceErrorEvent\" missing",
          "name": "RTCPeerConnectionIceErrorEvent interface object length"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_own_property: self does not have own property \"RTCPeerConnectionIceErrorEvent\" expected property \"RTCPeerConnectionIceErrorEvent\" missing",
          "name": "RTCPeerConnectionIceErrorEvent interface object name"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_own_property: self does not have own property \"RTCPeerConnectionIceErrorEvent\" expected property \"RTCPeerConnectionIceErrorEvent\" missing",
          "name": "RTCPeerConnectionIceErrorEvent interface: existence and properties of interface prototype object"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_own_property: self does not have own property \"RTCPeerConnectionIceErrorEvent\" expected property \"RTCPeerConnectionIceErrorEvent\" missing",
          "name": "RTCPeerConnectionIceErrorEvent interface: existence and properties of interface prototype object's \"constructor\" property"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_own_property: self does not have own property \"RTCPeerConnectionIceErrorEvent\" expected property \"RTCPeerConnectionIceErrorEvent\" missing",
          "name": "RTCPeerConnectionIceErrorEvent interface: existence and properties of interface prototype object's @@unscopables property"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_own_property: self does not have own property \"RTCPeerConnectionIceErrorEvent\" expected property \"RTCPeerConnectionIceErrorEvent\" missing",
          "name": "RTCPeerConnectionIceErrorEvent interface: attribute hostCandidate"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_own_property: self does not have own property \"RTCPeerConnectionIceErrorEvent\" expected property \"RTCPeerConnectionIceErrorEvent\" missing",
          "name": "RTCPeerConnectionIceErrorEvent interface: attribute url"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_own_property: self does not have own property \"RTCPeerConnectionIceErrorEvent\" expected property \"RTCPeerConnectionIceErrorEvent\" missing",
          "name": "RTCPeerConnectionIceErrorEvent interface: attribute errorCode"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_own_property: self does not have own property \"RTCPeerConnectionIceErrorEvent\" expected property \"RTCPeerConnectionIceErrorEvent\" missing",
          "name": "RTCPeerConnectionIceErrorEvent interface: attribute errorText"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_equals: Unexpected exception when evaluating object expected null but got object \"ReferenceError: RTCPeerConnectionIceErrorEvent is not defined\"",
          "name": "RTCPeerConnectionIceErrorEvent must be primary interface of new RTCPeerConnectionIceErrorEvent('ice-error', { errorCode: 701 });"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_equals: Unexpected exception when evaluating object expected null but got object \"ReferenceError: RTCPeerConnectionIceErrorEvent is not defined\"",
          "name": "Stringification of new RTCPeerConnectionIceErrorEvent('ice-error', { errorCode: 701 });"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_equals: Unexpected exception when evaluating object expected null but got object \"ReferenceError: RTCPeerConnectionIceErrorEvent is not defined\"",
          "name": "RTCPeerConnectionIceErrorEvent interface: new RTCPeerConnectionIceErrorEvent('ice-error', { errorCode: 701 }); must inherit property \"hostCandidate\" with the proper type"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_equals: Unexpected exception when evaluating object expected null but got object \"ReferenceError: RTCPeerConnectionIceErrorEvent is not defined\"",
          "name": "RTCPeerConnectionIceErrorEvent interface: new RTCPeerConnectionIceErrorEvent('ice-error', { errorCode: 701 }); must inherit property \"url\" with the proper type"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_equals: Unexpected exception when evaluating object expected null but got object \"ReferenceError: RTCPeerConnectionIceErrorEvent is not defined\"",
          "name": "RTCPeerConnectionIceErrorEvent interface: new RTCPeerConnectionIceErrorEvent('ice-error', { errorCode: 701 }); must inherit property \"errorCode\" with the proper type"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_equals: Unexpected exception when evaluating object expected null but got object \"ReferenceError: RTCPeerConnectionIceErrorEvent is not defined\"",
          "name": "RTCPeerConnectionIceErrorEvent interface: new RTCPeerConnectionIceErrorEvent('ice-error', { errorCode: 701 }); must inherit property \"errorText\" with the proper type"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "RTCCertificate interface: existence and properties of interface object"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "RTCCertificate interface object length"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "RTCCertificate interface object name"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "RTCCertificate interface: existence and properties of interface prototype object"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "RTCCertificate interface: existence and properties of interface prototype object's \"constructor\" property"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "RTCCertificate interface: existence and properties of interface prototype object's @@unscopables property"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_equals: getter must have the name 'get expires' expected \"get expires\" but got \"\"",
          "name": "RTCCertificate interface: attribute expires"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_own_property: interface object missing static operation expected property \"getSupportedAlgorithms\" missing",
          "name": "RTCCertificate interface: operation getSupportedAlgorithms()"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "RTCCertificate interface: operation getFingerprints()"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "RTCCertificate must be primary interface of idlTestObjects.certificate"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "Stringification of idlTestObjects.certificate"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "RTCCertificate interface: idlTestObjects.certificate must inherit property \"expires\" with the proper type"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "RTCCertificate interface: idlTestObjects.certificate must inherit property \"getSupportedAlgorithms()\" with the proper type"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "RTCCertificate interface: idlTestObjects.certificate must inherit property \"getFingerprints()\" with the proper type"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "RTCRtpSender interface: existence and properties of interface object"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "RTCRtpSender interface object length"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "RTCRtpSender interface object name"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "RTCRtpSender interface: existence and properties of interface prototype object"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "RTCRtpSender interface: existence and properties of interface prototype object's \"constructor\" property"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "RTCRtpSender interface: existence and properties of interface prototype object's @@unscopables property"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_equals: getter must have the name 'get track' expected \"get track\" but got \"\"",
          "name": "RTCRtpSender interface: attribute track"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_true: The prototype object must have a property \"transport\" expected true got false",
          "name": "RTCRtpSender interface: attribute transport"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_true: The prototype object must have a property \"rtcpTransport\" expected true got false",
          "name": "RTCRtpSender interface: attribute rtcpTransport"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "RTCRtpSender interface: operation getCapabilities(DOMString)"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_equals: property has wrong .length expected 1 but got 0",
          "name": "RTCRtpSender interface: operation setParameters(RTCRtpSendParameters)"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "RTCRtpSender interface: operation getParameters()"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "RTCRtpSender interface: operation replaceTrack(MediaStreamTrack)"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_own_property: interface prototype object missing non-static operation expected property \"setStreams\" missing",
          "name": "RTCRtpSender interface: operation setStreams(MediaStream)"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "RTCRtpSender interface: operation getStats()"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_equals: getter must have the name 'get dtmf' expected \"get dtmf\" but got \"\"",
          "name": "RTCRtpSender interface: attribute dtmf"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_equals: Unexpected exception when evaluating object expected null but got object \"InvalidStateError: Failed to execute 'addTransceiver' on 'RTCPeerConnection': This operation is only supported in 'unified-plan'. 'unified-plan' will become the default behavior in the future, but it is currently experimental. To try it out, construct the RTCPeerConnection with sdpSemantics:'unified-plan' present in the RTCConfiguration argument.\"",
          "name": "RTCRtpSender must be primary interface of new RTCPeerConnection().addTransceiver('audio').sender"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_equals: Unexpected exception when evaluating object expected null but got object \"InvalidStateError: Failed to execute 'addTransceiver' on 'RTCPeerConnection': This operation is only supported in 'unified-plan'. 'unified-plan' will become the default behavior in the future, but it is currently experimental. To try it out, construct the RTCPeerConnection with sdpSemantics:'unified-plan' present in the RTCConfiguration argument.\"",
          "name": "Stringification of new RTCPeerConnection().addTransceiver('audio').sender"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_equals: Unexpected exception when evaluating object expected null but got object \"InvalidStateError: Failed to execute 'addTransceiver' on 'RTCPeerConnection': This operation is only supported in 'unified-plan'. 'unified-plan' will become the default behavior in the future, but it is currently experimental. To try it out, construct the RTCPeerConnection with sdpSemantics:'unified-plan' present in the RTCConfiguration argument.\"",
          "name": "RTCRtpSender interface: new RTCPeerConnection().addTransceiver('audio').sender must inherit property \"track\" with the proper type"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_equals: Unexpected exception when evaluating object expected null but got object \"InvalidStateError: Failed to execute 'addTransceiver' on 'RTCPeerConnection': This operation is only supported in 'unified-plan'. 'unified-plan' will become the default behavior in the future, but it is currently experimental. To try it out, construct the RTCPeerConnection with sdpSemantics:'unified-plan' present in the RTCConfiguration argument.\"",
          "name": "RTCRtpSender interface: new RTCPeerConnection().addTransceiver('audio').sender must inherit property \"transport\" with the proper type"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_equals: Unexpected exception when evaluating object expected null but got object \"InvalidStateError: Failed to execute 'addTransceiver' on 'RTCPeerConnection': This operation is only supported in 'unified-plan'. 'unified-plan' will become the default behavior in the future, but it is currently experimental. To try it out, construct the RTCPeerConnection with sdpSemantics:'unified-plan' present in the RTCConfiguration argument.\"",
          "name": "RTCRtpSender interface: new RTCPeerConnection().addTransceiver('audio').sender must inherit property \"rtcpTransport\" with the proper type"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_equals: Unexpected exception when evaluating object expected null but got object \"InvalidStateError: Failed to execute 'addTransceiver' on 'RTCPeerConnection': This operation is only supported in 'unified-plan'. 'unified-plan' will become the default behavior in the future, but it is currently experimental. To try it out, construct the RTCPeerConnection with sdpSemantics:'unified-plan' present in the RTCConfiguration argument.\"",
          "name": "RTCRtpSender interface: new RTCPeerConnection().addTransceiver('audio').sender must inherit property \"getCapabilities(DOMString)\" with the proper type"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_equals: Unexpected exception when evaluating object expected null but got object \"InvalidStateError: Failed to execute 'addTransceiver' on 'RTCPeerConnection': This operation is only supported in 'unified-plan'. 'unified-plan' will become the default behavior in the future, but it is currently experimental. To try it out, construct the RTCPeerConnection with sdpSemantics:'unified-plan' present in the RTCConfiguration argument.\"",
          "name": "RTCRtpSender interface: calling getCapabilities(DOMString) on new RTCPeerConnection().addTransceiver('audio').sender with too few arguments must throw TypeError"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_equals: Unexpected exception when evaluating object expected null but got object \"InvalidStateError: Failed to execute 'addTransceiver' on 'RTCPeerConnection': This operation is only supported in 'unified-plan'. 'unified-plan' will become the default behavior in the future, but it is currently experimental. To try it out, construct the RTCPeerConnection with sdpSemantics:'unified-plan' present in the RTCConfiguration argument.\"",
          "name": "RTCRtpSender interface: new RTCPeerConnection().addTransceiver('audio').sender must inherit property \"setParameters(RTCRtpSendParameters)\" with the proper type"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_equals: Unexpected exception when evaluating object expected null but got object \"InvalidStateError: Failed to execute 'addTransceiver' on 'RTCPeerConnection': This operation is only supported in 'unified-plan'. 'unified-plan' will become the default behavior in the future, but it is currently experimental. To try it out, construct the RTCPeerConnection with sdpSemantics:'unified-plan' present in the RTCConfiguration argument.\"",
          "name": "RTCRtpSender interface: calling setParameters(RTCRtpSendParameters) on new RTCPeerConnection().addTransceiver('audio').sender with too few arguments must throw TypeError"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_equals: Unexpected exception when evaluating object expected null but got object \"InvalidStateError: Failed to execute 'addTransceiver' on 'RTCPeerConnection': This operation is only supported in 'unified-plan'. 'unified-plan' will become the default behavior in the future, but it is currently experimental. To try it out, construct the RTCPeerConnection with sdpSemantics:'unified-plan' present in the RTCConfiguration argument.\"",
          "name": "RTCRtpSender interface: new RTCPeerConnection().addTransceiver('audio').sender must inherit property \"getParameters()\" with the proper type"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_equals: Unexpected exception when evaluating object expected null but got object \"InvalidStateError: Failed to execute 'addTransceiver' on 'RTCPeerConnection': This operation is only supported in 'unified-plan'. 'unified-plan' will become the default behavior in the future, but it is currently experimental. To try it out, construct the RTCPeerConnection with sdpSemantics:'unified-plan' present in the RTCConfiguration argument.\"",
          "name": "RTCRtpSender interface: new RTCPeerConnection().addTransceiver('audio').sender must inherit property \"replaceTrack(MediaStreamTrack)\" with the proper type"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_equals: Unexpected exception when evaluating object expected null but got object \"InvalidStateError: Failed to execute 'addTransceiver' on 'RTCPeerConnection': This operation is only supported in 'unified-plan'. 'unified-plan' will become the default behavior in the future, but it is currently experimental. To try it out, construct the RTCPeerConnection with sdpSemantics:'unified-plan' present in the RTCConfiguration argument.\"",
          "name": "RTCRtpSender interface: calling replaceTrack(MediaStreamTrack) on new RTCPeerConnection().addTransceiver('audio').sender with too few arguments must throw TypeError"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_equals: Unexpected exception when evaluating object expected null but got object \"InvalidStateError: Failed to execute 'addTransceiver' on 'RTCPeerConnection': This operation is only supported in 'unified-plan'. 'unified-plan' will become the default behavior in the future, but it is currently experimental. To try it out, construct the RTCPeerConnection with sdpSemantics:'unified-plan' present in the RTCConfiguration argument.\"",
          "name": "RTCRtpSender interface: new RTCPeerConnection().addTransceiver('audio').sender must inherit property \"setStreams(MediaStream)\" with the proper type"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_equals: Unexpected exception when evaluating object expected null but got object \"InvalidStateError: Failed to execute 'addTransceiver' on 'RTCPeerConnection': This operation is only supported in 'unified-plan'. 'unified-plan' will become the default behavior in the future, but it is currently experimental. To try it out, construct the RTCPeerConnection with sdpSemantics:'unified-plan' present in the RTCConfiguration argument.\"",
          "name": "RTCRtpSender interface: calling setStreams(MediaStream) on new RTCPeerConnection().addTransceiver('audio').sender with too few arguments must throw TypeError"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_equals: Unexpected exception when evaluating object expected null but got object \"InvalidStateError: Failed to execute 'addTransceiver' on 'RTCPeerConnection': This operation is only supported in 'unified-plan'. 'unified-plan' will become the default behavior in the future, but it is currently experimental. To try it out, construct the RTCPeerConnection with sdpSemantics:'unified-plan' present in the RTCConfiguration argument.\"",
          "name": "RTCRtpSender interface: new RTCPeerConnection().addTransceiver('audio').sender must inherit property \"getStats()\" with the proper type"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_equals: Unexpected exception when evaluating object expected null but got object \"InvalidStateError: Failed to execute 'addTransceiver' on 'RTCPeerConnection': This operation is only supported in 'unified-plan'. 'unified-plan' will become the default behavior in the future, but it is currently experimental. To try it out, construct the RTCPeerConnection with sdpSemantics:'unified-plan' present in the RTCConfiguration argument.\"",
          "name": "RTCRtpSender interface: new RTCPeerConnection().addTransceiver('audio').sender must inherit property \"dtmf\" with the proper type"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "RTCRtpReceiver interface: existence and properties of interface object"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "RTCRtpReceiver interface object length"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "RTCRtpReceiver interface object name"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "RTCRtpReceiver interface: existence and properties of interface prototype object"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "RTCRtpReceiver interface: existence and properties of interface prototype object's \"constructor\" property"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "RTCRtpReceiver interface: existence and properties of interface prototype object's @@unscopables property"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_equals: getter must have the name 'get track' expected \"get track\" but got \"\"",
          "name": "RTCRtpReceiver interface: attribute track"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_true: The prototype object must have a property \"transport\" expected true got false",
          "name": "RTCRtpReceiver interface: attribute transport"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_true: The prototype object must have a property \"rtcpTransport\" expected true got false",
          "name": "RTCRtpReceiver interface: attribute rtcpTransport"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "RTCRtpReceiver interface: operation getCapabilities(DOMString)"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_own_property: interface prototype object missing non-static operation expected property \"getParameters\" missing",
          "name": "RTCRtpReceiver interface: operation getParameters()"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "RTCRtpReceiver interface: operation getContributingSources()"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_own_property: interface prototype object missing non-static operation expected property \"getSynchronizationSources\" missing",
          "name": "RTCRtpReceiver interface: operation getSynchronizationSources()"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "RTCRtpReceiver interface: operation getStats()"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_equals: Unexpected exception when evaluating object expected null but got object \"InvalidStateError: Failed to execute 'addTransceiver' on 'RTCPeerConnection': This operation is only supported in 'unified-plan'. 'unified-plan' will become the default behavior in the future, but it is currently experimental. To try it out, construct the RTCPeerConnection with sdpSemantics:'unified-plan' present in the RTCConfiguration argument.\"",
          "name": "RTCRtpReceiver must be primary interface of new RTCPeerConnection().addTransceiver('audio').receiver"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_equals: Unexpected exception when evaluating object expected null but got object \"InvalidStateError: Failed to execute 'addTransceiver' on 'RTCPeerConnection': This operation is only supported in 'unified-plan'. 'unified-plan' will become the default behavior in the future, but it is currently experimental. To try it out, construct the RTCPeerConnection with sdpSemantics:'unified-plan' present in the RTCConfiguration argument.\"",
          "name": "Stringification of new RTCPeerConnection().addTransceiver('audio').receiver"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_equals: Unexpected exception when evaluating object expected null but got object \"InvalidStateError: Failed to execute 'addTransceiver' on 'RTCPeerConnection': This operation is only supported in 'unified-plan'. 'unified-plan' will become the default behavior in the future, but it is currently experimental. To try it out, construct the RTCPeerConnection with sdpSemantics:'unified-plan' present in the RTCConfiguration argument.\"",
          "name": "RTCRtpReceiver interface: new RTCPeerConnection().addTransceiver('audio').receiver must inherit property \"track\" with the proper type"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_equals: Unexpected exception when evaluating object expected null but got object \"InvalidStateError: Failed to execute 'addTransceiver' on 'RTCPeerConnection': This operation is only supported in 'unified-plan'. 'unified-plan' will become the default behavior in the future, but it is currently experimental. To try it out, construct the RTCPeerConnection with sdpSemantics:'unified-plan' present in the RTCConfiguration argument.\"",
          "name": "RTCRtpReceiver interface: new RTCPeerConnection().addTransceiver('audio').receiver must inherit property \"transport\" with the proper type"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_equals: Unexpected exception when evaluating object expected null but got object \"InvalidStateError: Failed to execute 'addTransceiver' on 'RTCPeerConnection': This operation is only supported in 'unified-plan'. 'unified-plan' will become the default behavior in the future, but it is currently experimental. To try it out, construct the RTCPeerConnection with sdpSemantics:'unified-plan' present in the RTCConfiguration argument.\"",
          "name": "RTCRtpReceiver interface: new RTCPeerConnection().addTransceiver('audio').receiver must inherit property \"rtcpTransport\" with the proper type"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_equals: Unexpected exception when evaluating object expected null but got object \"InvalidStateError: Failed to execute 'addTransceiver' on 'RTCPeerConnection': This operation is only supported in 'unified-plan'. 'unified-plan' will become the default behavior in the future, but it is currently experimental. To try it out, construct the RTCPeerConnection with sdpSemantics:'unified-plan' present in the RTCConfiguration argument.\"",
          "name": "RTCRtpReceiver interface: new RTCPeerConnection().addTransceiver('audio').receiver must inherit property \"getCapabilities(DOMString)\" with the proper type"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_equals: Unexpected exception when evaluating object expected null but got object \"InvalidStateError: Failed to execute 'addTransceiver' on 'RTCPeerConnection': This operation is only supported in 'unified-plan'. 'unified-plan' will become the default behavior in the future, but it is currently experimental. To try it out, construct the RTCPeerConnection with sdpSemantics:'unified-plan' present in the RTCConfiguration argument.\"",
          "name": "RTCRtpReceiver interface: calling getCapabilities(DOMString) on new RTCPeerConnection().addTransceiver('audio').receiver with too few arguments must throw TypeError"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_equals: Unexpected exception when evaluating object expected null but got object \"InvalidStateError: Failed to execute 'addTransceiver' on 'RTCPeerConnection': This operation is only supported in 'unified-plan'. 'unified-plan' will become the default behavior in the future, but it is currently experimental. To try it out, construct the RTCPeerConnection with sdpSemantics:'unified-plan' present in the RTCConfiguration argument.\"",
          "name": "RTCRtpReceiver interface: new RTCPeerConnection().addTransceiver('audio').receiver must inherit property \"getParameters()\" with the proper type"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_equals: Unexpected exception when evaluating object expected null but got object \"InvalidStateError: Failed to execute 'addTransceiver' on 'RTCPeerConnection': This operation is only supported in 'unified-plan'. 'unified-plan' will become the default behavior in the future, but it is currently experimental. To try it out, construct the RTCPeerConnection with sdpSemantics:'unified-plan' present in the RTCConfiguration argument.\"",
          "name": "RTCRtpReceiver interface: new RTCPeerConnection().addTransceiver('audio').receiver must inherit property \"getContributingSources()\" with the proper type"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_equals: Unexpected exception when evaluating object expected null but got object \"InvalidStateError: Failed to execute 'addTransceiver' on 'RTCPeerConnection': This operation is only supported in 'unified-plan'. 'unified-plan' will become the default behavior in the future, but it is currently experimental. To try it out, construct the RTCPeerConnection with sdpSemantics:'unified-plan' present in the RTCConfiguration argument.\"",
          "name": "RTCRtpReceiver interface: new RTCPeerConnection().addTransceiver('audio').receiver must inherit property \"getSynchronizationSources()\" with the proper type"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_equals: Unexpected exception when evaluating object expected null but got object \"InvalidStateError: Failed to execute 'addTransceiver' on 'RTCPeerConnection': This operation is only supported in 'unified-plan'. 'unified-plan' will become the default behavior in the future, but it is currently experimental. To try it out, construct the RTCPeerConnection with sdpSemantics:'unified-plan' present in the RTCConfiguration argument.\"",
          "name": "RTCRtpReceiver interface: new RTCPeerConnection().addTransceiver('audio').receiver must inherit property \"getStats()\" with the proper type"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "RTCRtpTransceiver interface: existence and properties of interface object"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "RTCRtpTransceiver interface object length"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "RTCRtpTransceiver interface object name"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "RTCRtpTransceiver interface: existence and properties of interface prototype object"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "RTCRtpTransceiver interface: existence and properties of interface prototype object's \"constructor\" property"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "RTCRtpTransceiver interface: existence and properties of interface prototype object's @@unscopables property"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_equals: getter must have the name 'get mid' expected \"get mid\" but got \"\"",
          "name": "RTCRtpTransceiver interface: attribute mid"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_equals: getter must have the name 'get sender' expected \"get sender\" but got \"\"",
          "name": "RTCRtpTransceiver interface: attribute sender"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_equals: getter must have the name 'get receiver' expected \"get receiver\" but got \"\"",
          "name": "RTCRtpTransceiver interface: attribute receiver"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_equals: getter must have the name 'get stopped' expected \"get stopped\" but got \"\"",
          "name": "RTCRtpTransceiver interface: attribute stopped"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_equals: getter must have the name 'get direction' expected \"get direction\" but got \"\"",
          "name": "RTCRtpTransceiver interface: attribute direction"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_equals: getter must have the name 'get currentDirection' expected \"get currentDirection\" but got \"\"",
          "name": "RTCRtpTransceiver interface: attribute currentDirection"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_own_property: interface prototype object missing non-static operation expected property \"stop\" missing",
          "name": "RTCRtpTransceiver interface: operation stop()"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_own_property: interface prototype object missing non-static operation expected property \"setCodecPreferences\" missing",
          "name": "RTCRtpTransceiver interface: operation setCodecPreferences([object Object])"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_equals: Unexpected exception when evaluating object expected null but got object \"InvalidStateError: Failed to execute 'addTransceiver' on 'RTCPeerConnection': This operation is only supported in 'unified-plan'. 'unified-plan' will become the default behavior in the future, but it is currently experimental. To try it out, construct the RTCPeerConnection with sdpSemantics:'unified-plan' present in the RTCConfiguration argument.\"",
          "name": "RTCRtpTransceiver must be primary interface of new RTCPeerConnection().addTransceiver('audio')"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_equals: Unexpected exception when evaluating object expected null but got object \"InvalidStateError: Failed to execute 'addTransceiver' on 'RTCPeerConnection': This operation is only supported in 'unified-plan'. 'unified-plan' will become the default behavior in the future, but it is currently experimental. To try it out, construct the RTCPeerConnection with sdpSemantics:'unified-plan' present in the RTCConfiguration argument.\"",
          "name": "Stringification of new RTCPeerConnection().addTransceiver('audio')"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_equals: Unexpected exception when evaluating object expected null but got object \"InvalidStateError: Failed to execute 'addTransceiver' on 'RTCPeerConnection': This operation is only supported in 'unified-plan'. 'unified-plan' will become the default behavior in the future, but it is currently experimental. To try it out, construct the RTCPeerConnection with sdpSemantics:'unified-plan' present in the RTCConfiguration argument.\"",
          "name": "RTCRtpTransceiver interface: new RTCPeerConnection().addTransceiver('audio') must inherit property \"mid\" with the proper type"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_equals: Unexpected exception when evaluating object expected null but got object \"InvalidStateError: Failed to execute 'addTransceiver' on 'RTCPeerConnection': This operation is only supported in 'unified-plan'. 'unified-plan' will become the default behavior in the future, but it is currently experimental. To try it out, construct the RTCPeerConnection with sdpSemantics:'unified-plan' present in the RTCConfiguration argument.\"",
          "name": "RTCRtpTransceiver interface: new RTCPeerConnection().addTransceiver('audio') must inherit property \"sender\" with the proper type"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_equals: Unexpected exception when evaluating object expected null but got object \"InvalidStateError: Failed to execute 'addTransceiver' on 'RTCPeerConnection': This operation is only supported in 'unified-plan'. 'unified-plan' will become the default behavior in the future, but it is currently experimental. To try it out, construct the RTCPeerConnection with sdpSemantics:'unified-plan' present in the RTCConfiguration argument.\"",
          "name": "RTCRtpTransceiver interface: new RTCPeerConnection().addTransceiver('audio') must inherit property \"receiver\" with the proper type"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_equals: Unexpected exception when evaluating object expected null but got object \"InvalidStateError: Failed to execute 'addTransceiver' on 'RTCPeerConnection': This operation is only supported in 'unified-plan'. 'unified-plan' will become the default behavior in the future, but it is currently experimental. To try it out, construct the RTCPeerConnection with sdpSemantics:'unified-plan' present in the RTCConfiguration argument.\"",
          "name": "RTCRtpTransceiver interface: new RTCPeerConnection().addTransceiver('audio') must inherit property \"stopped\" with the proper type"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_equals: Unexpected exception when evaluating object expected null but got object \"InvalidStateError: Failed to execute 'addTransceiver' on 'RTCPeerConnection': This operation is only supported in 'unified-plan'. 'unified-plan' will become the default behavior in the future, but it is currently experimental. To try it out, construct the RTCPeerConnection with sdpSemantics:'unified-plan' present in the RTCConfiguration argument.\"",
          "name": "RTCRtpTransceiver interface: new RTCPeerConnection().addTransceiver('audio') must inherit property \"direction\" with the proper type"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_equals: Unexpected exception when evaluating object expected null but got object \"InvalidStateError: Failed to execute 'addTransceiver' on 'RTCPeerConnection': This operation is only supported in 'unified-plan'. 'unified-plan' will become the default behavior in the future, but it is currently experimental. To try it out, construct the RTCPeerConnection with sdpSemantics:'unified-plan' present in the RTCConfiguration argument.\"",
          "name": "RTCRtpTransceiver interface: new RTCPeerConnection().addTransceiver('audio') must inherit property \"currentDirection\" with the proper type"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_equals: Unexpected exception when evaluating object expected null but got object \"InvalidStateError: Failed to execute 'addTransceiver' on 'RTCPeerConnection': This operation is only supported in 'unified-plan'. 'unified-plan' will become the default behavior in the future, but it is currently experimental. To try it out, construct the RTCPeerConnection with sdpSemantics:'unified-plan' present in the RTCConfiguration argument.\"",
          "name": "RTCRtpTransceiver interface: new RTCPeerConnection().addTransceiver('audio') must inherit property \"stop()\" with the proper type"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_equals: Unexpected exception when evaluating object expected null but got object \"InvalidStateError: Failed to execute 'addTransceiver' on 'RTCPeerConnection': This operation is only supported in 'unified-plan'. 'unified-plan' will become the default behavior in the future, but it is currently experimental. To try it out, construct the RTCPeerConnection with sdpSemantics:'unified-plan' present in the RTCConfiguration argument.\"",
          "name": "RTCRtpTransceiver interface: new RTCPeerConnection().addTransceiver('audio') must inherit property \"setCodecPreferences([object Object])\" with the proper type"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_equals: Unexpected exception when evaluating object expected null but got object \"InvalidStateError: Failed to execute 'addTransceiver' on 'RTCPeerConnection': This operation is only supported in 'unified-plan'. 'unified-plan' will become the default behavior in the future, but it is currently experimental. To try it out, construct the RTCPeerConnection with sdpSemantics:'unified-plan' present in the RTCConfiguration argument.\"",
          "name": "RTCRtpTransceiver interface: calling setCodecPreferences([object Object]) on new RTCPeerConnection().addTransceiver('audio') with too few arguments must throw TypeError"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_own_property: self does not have own property \"RTCDtlsTransport\" expected property \"RTCDtlsTransport\" missing",
          "name": "RTCDtlsTransport interface: existence and properties of interface object"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_own_property: self does not have own property \"RTCDtlsTransport\" expected property \"RTCDtlsTransport\" missing",
          "name": "RTCDtlsTransport interface object length"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_own_property: self does not have own property \"RTCDtlsTransport\" expected property \"RTCDtlsTransport\" missing",
          "name": "RTCDtlsTransport interface object name"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_own_property: self does not have own property \"RTCDtlsTransport\" expected property \"RTCDtlsTransport\" missing",
          "name": "RTCDtlsTransport interface: existence and properties of interface prototype object"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_own_property: self does not have own property \"RTCDtlsTransport\" expected property \"RTCDtlsTransport\" missing",
          "name": "RTCDtlsTransport interface: existence and properties of interface prototype object's \"constructor\" property"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_own_property: self does not have own property \"RTCDtlsTransport\" expected property \"RTCDtlsTransport\" missing",
          "name": "RTCDtlsTransport interface: existence and properties of interface prototype object's @@unscopables property"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_own_property: self does not have own property \"RTCDtlsTransport\" expected property \"RTCDtlsTransport\" missing",
          "name": "RTCDtlsTransport interface: attribute iceTransport"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_own_property: self does not have own property \"RTCDtlsTransport\" expected property \"RTCDtlsTransport\" missing",
          "name": "RTCDtlsTransport interface: attribute state"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_own_property: self does not have own property \"RTCDtlsTransport\" expected property \"RTCDtlsTransport\" missing",
          "name": "RTCDtlsTransport interface: operation getRemoteCertificates()"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_own_property: self does not have own property \"RTCDtlsTransport\" expected property \"RTCDtlsTransport\" missing",
          "name": "RTCDtlsTransport interface: attribute onstatechange"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_own_property: self does not have own property \"RTCDtlsTransport\" expected property \"RTCDtlsTransport\" missing",
          "name": "RTCDtlsTransport interface: attribute onerror"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_equals: wrong typeof object expected \"object\" but got \"undefined\"",
          "name": "RTCDtlsTransport must be primary interface of idlTestObjects.dtlsTransport"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_equals: wrong typeof object expected \"object\" but got \"undefined\"",
          "name": "Stringification of idlTestObjects.dtlsTransport"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_equals: wrong typeof object expected \"object\" but got \"undefined\"",
          "name": "RTCDtlsTransport interface: idlTestObjects.dtlsTransport must inherit property \"iceTransport\" with the proper type"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_equals: wrong typeof object expected \"object\" but got \"undefined\"",
          "name": "RTCDtlsTransport interface: idlTestObjects.dtlsTransport must inherit property \"state\" with the proper type"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_equals: wrong typeof object expected \"object\" but got \"undefined\"",
          "name": "RTCDtlsTransport interface: idlTestObjects.dtlsTransport must inherit property \"getRemoteCertificates()\" with the proper type"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_equals: wrong typeof object expected \"object\" but got \"undefined\"",
          "name": "RTCDtlsTransport interface: idlTestObjects.dtlsTransport must inherit property \"onstatechange\" with the proper type"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_equals: wrong typeof object expected \"object\" but got \"undefined\"",
          "name": "RTCDtlsTransport interface: idlTestObjects.dtlsTransport must inherit property \"onerror\" with the proper type"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_own_property: self does not have own property \"RTCIceTransport\" expected property \"RTCIceTransport\" missing",
          "name": "RTCIceTransport interface: existence and properties of interface object"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_own_property: self does not have own property \"RTCIceTransport\" expected property \"RTCIceTransport\" missing",
          "name": "RTCIceTransport interface object length"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_own_property: self does not have own property \"RTCIceTransport\" expected property \"RTCIceTransport\" missing",
          "name": "RTCIceTransport interface object name"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_own_property: self does not have own property \"RTCIceTransport\" expected property \"RTCIceTransport\" missing",
          "name": "RTCIceTransport interface: existence and properties of interface prototype object"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_own_property: self does not have own property \"RTCIceTransport\" expected property \"RTCIceTransport\" missing",
          "name": "RTCIceTransport interface: existence and properties of interface prototype object's \"constructor\" property"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_own_property: self does not have own property \"RTCIceTransport\" expected property \"RTCIceTransport\" missing",
          "name": "RTCIceTransport interface: existence and properties of interface prototype object's @@unscopables property"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_own_property: self does not have own property \"RTCIceTransport\" expected property \"RTCIceTransport\" missing",
          "name": "RTCIceTransport interface: attribute role"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_own_property: self does not have own property \"RTCIceTransport\" expected property \"RTCIceTransport\" missing",
          "name": "RTCIceTransport interface: attribute component"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_own_property: self does not have own property \"RTCIceTransport\" expected property \"RTCIceTransport\" missing",
          "name": "RTCIceTransport interface: attribute state"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_own_property: self does not have own property \"RTCIceTransport\" expected property \"RTCIceTransport\" missing",
          "name": "RTCIceTransport interface: attribute gatheringState"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_own_property: self does not have own property \"RTCIceTransport\" expected property \"RTCIceTransport\" missing",
          "name": "RTCIceTransport interface: operation getLocalCandidates()"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_own_property: self does not have own property \"RTCIceTransport\" expected property \"RTCIceTransport\" missing",
          "name": "RTCIceTransport interface: operation getRemoteCandidates()"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_own_property: self does not have own property \"RTCIceTransport\" expected property \"RTCIceTransport\" missing",
          "name": "RTCIceTransport interface: operation getSelectedCandidatePair()"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_own_property: self does not have own property \"RTCIceTransport\" expected property \"RTCIceTransport\" missing",
          "name": "RTCIceTransport interface: operation getLocalParameters()"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_own_property: self does not have own property \"RTCIceTransport\" expected property \"RTCIceTransport\" missing",
          "name": "RTCIceTransport interface: operation getRemoteParameters()"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_own_property: self does not have own property \"RTCIceTransport\" expected property \"RTCIceTransport\" missing",
          "name": "RTCIceTransport interface: attribute onstatechange"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_own_property: self does not have own property \"RTCIceTransport\" expected property \"RTCIceTransport\" missing",
          "name": "RTCIceTransport interface: attribute ongatheringstatechange"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_own_property: self does not have own property \"RTCIceTransport\" expected property \"RTCIceTransport\" missing",
          "name": "RTCIceTransport interface: attribute onselectedcandidatepairchange"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_equals: wrong typeof object expected \"object\" but got \"undefined\"",
          "name": "RTCIceTransport must be primary interface of idlTestObjects.iceTransport"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_equals: wrong typeof object expected \"object\" but got \"undefined\"",
          "name": "Stringification of idlTestObjects.iceTransport"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_equals: wrong typeof object expected \"object\" but got \"undefined\"",
          "name": "RTCIceTransport interface: idlTestObjects.iceTransport must inherit property \"role\" with the proper type"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_equals: wrong typeof object expected \"object\" but got \"undefined\"",
          "name": "RTCIceTransport interface: idlTestObjects.iceTransport must inherit property \"component\" with the proper type"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_equals: wrong typeof object expected \"object\" but got \"undefined\"",
          "name": "RTCIceTransport interface: idlTestObjects.iceTransport must inherit property \"state\" with the proper type"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_equals: wrong typeof object expected \"object\" but got \"undefined\"",
          "name": "RTCIceTransport interface: idlTestObjects.iceTransport must inherit property \"gatheringState\" with the proper type"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_equals: wrong typeof object expected \"object\" but got \"undefined\"",
          "name": "RTCIceTransport interface: idlTestObjects.iceTransport must inherit property \"getLocalCandidates()\" with the proper type"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_equals: wrong typeof object expected \"object\" but got \"undefined\"",
          "name": "RTCIceTransport interface: idlTestObjects.iceTransport must inherit property \"getRemoteCandidates()\" with the proper type"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_equals: wrong typeof object expected \"object\" but got \"undefined\"",
          "name": "RTCIceTransport interface: idlTestObjects.iceTransport must inherit property \"getSelectedCandidatePair()\" with the proper type"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_equals: wrong typeof object expected \"object\" but got \"undefined\"",
          "name": "RTCIceTransport interface: idlTestObjects.iceTransport must inherit property \"getLocalParameters()\" with the proper type"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_equals: wrong typeof object expected \"object\" but got \"undefined\"",
          "name": "RTCIceTransport interface: idlTestObjects.iceTransport must inherit property \"getRemoteParameters()\" with the proper type"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_equals: wrong typeof object expected \"object\" but got \"undefined\"",
          "name": "RTCIceTransport interface: idlTestObjects.iceTransport must inherit property \"onstatechange\" with the proper type"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_equals: wrong typeof object expected \"object\" but got \"undefined\"",
          "name": "RTCIceTransport interface: idlTestObjects.iceTransport must inherit property \"ongatheringstatechange\" with the proper type"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_equals: wrong typeof object expected \"object\" but got \"undefined\"",
          "name": "RTCIceTransport interface: idlTestObjects.iceTransport must inherit property \"onselectedcandidatepairchange\" with the proper type"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "RTCTrackEvent interface: existence and properties of interface object"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "RTCTrackEvent interface object length"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "RTCTrackEvent interface object name"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "RTCTrackEvent interface: existence and properties of interface prototype object"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "RTCTrackEvent interface: existence and properties of interface prototype object's \"constructor\" property"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "RTCTrackEvent interface: existence and properties of interface prototype object's @@unscopables property"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_equals: getter must have the name 'get receiver' expected \"get receiver\" but got \"\"",
          "name": "RTCTrackEvent interface: attribute receiver"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_equals: getter must have the name 'get track' expected \"get track\" but got \"\"",
          "name": "RTCTrackEvent interface: attribute track"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_equals: getter must have the name 'get streams' expected \"get streams\" but got \"\"",
          "name": "RTCTrackEvent interface: attribute streams"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_equals: getter must have the name 'get transceiver' expected \"get transceiver\" but got \"\"",
          "name": "RTCTrackEvent interface: attribute transceiver"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_equals: Unexpected exception when evaluating object expected null but got object \"InvalidStateError: Failed to execute 'addTransceiver' on 'RTCPeerConnection': This operation is only supported in 'unified-plan'. 'unified-plan' will become the default behavior in the future, but it is currently experimental. To try it out, construct the RTCPeerConnection with sdpSemantics:'unified-plan' present in the RTCConfiguration argument.\"",
          "name": "RTCTrackEvent must be primary interface of initTrackEvent()"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_equals: Unexpected exception when evaluating object expected null but got object \"InvalidStateError: Failed to execute 'addTransceiver' on 'RTCPeerConnection': This operation is only supported in 'unified-plan'. 'unified-plan' will become the default behavior in the future, but it is currently experimental. To try it out, construct the RTCPeerConnection with sdpSemantics:'unified-plan' present in the RTCConfiguration argument.\"",
          "name": "Stringification of initTrackEvent()"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_equals: Unexpected exception when evaluating object expected null but got object \"InvalidStateError: Failed to execute 'addTransceiver' on 'RTCPeerConnection': This operation is only supported in 'unified-plan'. 'unified-plan' will become the default behavior in the future, but it is currently experimental. To try it out, construct the RTCPeerConnection with sdpSemantics:'unified-plan' present in the RTCConfiguration argument.\"",
          "name": "RTCTrackEvent interface: initTrackEvent() must inherit property \"receiver\" with the proper type"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_equals: Unexpected exception when evaluating object expected null but got object \"InvalidStateError: Failed to execute 'addTransceiver' on 'RTCPeerConnection': This operation is only supported in 'unified-plan'. 'unified-plan' will become the default behavior in the future, but it is currently experimental. To try it out, construct the RTCPeerConnection with sdpSemantics:'unified-plan' present in the RTCConfiguration argument.\"",
          "name": "RTCTrackEvent interface: initTrackEvent() must inherit property \"track\" with the proper type"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_equals: Unexpected exception when evaluating object expected null but got object \"InvalidStateError: Failed to execute 'addTransceiver' on 'RTCPeerConnection': This operation is only supported in 'unified-plan'. 'unified-plan' will become the default behavior in the future, but it is currently experimental. To try it out, construct the RTCPeerConnection with sdpSemantics:'unified-plan' present in the RTCConfiguration argument.\"",
          "name": "RTCTrackEvent interface: initTrackEvent() must inherit property \"streams\" with the proper type"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_equals: Unexpected exception when evaluating object expected null but got object \"InvalidStateError: Failed to execute 'addTransceiver' on 'RTCPeerConnection': This operation is only supported in 'unified-plan'. 'unified-plan' will become the default behavior in the future, but it is currently experimental. To try it out, construct the RTCPeerConnection with sdpSemantics:'unified-plan' present in the RTCConfiguration argument.\"",
          "name": "RTCTrackEvent interface: initTrackEvent() must inherit property \"transceiver\" with the proper type"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_own_property: self does not have own property \"RTCSctpTransport\" expected property \"RTCSctpTransport\" missing",
          "name": "RTCSctpTransport interface: existence and properties of interface object"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_own_property: self does not have own property \"RTCSctpTransport\" expected property \"RTCSctpTransport\" missing",
          "name": "RTCSctpTransport interface object length"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_own_property: self does not have own property \"RTCSctpTransport\" expected property \"RTCSctpTransport\" missing",
          "name": "RTCSctpTransport interface object name"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_own_property: self does not have own property \"RTCSctpTransport\" expected property \"RTCSctpTransport\" missing",
          "name": "RTCSctpTransport interface: existence and properties of interface prototype object"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_own_property: self does not have own property \"RTCSctpTransport\" expected property \"RTCSctpTransport\" missing",
          "name": "RTCSctpTransport interface: existence and properties of interface prototype object's \"constructor\" property"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_own_property: self does not have own property \"RTCSctpTransport\" expected property \"RTCSctpTransport\" missing",
          "name": "RTCSctpTransport interface: existence and properties of interface prototype object's @@unscopables property"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_own_property: self does not have own property \"RTCSctpTransport\" expected property \"RTCSctpTransport\" missing",
          "name": "RTCSctpTransport interface: attribute transport"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_own_property: self does not have own property \"RTCSctpTransport\" expected property \"RTCSctpTransport\" missing",
          "name": "RTCSctpTransport interface: attribute state"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_own_property: self does not have own property \"RTCSctpTransport\" expected property \"RTCSctpTransport\" missing",
          "name": "RTCSctpTransport interface: attribute maxMessageSize"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_own_property: self does not have own property \"RTCSctpTransport\" expected property \"RTCSctpTransport\" missing",
          "name": "RTCSctpTransport interface: attribute maxChannels"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_own_property: self does not have own property \"RTCSctpTransport\" expected property \"RTCSctpTransport\" missing",
          "name": "RTCSctpTransport interface: attribute onstatechange"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_equals: wrong typeof object expected \"object\" but got \"undefined\"",
          "name": "RTCSctpTransport must be primary interface of idlTestObjects.sctpTransport"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_equals: wrong typeof object expected \"object\" but got \"undefined\"",
          "name": "Stringification of idlTestObjects.sctpTransport"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_equals: wrong typeof object expected \"object\" but got \"undefined\"",
          "name": "RTCSctpTransport interface: idlTestObjects.sctpTransport must inherit property \"transport\" with the proper type"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_equals: wrong typeof object expected \"object\" but got \"undefined\"",
          "name": "RTCSctpTransport interface: idlTestObjects.sctpTransport must inherit property \"state\" with the proper type"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_equals: wrong typeof object expected \"object\" but got \"undefined\"",
          "name": "RTCSctpTransport interface: idlTestObjects.sctpTransport must inherit property \"maxMessageSize\" with the proper type"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_equals: wrong typeof object expected \"object\" but got \"undefined\"",
          "name": "RTCSctpTransport interface: idlTestObjects.sctpTransport must inherit property \"maxChannels\" with the proper type"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_equals: wrong typeof object expected \"object\" but got \"undefined\"",
          "name": "RTCSctpTransport interface: idlTestObjects.sctpTransport must inherit property \"onstatechange\" with the proper type"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "RTCDataChannel interface: existence and properties of interface object"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "RTCDataChannel interface object length"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "RTCDataChannel interface object name"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "RTCDataChannel interface: existence and properties of interface prototype object"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "RTCDataChannel interface: existence and properties of interface prototype object's \"constructor\" property"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "RTCDataChannel interface: existence and properties of interface prototype object's @@unscopables property"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_equals: getter must have the name 'get label' expected \"get label\" but got \"\"",
          "name": "RTCDataChannel interface: attribute label"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_equals: getter must have the name 'get ordered' expected \"get ordered\" but got \"\"",
          "name": "RTCDataChannel interface: attribute ordered"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_true: The prototype object must have a property \"maxPacketLifeTime\" expected true got false",
          "name": "RTCDataChannel interface: attribute maxPacketLifeTime"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_equals: getter must have the name 'get maxRetransmits' expected \"get maxRetransmits\" but got \"\"",
          "name": "RTCDataChannel interface: attribute maxRetransmits"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_equals: getter must have the name 'get protocol' expected \"get protocol\" but got \"\"",
          "name": "RTCDataChannel interface: attribute protocol"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_equals: getter must have the name 'get negotiated' expected \"get negotiated\" but got \"\"",
          "name": "RTCDataChannel interface: attribute negotiated"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_equals: getter must have the name 'get id' expected \"get id\" but got \"\"",
          "name": "RTCDataChannel interface: attribute id"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_true: The prototype object must have a property \"priority\" expected true got false",
          "name": "RTCDataChannel interface: attribute priority"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_equals: getter must have the name 'get readyState' expected \"get readyState\" but got \"\"",
          "name": "RTCDataChannel interface: attribute readyState"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_equals: getter must have the name 'get bufferedAmount' expected \"get bufferedAmount\" but got \"\"",
          "name": "RTCDataChannel interface: attribute bufferedAmount"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_equals: getter must have the name 'get bufferedAmountLowThreshold' expected \"get bufferedAmountLowThreshold\" but got \"\"",
          "name": "RTCDataChannel interface: attribute bufferedAmountLowThreshold"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_equals: getter must have the name 'get onopen' expected \"get onopen\" but got \"\"",
          "name": "RTCDataChannel interface: attribute onopen"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_equals: getter must have the name 'get onbufferedamountlow' expected \"get onbufferedamountlow\" but got \"\"",
          "name": "RTCDataChannel interface: attribute onbufferedamountlow"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_equals: getter must have the name 'get onerror' expected \"get onerror\" but got \"\"",
          "name": "RTCDataChannel interface: attribute onerror"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_equals: getter must have the name 'get onclose' expected \"get onclose\" but got \"\"",
          "name": "RTCDataChannel interface: attribute onclose"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "RTCDataChannel interface: operation close()"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_equals: getter must have the name 'get onmessage' expected \"get onmessage\" but got \"\"",
          "name": "RTCDataChannel interface: attribute onmessage"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_equals: getter must have the name 'get binaryType' expected \"get binaryType\" but got \"\"",
          "name": "RTCDataChannel interface: attribute binaryType"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "RTCDataChannel interface: operation send(USVString)"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "RTCDataChannel interface: operation send(Blob)"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "RTCDataChannel interface: operation send(ArrayBuffer)"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "RTCDataChannel interface: operation send(ArrayBufferView)"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "RTCDataChannel must be primary interface of new RTCPeerConnection().createDataChannel('')"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "Stringification of new RTCPeerConnection().createDataChannel('')"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "RTCDataChannel interface: new RTCPeerConnection().createDataChannel('') must inherit property \"label\" with the proper type"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "RTCDataChannel interface: new RTCPeerConnection().createDataChannel('') must inherit property \"ordered\" with the proper type"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_inherits: property \"maxPacketLifeTime\" not found in prototype chain",
          "name": "RTCDataChannel interface: new RTCPeerConnection().createDataChannel('') must inherit property \"maxPacketLifeTime\" with the proper type"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "RTCDataChannel interface: new RTCPeerConnection().createDataChannel('') must inherit property \"maxRetransmits\" with the proper type"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "RTCDataChannel interface: new RTCPeerConnection().createDataChannel('') must inherit property \"protocol\" with the proper type"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "RTCDataChannel interface: new RTCPeerConnection().createDataChannel('') must inherit property \"negotiated\" with the proper type"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "RTCDataChannel interface: new RTCPeerConnection().createDataChannel('') must inherit property \"id\" with the proper type"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_inherits: property \"priority\" not found in prototype chain",
          "name": "RTCDataChannel interface: new RTCPeerConnection().createDataChannel('') must inherit property \"priority\" with the proper type"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "RTCDataChannel interface: new RTCPeerConnection().createDataChannel('') must inherit property \"readyState\" with the proper type"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "RTCDataChannel interface: new RTCPeerConnection().createDataChannel('') must inherit property \"bufferedAmount\" with the proper type"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "RTCDataChannel interface: new RTCPeerConnection().createDataChannel('') must inherit property \"bufferedAmountLowThreshold\" with the proper type"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "Unrecognized type EventHandler",
          "name": "RTCDataChannel interface: new RTCPeerConnection().createDataChannel('') must inherit property \"onopen\" with the proper type"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "Unrecognized type EventHandler",
          "name": "RTCDataChannel interface: new RTCPeerConnection().createDataChannel('') must inherit property \"onbufferedamountlow\" with the proper type"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "Unrecognized type EventHandler",
          "name": "RTCDataChannel interface: new RTCPeerConnection().createDataChannel('') must inherit property \"onerror\" with the proper type"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "Unrecognized type EventHandler",
          "name": "RTCDataChannel interface: new RTCPeerConnection().createDataChannel('') must inherit property \"onclose\" with the proper type"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "RTCDataChannel interface: new RTCPeerConnection().createDataChannel('') must inherit property \"close()\" with the proper type"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "Unrecognized type EventHandler",
          "name": "RTCDataChannel interface: new RTCPeerConnection().createDataChannel('') must inherit property \"onmessage\" with the proper type"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "RTCDataChannel interface: new RTCPeerConnection().createDataChannel('') must inherit property \"binaryType\" with the proper type"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "RTCDataChannel interface: new RTCPeerConnection().createDataChannel('') must inherit property \"send(USVString)\" with the proper type"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "RTCDataChannel interface: calling send(USVString) on new RTCPeerConnection().createDataChannel('') with too few arguments must throw TypeError"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "RTCDataChannel interface: new RTCPeerConnection().createDataChannel('') must inherit property \"send(Blob)\" with the proper type"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "RTCDataChannel interface: calling send(Blob) on new RTCPeerConnection().createDataChannel('') with too few arguments must throw TypeError"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "RTCDataChannel interface: new RTCPeerConnection().createDataChannel('') must inherit property \"send(ArrayBuffer)\" with the proper type"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "RTCDataChannel interface: calling send(ArrayBuffer) on new RTCPeerConnection().createDataChannel('') with too few arguments must throw TypeError"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "RTCDataChannel interface: new RTCPeerConnection().createDataChannel('') must inherit property \"send(ArrayBufferView)\" with the proper type"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "RTCDataChannel interface: calling send(ArrayBufferView) on new RTCPeerConnection().createDataChannel('') with too few arguments must throw TypeError"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "RTCDataChannelEvent interface: existence and properties of interface object"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "RTCDataChannelEvent interface object length"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "RTCDataChannelEvent interface object name"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "RTCDataChannelEvent interface: existence and properties of interface prototype object"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "RTCDataChannelEvent interface: existence and properties of interface prototype object's \"constructor\" property"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "RTCDataChannelEvent interface: existence and properties of interface prototype object's @@unscopables property"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_equals: getter must have the name 'get channel' expected \"get channel\" but got \"\"",
          "name": "RTCDataChannelEvent interface: attribute channel"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "RTCDataChannelEvent must be primary interface of new RTCDataChannelEvent('channel', {\n          channel: new RTCPeerConnection().createDataChannel('')\n        })"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "Stringification of new RTCDataChannelEvent('channel', {\n          channel: new RTCPeerConnection().createDataChannel('')\n        })"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "RTCDataChannelEvent interface: new RTCDataChannelEvent('channel', {\n          channel: new RTCPeerConnection().createDataChannel('')\n        }) must inherit property \"channel\" with the proper type"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "RTCDTMFSender interface: existence and properties of interface object"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "RTCDTMFSender interface object length"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "RTCDTMFSender interface object name"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "RTCDTMFSender interface: existence and properties of interface prototype object"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "RTCDTMFSender interface: existence and properties of interface prototype object's \"constructor\" property"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "RTCDTMFSender interface: existence and properties of interface prototype object's @@unscopables property"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "RTCDTMFSender interface: operation insertDTMF(DOMString, unsigned long, unsigned long)"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_equals: getter must have the name 'get ontonechange' expected \"get ontonechange\" but got \"\"",
          "name": "RTCDTMFSender interface: attribute ontonechange"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_equals: getter must have the name 'get canInsertDTMF' expected \"get canInsertDTMF\" but got \"\"",
          "name": "RTCDTMFSender interface: attribute canInsertDTMF"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_equals: getter must have the name 'get toneBuffer' expected \"get toneBuffer\" but got \"\"",
          "name": "RTCDTMFSender interface: attribute toneBuffer"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "RTCDTMFToneChangeEvent interface: existence and properties of interface object"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "RTCDTMFToneChangeEvent interface object length"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "RTCDTMFToneChangeEvent interface object name"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "RTCDTMFToneChangeEvent interface: existence and properties of interface prototype object"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "RTCDTMFToneChangeEvent interface: existence and properties of interface prototype object's \"constructor\" property"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "RTCDTMFToneChangeEvent interface: existence and properties of interface prototype object's @@unscopables property"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_equals: getter must have the name 'get tone' expected \"get tone\" but got \"\"",
          "name": "RTCDTMFToneChangeEvent interface: attribute tone"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "RTCStatsReport interface: existence and properties of interface object"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "RTCStatsReport interface object length"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "RTCStatsReport interface object name"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "RTCStatsReport interface: existence and properties of interface prototype object"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "RTCStatsReport interface: existence and properties of interface prototype object's \"constructor\" property"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "RTCStatsReport interface: existence and properties of interface prototype object's @@unscopables property"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_own_property: self does not have own property \"RTCStatsEvent\" expected property \"RTCStatsEvent\" missing",
          "name": "RTCStatsEvent interface: existence and properties of interface object"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_own_property: self does not have own property \"RTCStatsEvent\" expected property \"RTCStatsEvent\" missing",
          "name": "RTCStatsEvent interface object length"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_own_property: self does not have own property \"RTCStatsEvent\" expected property \"RTCStatsEvent\" missing",
          "name": "RTCStatsEvent interface object name"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_own_property: self does not have own property \"RTCStatsEvent\" expected property \"RTCStatsEvent\" missing",
          "name": "RTCStatsEvent interface: existence and properties of interface prototype object"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_own_property: self does not have own property \"RTCStatsEvent\" expected property \"RTCStatsEvent\" missing",
          "name": "RTCStatsEvent interface: existence and properties of interface prototype object's \"constructor\" property"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_own_property: self does not have own property \"RTCStatsEvent\" expected property \"RTCStatsEvent\" missing",
          "name": "RTCStatsEvent interface: existence and properties of interface prototype object's @@unscopables property"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_own_property: self does not have own property \"RTCStatsEvent\" expected property \"RTCStatsEvent\" missing",
          "name": "RTCStatsEvent interface: attribute report"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_own_property: self does not have own property \"RTCErrorEvent\" expected property \"RTCErrorEvent\" missing",
          "name": "RTCErrorEvent interface: existence and properties of interface object"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_own_property: self does not have own property \"RTCErrorEvent\" expected property \"RTCErrorEvent\" missing",
          "name": "RTCErrorEvent interface object length"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_own_property: self does not have own property \"RTCErrorEvent\" expected property \"RTCErrorEvent\" missing",
          "name": "RTCErrorEvent interface object name"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_own_property: self does not have own property \"RTCErrorEvent\" expected property \"RTCErrorEvent\" missing",
          "name": "RTCErrorEvent interface: existence and properties of interface prototype object"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_own_property: self does not have own property \"RTCErrorEvent\" expected property \"RTCErrorEvent\" missing",
          "name": "RTCErrorEvent interface: existence and properties of interface prototype object's \"constructor\" property"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_own_property: self does not have own property \"RTCErrorEvent\" expected property \"RTCErrorEvent\" missing",
          "name": "RTCErrorEvent interface: existence and properties of interface prototype object's @@unscopables property"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_own_property: self does not have own property \"RTCErrorEvent\" expected property \"RTCErrorEvent\" missing",
          "name": "RTCErrorEvent interface: attribute error"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_equals: Unexpected exception when evaluating object expected null but got object \"ReferenceError: RTCErrorEvent is not defined\"",
          "name": "RTCErrorEvent must be primary interface of new RTCErrorEvent('error')"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_equals: Unexpected exception when evaluating object expected null but got object \"ReferenceError: RTCErrorEvent is not defined\"",
          "name": "Stringification of new RTCErrorEvent('error')"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_equals: Unexpected exception when evaluating object expected null but got object \"ReferenceError: RTCErrorEvent is not defined\"",
          "name": "RTCErrorEvent interface: new RTCErrorEvent('error') must inherit property \"error\" with the proper type"
        }
      ]
    },
    {
      "test": "/webrtc/RTCRtpParameters-codecs.html",
      "status": "OK",
      "message": null,
      "duration": 1419,
      "subtests": [
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "promise_test: Unhandled rejection with value: object \"InvalidStateError: Failed to execute 'addTransceiver' on 'RTCPeerConnection': This operation is only supported in 'unified-plan'. 'unified-plan' will become the default behavior in the future, but it is currently experimental. To try it out, construct the RTCPeerConnection with sdpSemantics:'unified-plan' present in the RTCConfiguration argument.\"",
          "name": "setParameters() with codec.payloadType modified should reject with InvalidModificationError"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "promise_test: Unhandled rejection with value: object \"InvalidStateError: Failed to execute 'addTransceiver' on 'RTCPeerConnection': This operation is only supported in 'unified-plan'. 'unified-plan' will become the default behavior in the future, but it is currently experimental. To try it out, construct the RTCPeerConnection with sdpSemantics:'unified-plan' present in the RTCConfiguration argument.\"",
          "name": "setParameters() with codec.mimeType modified should reject with InvalidModificationError"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "promise_test: Unhandled rejection with value: object \"InvalidStateError: Failed to execute 'addTransceiver' on 'RTCPeerConnection': This operation is only supported in 'unified-plan'. 'unified-plan' will become the default behavior in the future, but it is currently experimental. To try it out, construct the RTCPeerConnection with sdpSemantics:'unified-plan' present in the RTCConfiguration argument.\"",
          "name": "setParameters() with codec.clockRate modified should reject with InvalidModificationError"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "promise_test: Unhandled rejection with value: object \"InvalidStateError: Failed to execute 'addTransceiver' on 'RTCPeerConnection': This operation is only supported in 'unified-plan'. 'unified-plan' will become the default behavior in the future, but it is currently experimental. To try it out, construct the RTCPeerConnection with sdpSemantics:'unified-plan' present in the RTCConfiguration argument.\"",
          "name": "setParameters() with codec.channels modified should reject with InvalidModificationError"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "promise_test: Unhandled rejection with value: object \"InvalidStateError: Failed to execute 'addTransceiver' on 'RTCPeerConnection': This operation is only supported in 'unified-plan'. 'unified-plan' will become the default behavior in the future, but it is currently experimental. To try it out, construct the RTCPeerConnection with sdpSemantics:'unified-plan' present in the RTCConfiguration argument.\"",
          "name": "setParameters() with codec.sdpFmtpLine modified should reject with InvalidModificationError"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "promise_test: Unhandled rejection with value: object \"InvalidStateError: Failed to execute 'addTransceiver' on 'RTCPeerConnection': This operation is only supported in 'unified-plan'. 'unified-plan' will become the default behavior in the future, but it is currently experimental. To try it out, construct the RTCPeerConnection with sdpSemantics:'unified-plan' present in the RTCConfiguration argument.\"",
          "name": "setParameters() with new codecs inserted should reject with InvalidModificationError"
        }
      ]
    },
    {
      "status": "ERROR",
      "expected": "OK",
      "test": "/webrtc/legacy/onaddstream.https.html",
      "subtests": [
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_equals: expected \"[{streams:[{}]},{streams:[{}]}]\" but got \"[]\"",
          "name": "Check onaddstream"
        }
      ],
      "duration": 1882,
      "message": "Uncaught Error: assert_true: Transceiver is set on event expected true got false"
    },
    {
      "test": "/webrtc/RTCPeerConnection-createOffer.html",
      "status": "OK",
      "message": null,
      "duration": 1172,
      "subtests": [
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_false: Expect offer to not be instance of RTCSessionDescription expected false got true",
          "name": "createOffer() with no argument from newly created RTCPeerConnection should succeed"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "createOffer() and then setLocalDescription() should succeed"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "createOffer() after connection is closed should reject with InvalidStateError"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "Failed to execute 'addTransceiver' on 'RTCPeerConnection': This operation is only supported in 'unified-plan'. 'unified-plan' will become the default behavior in the future, but it is currently experimental. To try it out, construct the RTCPeerConnection with sdpSemantics:'unified-plan' present in the RTCConfiguration argument.",
          "name": "When media stream is added when createOffer() is running in parallel, the result offer should contain the new media stream"
        }
      ]
    },
    {
      "test": "/webrtc/RTCPeerConnection-setRemoteDescription-replaceTrack.https.html",
      "status": "OK",
      "message": null,
      "duration": 287,
      "subtests": [
        {
          "status": "PASS",
          "message": null,
          "name": "replaceTrack() sets the track attribute to a new track."
        },
        {
          "status": "PASS",
          "message": null,
          "name": "replaceTrack() sets the track attribute to null."
        },
        {
          "status": "PASS",
          "message": null,
          "name": "replaceTrack() does not set the track synchronously."
        },
        {
          "status": "PASS",
          "message": null,
          "name": "replaceTrack() rejects when the peer connection is closed."
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "promise_test: Unhandled rejection with value: object \"InvalidModificationError\"",
          "name": "replaceTrack() does not reject when invoked after removeTrack()."
        },
        {
          "status": "PASS",
          "message": null,
          "name": "replaceTrack() does not reject after a subsequent removeTrack()."
        }
      ]
    },
    {
      "test": "/webrtc/RTCIceCandidate-constructor.html",
      "status": "OK",
      "message": null,
      "duration": 1274,
      "subtests": [
        {
          "status": "PASS",
          "message": null,
          "name": "new RTCIceCandidate()"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_throws: function \"() => new RTCIceCandidate({})\" threw object \"TypeMismatchError: Failed to construct 'RTCIceCandidate': The 'candidate' property is not a string, or is empty.\" (\"TypeMismatchError\") expected object \"TypeError\" (\"TypeError\")",
          "name": "new RTCIceCandidate({})"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_throws: function \"() => new RTCIceCandidate({\n        candidate: '',\n        sdpMid: null,\n        sdpMLineIndex: null,\n        usernameFragment: undefined\n      })\" threw object \"TypeMismatchError: Failed to construct 'RTCIceCandidate': The 'candidate' property is not a string, or is empty.\" (\"TypeMismatchError\") expected object \"TypeError\" (\"TypeError\")",
          "name": "new RTCIceCandidate({ ... }) with manually filled default values"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_throws: function \"() => new RTCIceCandidate({\n        sdpMid: null,\n        sdpMLineIndex: null\n      })\" threw object \"TypeMismatchError: Failed to construct 'RTCIceCandidate': The 'candidate' property is not a string, or is empty.\" (\"TypeMismatchError\") expected object \"TypeError\" (\"TypeError\")",
          "name": "new RTCIceCandidate({ sdpMid: null, sdpMLineIndex: null })"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_throws: function \"() => new RTCIceCandidate({\n        candidate: ''\n      })\" threw object \"TypeMismatchError: Failed to construct 'RTCIceCandidate': The 'candidate' property is not a string, or is empty.\" (\"TypeMismatchError\") expected object \"TypeError\" (\"TypeError\")",
          "name": "new RTCIceCandidate({ candidate: '' })"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_throws: function \"() => new RTCIceCandidate({\n        candidate: null\n      })\" did not throw",
          "name": "new RTCIceCandidate({ candidate: null })"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_throws: function \"() => new RTCIceCandidate({\n        candidate: candidateString\n      })\" did not throw",
          "name": "new RTCIceCandidate({ ... }) with valid candidate string only"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "Failed to construct 'RTCIceCandidate': The 'candidate' property is not a string, or is empty.",
          "name": "new RTCIceCandidate({ sdpMid: 'audio' })"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "Failed to construct 'RTCIceCandidate': The 'candidate' property is not a string, or is empty.",
          "name": "new RTCIceCandidate({ sdpMLineIndex: 0 })"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "Failed to construct 'RTCIceCandidate': The 'candidate' property is not a string, or is empty.",
          "name": "new RTCIceCandidate({ sdpMid: 'audio', sdpMLineIndex: 0 })"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "Failed to construct 'RTCIceCandidate': The 'candidate' property is not a string, or is empty.",
          "name": "new RTCIceCandidate({ candidate: '', sdpMid: 'audio' }"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "Failed to construct 'RTCIceCandidate': The 'candidate' property is not a string, or is empty.",
          "name": "new RTCIceCandidate({ candidate: '', sdpMLineIndex: 0 }"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_equals: expected (object) null but got (number) 0",
          "name": "new RTCIceCandidate({ ... }) with valid candidate string and sdpMid"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_equals: expected (object) null but got (number) 0",
          "name": "new RTCIceCandidate({ ... }) with invalid candidate string and sdpMid"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_equals: expected (string) \"test\" but got (undefined) undefined",
          "name": "new RTCIceCandidate({ ... }) with non default value for all fields"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "Failed to construct 'RTCIceCandidate': The 'candidate' property is not a string, or is empty.",
          "name": "new RTCIceCandidate({ ... }) with invalid sdpMid"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "Failed to construct 'RTCIceCandidate': The 'candidate' property is not a string, or is empty.",
          "name": "new RTCIceCandidate({ ... }) with invalid sdpMLineIndex"
        }
      ]
    },
    {
      "test": "/webrtc/RTCPeerConnection-setLocalDescription-rollback.html",
      "status": "OK",
      "message": null,
      "duration": 1571,
      "subtests": [
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "promise_test: Unhandled rejection with value: object \"TypeError: Failed to execute 'setLocalDescription' on 'RTCPeerConnection': The provided value 'rollback' is not a valid enum value of type RTCSdpType.\"",
          "name": "setLocalDescription(rollback) from have-local-offer state should reset back to stable state"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_throws: function \"function() { throw e }\" threw object \"TypeError: Failed to execute 'setLocalDescription' on 'RTCPeerConnection': The provided value 'rollback' is not a valid enum value of type RTCSdpType.\" that is not a DOMException InvalidStateError: property \"code\" is equal to undefined, expected 11",
          "name": "setLocalDescription(rollback) from stable state should reject with InvalidStateError"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_throws: function \"function() { throw e }\" threw object \"TypeError: Failed to execute 'setLocalDescription' on 'RTCPeerConnection': The provided value 'rollback' is not a valid enum value of type RTCSdpType.\" that is not a DOMException InvalidStateError: property \"code\" is equal to undefined, expected 11",
          "name": "setLocalDescription(rollback) after setting answer description should reject with InvalidStateError"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "promise_test: Unhandled rejection with value: object \"TypeError: Failed to execute 'setLocalDescription' on 'RTCPeerConnection': The provided value 'rollback' is not a valid enum value of type RTCSdpType.\"",
          "name": "setLocalDescription(rollback) should ignore invalid sdp content and succeed"
        }
      ]
    },
    {
      "test": "/webrtc/RTCRtpSender-setParameters.html",
      "status": "OK",
      "message": null,
      "duration": 2021,
      "subtests": [
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "Failed to execute 'addTransceiver' on 'RTCPeerConnection': This operation is only supported in 'unified-plan'. 'unified-plan' will become the default behavior in the future, but it is currently experimental. To try it out, construct the RTCPeerConnection with sdpSemantics:'unified-plan' present in the RTCConfiguration argument.",
          "name": "setParameters() when transceiver is stopped should reject with InvalidStateError"
        }
      ]
    },
    {
      "test": "/webrtc/RTCPeerConnection-setLocalDescription.html",
      "status": "OK",
      "message": null,
      "duration": 1569,
      "subtests": [
        {
          "status": "PASS",
          "message": null,
          "name": "Calling createOffer() and setLocalDescription() again after one round of local-offer/remote-answer should succeed"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "Switching role from answerer to offerer after going back to stable state should succeed"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "onsignalingstatechange fires before setLocalDescription resolves"
        }
      ]
    },
    {
      "test": "/webrtc/RTCSctpTransport-constructor.html",
      "status": "OK",
      "message": null,
      "duration": 1869,
      "subtests": [
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_equals: expected (object) null but got (undefined) undefined",
          "name": "setRemoteDescription() with answer containing data media should initialize pc.sctp"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_equals: expected (object) null but got (undefined) undefined",
          "name": "setLocalDescription() with answer containing data media should initialize pc.sctp"
        }
      ]
    },
    {
      "test": "/webrtc/legacy/RTCRtpTransceiver-with-OfferToReceive-options.https.html",
      "status": "OK",
      "message": null,
      "duration": 1930,
      "subtests": [
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "promise_test: Unhandled rejection with value: object \"InvalidStateError: Failed to execute 'addTransceiver' on 'RTCPeerConnection': This operation is only supported in 'unified-plan'. 'unified-plan' will become the default behavior in the future, but it is currently experimental. To try it out, construct the RTCPeerConnection with sdpSemantics:'unified-plan' present in the RTCConfiguration argument.\"",
          "name": "checkAddTransceiverWithStream"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_equals: expected \"[{currentDirection:null,direction:\\\"recvonly\\\",mid:null,receiver:{track:{kind:\\\"audio\\\"}},sender:{track:null},stopped:false}]\" but got \"[]\"",
          "name": "checkAddTransceiverWithOfferToReceiveAudio"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_equals: expected \"[{currentDirection:null,direction:\\\"recvonly\\\",mid:null,receiver:{track:{kind:\\\"video\\\"}},sender:{track:null},stopped:false}]\" but got \"[]\"",
          "name": "checkAddTransceiverWithOfferToReceiveVideo"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_equals: expected \"[{currentDirection:null,direction:\\\"recvonly\\\",mid:null,receiver:{track:{kind:\\\"audio\\\"}},sender:{track:null},stopped:false},{currentDirection:null,direction:\\\"recvonly\\\",mid:null,receiver:{track:{kind:\\\"video\\\"}},sender:{track:null},stopped:false}]\" but got \"[]\"",
          "name": "checkAddTransceiverWithOfferToReceiveBoth"
        }
      ]
    },
    {
      "test": "/webrtc/getstats.html",
      "status": "OK",
      "message": null,
      "duration": 1319,
      "subtests": [
        {
          "status": "PASS",
          "message": null,
          "name": "Can get stats from a basic WebRTC call."
        }
      ]
    },
    {
      "test": "/webrtc/RTCPeerConnection-setLocalDescription-answer.html",
      "status": "OK",
      "message": null,
      "duration": 1218,
      "subtests": [
        {
          "status": "PASS",
          "message": null,
          "name": "setLocalDescription() with valid answer should succeed"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "setLocalDescription() with type answer and null sdp should use lastAnswer generated from createAnswer"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "setLocalDescription() with answer not created by own createAnswer() should reject with InvalidModificationError"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_throws: function \"function() { throw e }\" threw object \"OperationError: Failed to execute 'setLocalDescription' on 'RTCPeerConnection': Failed to set local answer sdp: Called in wrong state: kStable\" that is not a DOMException InvalidStateError: property \"code\" is equal to 0, expected 11",
          "name": "Calling setLocalDescription(answer) from stable state should reject with InvalidStateError"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_throws: function \"function() { throw e }\" threw object \"OperationError: Failed to execute 'setLocalDescription' on 'RTCPeerConnection': Failed to set local answer sdp: Called in wrong state: kHaveLocalOffer\" that is not a DOMException InvalidStateError: property \"code\" is equal to 0, expected 11",
          "name": "Calling setLocalDescription(answer) from have-local-offer state should reject with InvalidStateError"
        }
      ]
    },
    {
      "test": "/webrtc/RTCConfiguration-bundlePolicy.html",
      "status": "OK",
      "message": null,
      "duration": 1220,
      "subtests": [
        {
          "status": "PASS",
          "message": null,
          "name": "Default bundlePolicy should be balanced"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "new RTCPeerConnection({ bundlePolicy: undefined }) should have bundlePolicy balanced"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "new RTCPeerConnection({ bundlePolicy: 'balanced' }) should succeed"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "new RTCPeerConnection({ bundlePolicy: 'max-compat' }) should succeed"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "new RTCPeerConnection({ bundlePolicy: 'max-bundle' }) should succeed"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "setConfiguration({}) with initial default bundlePolicy balanced should succeed"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "setConfiguration({}) with initial bundlePolicy balanced should succeed"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "setConfiguration({ bundlePolicy: balanced }) with initial default bundlePolicy balanced should succeed"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "setConfiguration({ bundlePolicy: 'balanced' }) with initial bundlePolicy balanced should succeed"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "setConfiguration({ bundlePolicy: 'max-compat' }) with initial bundlePolicy max-compat should succeed"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "setConfiguration({ bundlePolicy: 'max-bundle' }) with initial bundlePolicy max-bundle should succeed"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "new RTCPeerConnection({ bundlePolicy: null }) should throw TypeError"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "new RTCPeerConnection({ bundlePolicy: 'invalid' }) should throw TypeError"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "setConfiguration({ bundlePolicy: 'max-compat' }) with initial bundlePolicy max-bundle should throw InvalidModificationError"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "setConfiguration({}) with initial bundlePolicy max-bundle should throw InvalidModificationError"
        }
      ]
    },
    {
      "test": "/webrtc/RTCIceTransport.html",
      "status": "OK",
      "message": null,
      "duration": 1169,
      "subtests": [
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "promise_test: Unhandled rejection with value: object \"ReferenceError: RTCSctpTransport is not defined\"",
          "name": "Two connected iceTransports should has matching local/remote candidates returned"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "promise_test: Unhandled rejection with value: object \"ReferenceError: RTCSctpTransport is not defined\"",
          "name": "Unconnected iceTransport should have empty remote candidates and selected pair"
        }
      ]
    },
    {
      "test": "/webrtc/RTCRtpParameters-rtcp.html",
      "status": "OK",
      "message": null,
      "duration": 1524,
      "subtests": [
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "Failed to execute 'addTransceiver' on 'RTCPeerConnection': This operation is only supported in 'unified-plan'. 'unified-plan' will become the default behavior in the future, but it is currently experimental. To try it out, construct the RTCPeerConnection with sdpSemantics:'unified-plan' present in the RTCConfiguration argument.",
          "name": "setParameters() with modified rtcp.cname should reject with InvalidModificationError"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "Failed to execute 'addTransceiver' on 'RTCPeerConnection': This operation is only supported in 'unified-plan'. 'unified-plan' will become the default behavior in the future, but it is currently experimental. To try it out, construct the RTCPeerConnection with sdpSemantics:'unified-plan' present in the RTCConfiguration argument.",
          "name": "setParameters() with modified rtcp.reducedSize should reject with InvalidModificationError"
        }
      ]
    },
    {
      "test": "/webrtc/RTCPeerConnection-onnegotiationneeded.html",
      "status": "OK",
      "message": null,
      "duration": 1821,
      "subtests": [
        {
          "status": "PASS",
          "message": null,
          "name": "Creating first data channel should fire negotiationneeded event"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "calling createDataChannel twice should fire negotiationneeded event once"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "Failed to execute 'addTransceiver' on 'RTCPeerConnection': This operation is only supported in 'unified-plan'. 'unified-plan' will become the default behavior in the future, but it is currently experimental. To try it out, construct the RTCPeerConnection with sdpSemantics:'unified-plan' present in the RTCConfiguration argument.",
          "name": "addTransceiver() should fire negotiationneeded event"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "Failed to execute 'addTransceiver' on 'RTCPeerConnection': This operation is only supported in 'unified-plan'. 'unified-plan' will become the default behavior in the future, but it is currently experimental. To try it out, construct the RTCPeerConnection with sdpSemantics:'unified-plan' present in the RTCConfiguration argument.",
          "name": "Calling addTransceiver() twice should fire negotiationneeded event once"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_unreached: Pending promise should never be resolved. Instead it is rejected with: InvalidStateError: Failed to execute 'addTransceiver' on 'RTCPeerConnection': This operation is only supported in 'unified-plan'. 'unified-plan' will become the default behavior in the future, but it is currently experimental. To try it out, construct the RTCPeerConnection with sdpSemantics:'unified-plan' present in the RTCConfiguration argument. Reached unreachable code",
          "name": "Calling both addTransceiver() and createDataChannel() should fire negotiationneeded event once"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "negotiationneeded event should not fire if signaling state is not stable"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_unreached: Expect negotiationneeded promise to resolve after pc has set remote answer and go back to stable state Reached unreachable code",
          "name": "negotiationneeded event should fire only after signaling state go back to stable"
        }
      ]
    },
    {
      "test": "/webrtc/RTCRtpReceiver-getParameters.html",
      "status": "OK",
      "message": null,
      "duration": 1871,
      "subtests": [
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "promise_test: Unhandled rejection with value: object \"InvalidStateError: Failed to execute 'addTransceiver' on 'RTCPeerConnection': This operation is only supported in 'unified-plan'. 'unified-plan' will become the default behavior in the future, but it is currently experimental. To try it out, construct the RTCPeerConnection with sdpSemantics:'unified-plan' present in the RTCConfiguration argument.\"",
          "name": "getParameters() with audio receiver"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "promise_test: Unhandled rejection with value: object \"InvalidStateError: Failed to execute 'addTransceiver' on 'RTCPeerConnection': This operation is only supported in 'unified-plan'. 'unified-plan' will become the default behavior in the future, but it is currently experimental. To try it out, construct the RTCPeerConnection with sdpSemantics:'unified-plan' present in the RTCConfiguration argument.\"",
          "name": "getParameters() with video receiver"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "promise_test: Unhandled rejection with value: object \"InvalidStateError: Failed to execute 'addTransceiver' on 'RTCPeerConnection': This operation is only supported in 'unified-plan'. 'unified-plan' will become the default behavior in the future, but it is currently experimental. To try it out, construct the RTCPeerConnection with sdpSemantics:'unified-plan' present in the RTCConfiguration argument.\"",
          "name": "getParameters() with simulcast video receiver"
        }
      ]
    },
    {
      "test": "/webrtc/promises-call.html",
      "status": "OK",
      "message": null,
      "duration": 318,
      "subtests": [
        {
          "status": "PASS",
          "message": null,
          "name": "Can set up a basic WebRTC call with only data using promises."
        }
      ]
    },
    {
      "test": "/webrtc/RTCSctpTransport-maxMessageSize.html",
      "status": "OK",
      "message": null,
      "duration": 1469,
      "subtests": [
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_equals: expected (object) null but got (undefined) undefined",
          "name": "Determine the local side send limitation (canSendSize) by offering a max-message-size of 0"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_equals: expected (object) null but got (undefined) undefined",
          "name": "Remote offer SDP missing max-message-size attribute"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_equals: expected (object) null but got (undefined) undefined",
          "name": "max-message-size with a (non-zero) value provided by the remote peer"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_equals: expected (object) null but got (undefined) undefined",
          "name": "Renegotiate max-message-size with a (non-zero) value provided by the remote peer"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_equals: expected (object) null but got (undefined) undefined",
          "name": "max-message-size with a (non-zero) value larger than canSendSize provided by the remote peer"
        }
      ]
    },
    {
      "test": "/webrtc/RTCRtpSender-getCapabilities.html",
      "status": "OK",
      "message": null,
      "duration": 1820,
      "subtests": [
        {
          "status": "PASS",
          "message": null,
          "name": "RTCRtpSender.getCapabilities('audio') should return RTCRtpCapabilities dictionary"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "RTCRtpSender.getCapabilities('video') should return RTCRtpCapabilities dictionary"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "RTCRtpSender.getCapabilities('dummy') should return null"
        }
      ]
    },
    {
      "test": "/webrtc/RTCRtpTransceiver-setCodecPreferences.html",
      "status": "OK",
      "message": null,
      "duration": 1974,
      "subtests": [
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "Failed to execute 'addTransceiver' on 'RTCPeerConnection': This operation is only supported in 'unified-plan'. 'unified-plan' will become the default behavior in the future, but it is currently experimental. To try it out, construct the RTCPeerConnection with sdpSemantics:'unified-plan' present in the RTCConfiguration argument.",
          "name": "setCodecPreferences() on audio transceiver with codecs returned from RTCRtpSender.getCapabilities('audio') should succeed"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "Failed to execute 'addTransceiver' on 'RTCPeerConnection': This operation is only supported in 'unified-plan'. 'unified-plan' will become the default behavior in the future, but it is currently experimental. To try it out, construct the RTCPeerConnection with sdpSemantics:'unified-plan' present in the RTCConfiguration argument.",
          "name": "setCodecPreferences() on video transceiver with codecs returned from RTCRtpReceiver.getCapabilities('video') should succeed"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "Failed to execute 'addTransceiver' on 'RTCPeerConnection': This operation is only supported in 'unified-plan'. 'unified-plan' will become the default behavior in the future, but it is currently experimental. To try it out, construct the RTCPeerConnection with sdpSemantics:'unified-plan' present in the RTCConfiguration argument.",
          "name": "setCodecPreferences() with both sender receiver codecs combined should succeed"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "Failed to execute 'addTransceiver' on 'RTCPeerConnection': This operation is only supported in 'unified-plan'. 'unified-plan' will become the default behavior in the future, but it is currently experimental. To try it out, construct the RTCPeerConnection with sdpSemantics:'unified-plan' present in the RTCConfiguration argument.",
          "name": "setCodecPreferences([]) should succeed"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "Failed to execute 'addTransceiver' on 'RTCPeerConnection': This operation is only supported in 'unified-plan'. 'unified-plan' will become the default behavior in the future, but it is currently experimental. To try it out, construct the RTCPeerConnection with sdpSemantics:'unified-plan' present in the RTCConfiguration argument.",
          "name": "setCodecPreferences() with reordered codecs should succeed"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "Failed to execute 'addTransceiver' on 'RTCPeerConnection': This operation is only supported in 'unified-plan'. 'unified-plan' will become the default behavior in the future, but it is currently experimental. To try it out, construct the RTCPeerConnection with sdpSemantics:'unified-plan' present in the RTCConfiguration argument.",
          "name": "setCodecPreferences() on audio transceiver with codecs returned from getCapabilities('video') should throw InvalidAccessError"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "Failed to execute 'addTransceiver' on 'RTCPeerConnection': This operation is only supported in 'unified-plan'. 'unified-plan' will become the default behavior in the future, but it is currently experimental. To try it out, construct the RTCPeerConnection with sdpSemantics:'unified-plan' present in the RTCConfiguration argument.",
          "name": "setCodecPreferences() with user defined codec should throw InvalidAccessError"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "Failed to execute 'addTransceiver' on 'RTCPeerConnection': This operation is only supported in 'unified-plan'. 'unified-plan' will become the default behavior in the future, but it is currently experimental. To try it out, construct the RTCPeerConnection with sdpSemantics:'unified-plan' present in the RTCConfiguration argument.",
          "name": "setCodecPreferences() with user defined codec together with codecs returned from getCapabilities() should throw InvalidAccessError"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "Failed to execute 'addTransceiver' on 'RTCPeerConnection': This operation is only supported in 'unified-plan'. 'unified-plan' will become the default behavior in the future, but it is currently experimental. To try it out, construct the RTCPeerConnection with sdpSemantics:'unified-plan' present in the RTCConfiguration argument.",
          "name": "setCodecPreferences() with modified codecs returned from getCapabilities() should throw InvalidAccessError"
        }
      ]
    },
    {
      "test": "/webrtc/RTCPeerConnection-addIceCandidate.html",
      "status": "OK",
      "message": null,
      "duration": 482,
      "subtests": [
        {
          "status": "PASS",
          "message": null,
          "name": "Add null candidate should reject with TypeError"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_throws: function \"function() { throw e }\" threw object \"OperationError: Failed to execute 'addIceCandidate' on 'RTCPeerConnection': Error processing ICE candidate\" that is not a DOMException InvalidStateError: property \"code\" is equal to 0, expected 11",
          "name": "Add ICE candidate before setting remote description should reject with InvalidStateError"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "Add ICE candidate after setting remote description should succeed"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "Add ICE candidate with RTCIceCandidate should succeed"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "Add candidate with only valid sdpMid should succeed"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "Add candidate with only valid sdpMLineIndex should succeed"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "addIceCandidate with first sdpMid and sdpMLineIndex add candidate to first media stream"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "addIceCandidate with second sdpMid and sdpMLineIndex should add candidate to second media stream"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "Add candidate for first media stream with null usernameFragment should add candidate to first media stream"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "Adding multiple candidates should add candidates to their corresponding media stream"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "promise_test: Unhandled rejection with value: object \"OperationError: Failed to execute 'addIceCandidate' on 'RTCPeerConnection': Error processing ICE candidate\"",
          "name": "Add with empty candidate string (end of candidate) should succeed"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_throws: function \"function() { throw e }\" threw object \"OperationError: Failed to execute 'addIceCandidate' on 'RTCPeerConnection': Error processing ICE candidate\" (\"OperationError\") expected object \"TypeError\" (\"TypeError\")",
          "name": "Add candidate with both sdpMid and sdpMLineIndex manually set to null should reject with TypeError"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "Add candidate with only valid candidate string should reject with TypeError"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_throws: function \"function() { throw e }\" threw object \"OperationError: Failed to execute 'addIceCandidate' on 'RTCPeerConnection': Error processing ICE candidate\" (\"OperationError\") expected object \"TypeError\" (\"TypeError\")",
          "name": "Add candidate with invalid candidate string and both sdpMid and sdpMLineIndex null should reject with TypeError"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "Add candidate with empty dict should reject with TypeError"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_throws: function \"function() { throw e }\" threw object \"OperationError: Failed to execute 'addIceCandidate' on 'RTCPeerConnection': Error processing ICE candidate\" (\"OperationError\") expected object \"TypeError\" (\"TypeError\")",
          "name": "Add candidate with manually filled default values should reject with TypeError"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "Add candidate with invalid sdpMid should reject with OperationError"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "Add candidate with invalid sdpMLineIndex should reject with OperationError"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "promise_test: Unhandled rejection with value: object \"OperationError: Failed to execute 'addIceCandidate' on 'RTCPeerConnection': Error processing ICE candidate\"",
          "name": "Invalid sdpMLineIndex should be ignored if valid sdpMid is provided"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "Add candidate for media stream 2 with null usernameFragment should succeed"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_unreached: Should have rejected: undefined Reached unreachable code",
          "name": "Add candidate with invalid usernameFragment should reject with OperationError"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "Add candidate with invalid candidate string should reject with OperationError"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_unreached: Should have rejected: undefined Reached unreachable code",
          "name": "Add candidate with sdpMid belonging to different usernameFragment should reject with OperationError"
        }
      ]
    },
    {
      "test": "/webrtc/RTCRtpSender-replaceTrack.https.html",
      "status": "OK",
      "message": null,
      "duration": 2133,
      "subtests": [
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "promise_test: Unhandled rejection with value: object \"InvalidStateError: Failed to execute 'addTransceiver' on 'RTCPeerConnection': This operation is only supported in 'unified-plan'. 'unified-plan' will become the default behavior in the future, but it is currently experimental. To try it out, construct the RTCPeerConnection with sdpSemantics:'unified-plan' present in the RTCConfiguration argument.\"",
          "name": "Calling replaceTrack on closed connection should reject with InvalidStateError"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "promise_test: Unhandled rejection with value: object \"InvalidStateError: Failed to execute 'addTransceiver' on 'RTCPeerConnection': This operation is only supported in 'unified-plan'. 'unified-plan' will become the default behavior in the future, but it is currently experimental. To try it out, construct the RTCPeerConnection with sdpSemantics:'unified-plan' present in the RTCConfiguration argument.\"",
          "name": "Calling replaceTrack with track of different kind should reject with TypeError"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "promise_test: Unhandled rejection with value: object \"InvalidStateError: Failed to execute 'addTransceiver' on 'RTCPeerConnection': This operation is only supported in 'unified-plan'. 'unified-plan' will become the default behavior in the future, but it is currently experimental. To try it out, construct the RTCPeerConnection with sdpSemantics:'unified-plan' present in the RTCConfiguration argument.\"",
          "name": "Calling replaceTrack on stopped sender should reject with InvalidStateError"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "promise_test: Unhandled rejection with value: object \"InvalidStateError: Failed to execute 'addTransceiver' on 'RTCPeerConnection': This operation is only supported in 'unified-plan'. 'unified-plan' will become the default behavior in the future, but it is currently experimental. To try it out, construct the RTCPeerConnection with sdpSemantics:'unified-plan' present in the RTCConfiguration argument.\"",
          "name": "Calling replaceTrack on sender with null track and not set to session description should resolve with sender.track set to given track"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "promise_test: Unhandled rejection with value: object \"InvalidStateError: Failed to execute 'addTransceiver' on 'RTCPeerConnection': This operation is only supported in 'unified-plan'. 'unified-plan' will become the default behavior in the future, but it is currently experimental. To try it out, construct the RTCPeerConnection with sdpSemantics:'unified-plan' present in the RTCConfiguration argument.\"",
          "name": "Calling replaceTrack on sender not set to session description should resolve with sender.track set to given track"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "promise_test: Unhandled rejection with value: object \"InvalidStateError: Failed to execute 'addTransceiver' on 'RTCPeerConnection': This operation is only supported in 'unified-plan'. 'unified-plan' will become the default behavior in the future, but it is currently experimental. To try it out, construct the RTCPeerConnection with sdpSemantics:'unified-plan' present in the RTCConfiguration argument.\"",
          "name": "Calling replaceTrack(null) on sender not set to session description should resolve with sender.track set to null"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "promise_test: Unhandled rejection with value: object \"InvalidStateError: Failed to execute 'addTransceiver' on 'RTCPeerConnection': This operation is only supported in 'unified-plan'. 'unified-plan' will become the default behavior in the future, but it is currently experimental. To try it out, construct the RTCPeerConnection with sdpSemantics:'unified-plan' present in the RTCConfiguration argument.\"",
          "name": "Calling replaceTrack(null) on sender set to session description should resolve with sender.track set to null"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "promise_test: Unhandled rejection with value: object \"InvalidStateError: Failed to execute 'addTransceiver' on 'RTCPeerConnection': This operation is only supported in 'unified-plan'. 'unified-plan' will become the default behavior in the future, but it is currently experimental. To try it out, construct the RTCPeerConnection with sdpSemantics:'unified-plan' present in the RTCConfiguration argument.\"",
          "name": "Calling replaceTrack on sender with stopped track and and set to session description should resolve with sender.track set to given track"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "promise_test: Unhandled rejection with value: object \"InvalidStateError: Failed to execute 'addTransceiver' on 'RTCPeerConnection': This operation is only supported in 'unified-plan'. 'unified-plan' will become the default behavior in the future, but it is currently experimental. To try it out, construct the RTCPeerConnection with sdpSemantics:'unified-plan' present in the RTCConfiguration argument.\"",
          "name": "Calling replaceTrack on sender with similar track and and set to session description should resolve with sender.track set to new track"
        }
      ]
    },
    {
      "test": "/webrtc/RTCPeerConnection-getTransceivers.html",
      "status": "OK",
      "message": null,
      "duration": 1822,
      "subtests": [
        {
          "status": "PASS",
          "message": null,
          "name": "Initial peer connection should have list of zero senders, receivers and transceivers"
        }
      ]
    },
    {
      "test": "/webrtc/RTCRtpParameters-degradationPreference.html",
      "status": "OK",
      "message": null,
      "duration": 1319,
      "subtests": [
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "Failed to execute 'addTransceiver' on 'RTCPeerConnection': This operation is only supported in 'unified-plan'. 'unified-plan' will become the default behavior in the future, but it is currently experimental. To try it out, construct the RTCPeerConnection with sdpSemantics:'unified-plan' present in the RTCConfiguration argument.",
          "name": "setParameters with degradationPreference set should succeed"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "Failed to execute 'addTransceiver' on 'RTCPeerConnection': This operation is only supported in 'unified-plan'. 'unified-plan' will become the default behavior in the future, but it is currently experimental. To try it out, construct the RTCPeerConnection with sdpSemantics:'unified-plan' present in the RTCConfiguration argument.",
          "name": "setParameters with degradationPreference unset should succeed"
        }
      ]
    },
    {
      "status": "ERROR",
      "expected": "OK",
      "test": "/webrtc/RTCRtpTransceiver.https.html",
      "subtests": [
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "promise_test: Unhandled rejection with value: object \"InvalidStateError: Failed to execute 'addTransceiver' on 'RTCPeerConnection': This operation is only supported in 'unified-plan'. 'unified-plan' will become the default behavior in the future, but it is currently experimental. To try it out, construct the RTCPeerConnection with sdpSemantics:'unified-plan' present in the RTCConfiguration argument.\"",
          "name": "checkAddTransceiverNoTrack"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "promise_test: Unhandled rejection with value: object \"InvalidStateError: Failed to execute 'addTransceiver' on 'RTCPeerConnection': This operation is only supported in 'unified-plan'. 'unified-plan' will become the default behavior in the future, but it is currently experimental. To try it out, construct the RTCPeerConnection with sdpSemantics:'unified-plan' present in the RTCConfiguration argument.\"",
          "name": "checkAddTransceiverWithTrack"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_equals: expected \"[{currentDirection:null,direction:\\\"sendrecv\\\",mid:null,receiver:{track:{kind:\\\"audio\\\"}},sender:{track:{}},stopped:false},{currentDirection:null,direction:\\\"sendrecv\\\",mid:null,receiver:{track:{kind:\\\"video\\\"}},sender:{track:{}},stopped:false}]\" but got \"[]\"",
          "name": "checkAddTransceiverWithAddTrack"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "promise_test: Unhandled rejection with value: object \"InvalidStateError: Failed to execute 'addTransceiver' on 'RTCPeerConnection': This operation is only supported in 'unified-plan'. 'unified-plan' will become the default behavior in the future, but it is currently experimental. To try it out, construct the RTCPeerConnection with sdpSemantics:'unified-plan' present in the RTCConfiguration argument.\"",
          "name": "checkAddTransceiverWithDirection"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_true: expected true got false",
          "name": "checkMsidNoTrackId"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "promise_test: Unhandled rejection with value: object \"InvalidStateError: Failed to execute 'addTransceiver' on 'RTCPeerConnection': This operation is only supported in 'unified-plan'. 'unified-plan' will become the default behavior in the future, but it is currently experimental. To try it out, construct the RTCPeerConnection with sdpSemantics:'unified-plan' present in the RTCConfiguration argument.\"",
          "name": "checkAddTransceiverWithSetRemoteOfferSending"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "promise_test: Unhandled rejection with value: object \"InvalidStateError: Failed to execute 'addTransceiver' on 'RTCPeerConnection': This operation is only supported in 'unified-plan'. 'unified-plan' will become the default behavior in the future, but it is currently experimental. To try it out, construct the RTCPeerConnection with sdpSemantics:'unified-plan' present in the RTCConfiguration argument.\"",
          "name": "checkAddTransceiverWithSetRemoteOfferNoSend"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_true: addTransceiver(\"foo\") throws a TypeError expected true got false",
          "name": "checkAddTransceiverBadKind"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_equals: expected \"[{currentDirection:null,direction:\\\"recvonly\\\",receiver:{track:{kind:\\\"audio\\\"}},sender:{track:null},stopped:false}]\" but got \"[]\"",
          "name": "checkNoMidOffer"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "promise_test: Unhandled rejection with value: object \"InvalidStateError: Failed to execute 'addTransceiver' on 'RTCPeerConnection': This operation is only supported in 'unified-plan'. 'unified-plan' will become the default behavior in the future, but it is currently experimental. To try it out, construct the RTCPeerConnection with sdpSemantics:'unified-plan' present in the RTCConfiguration argument.\"",
          "name": "checkSetDirection"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_equals: expected \"[{currentDirection:null}]\" but got \"[]\"",
          "name": "checkCurrentDirection"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "promise_test: Unhandled rejection with value: object \"InvalidStateError: Failed to execute 'addTransceiver' on 'RTCPeerConnection': This operation is only supported in 'unified-plan'. 'unified-plan' will become the default behavior in the future, but it is currently experimental. To try it out, construct the RTCPeerConnection with sdpSemantics:'unified-plan' present in the RTCConfiguration argument.\"",
          "name": "checkSendrecvWithNoSendTrack"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "promise_test: Unhandled rejection with value: object \"InvalidStateError: Failed to execute 'addTransceiver' on 'RTCPeerConnection': This operation is only supported in 'unified-plan'. 'unified-plan' will become the default behavior in the future, but it is currently experimental. To try it out, construct the RTCPeerConnection with sdpSemantics:'unified-plan' present in the RTCConfiguration argument.\"",
          "name": "checkSendrecvWithTracklessStream"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "promise_test: Unhandled rejection with value: object \"InvalidStateError: Failed to execute 'addTransceiver' on 'RTCPeerConnection': This operation is only supported in 'unified-plan'. 'unified-plan' will become the default behavior in the future, but it is currently experimental. To try it out, construct the RTCPeerConnection with sdpSemantics:'unified-plan' present in the RTCConfiguration argument.\"",
          "name": "checkAddTransceiverNoTrackDoesntPair"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "promise_test: Unhandled rejection with value: object \"InvalidStateError: Failed to execute 'addTransceiver' on 'RTCPeerConnection': This operation is only supported in 'unified-plan'. 'unified-plan' will become the default behavior in the future, but it is currently experimental. To try it out, construct the RTCPeerConnection with sdpSemantics:'unified-plan' present in the RTCConfiguration argument.\"",
          "name": "checkAddTransceiverWithTrackDoesntPair"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "promise_test: Unhandled rejection with value: object \"InvalidStateError: Failed to execute 'addTransceiver' on 'RTCPeerConnection': This operation is only supported in 'unified-plan'. 'unified-plan' will become the default behavior in the future, but it is currently experimental. To try it out, construct the RTCPeerConnection with sdpSemantics:'unified-plan' present in the RTCConfiguration argument.\"",
          "name": "checkAddTransceiverThenReplaceTrackDoesntPair"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "promise_test: Unhandled rejection with value: object \"InvalidStateError: Failed to execute 'addTransceiver' on 'RTCPeerConnection': This operation is only supported in 'unified-plan'. 'unified-plan' will become the default behavior in the future, but it is currently experimental. To try it out, construct the RTCPeerConnection with sdpSemantics:'unified-plan' present in the RTCConfiguration argument.\"",
          "name": "checkAddTransceiverThenAddTrackPairs"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "promise_test: Unhandled rejection with value: object \"InvalidStateError: Failed to execute 'addTransceiver' on 'RTCPeerConnection': This operation is only supported in 'unified-plan'. 'unified-plan' will become the default behavior in the future, but it is currently experimental. To try it out, construct the RTCPeerConnection with sdpSemantics:'unified-plan' present in the RTCConfiguration argument.\"",
          "name": "checkAddTrackPairs"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "promise_test: Unhandled rejection with value: object \"InvalidStateError: Failed to execute 'addTransceiver' on 'RTCPeerConnection': This operation is only supported in 'unified-plan'. 'unified-plan' will become the default behavior in the future, but it is currently experimental. To try it out, construct the RTCPeerConnection with sdpSemantics:'unified-plan' present in the RTCConfiguration argument.\"",
          "name": "checkReplaceTrackNullDoesntPreventPairing"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_equals: expected \"[{direction:\\\"recvonly\\\",sender:{track:null}},{direction:\\\"sendrecv\\\",sender:{track:{}}}]\" but got \"[]\"",
          "name": "checkRemoveAndReadd"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "promise_test: Unhandled rejection with value: object \"InvalidStateError: Failed to execute 'addTransceiver' on 'RTCPeerConnection': This operation is only supported in 'unified-plan'. 'unified-plan' will become the default behavior in the future, but it is currently experimental. To try it out, construct the RTCPeerConnection with sdpSemantics:'unified-plan' present in the RTCConfiguration argument.\"",
          "name": "checkAddTrackExistingTransceiverThenRemove"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "promise_test: Unhandled rejection with value: object \"TypeError: Cannot set property 'direction' of undefined\"",
          "name": "checkRemoveTrackNegotiation"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "promise_test: Unhandled rejection with value: object \"TypeError: Cannot read property 'receiver' of undefined\"",
          "name": "checkMute"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "promise_test: Unhandled rejection with value: object \"TypeError: Cannot read property 'stop' of undefined\"",
          "name": "checkStop"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "promise_test: Unhandled rejection with value: object \"TypeError: Cannot read property 'stop' of undefined\"",
          "name": "checkStopAfterCreateOffer"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "promise_test: Unhandled rejection with value: object \"TypeError: Cannot read property 'stop' of undefined\"",
          "name": "checkStopAfterSetLocalOffer"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "promise_test: Unhandled rejection with value: object \"TypeError: Cannot read property 'stop' of undefined\"",
          "name": "checkStopAfterSetRemoteOffer"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "promise_test: Unhandled rejection with value: object \"TypeError: Cannot read property 'stop' of undefined\"",
          "name": "checkStopAfterCreateAnswer"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "promise_test: Unhandled rejection with value: object \"TypeError: Cannot read property 'receiver' of undefined\"",
          "name": "checkStopAfterSetLocalAnswer"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_equals: Stopping a transceiver on a closed PC should throw. throws InvalidStateError expected \"InvalidStateError\" but got \"TypeError\"",
          "name": "checkStopAfterClose"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_equals: expected \"[{currentDirection:null,direction:\\\"sendrecv\\\",receiver:{track:{kind:\\\"audio\\\"}},sender:{track:{}},stopped:false}]\" but got \"[]\"",
          "name": "checkLocalRollback"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "promise_test: Unhandled rejection with value: object \"TypeError: Failed to execute 'setLocalDescription' on 'RTCPeerConnection': The provided value 'rollback' is not a valid enum value of type RTCSdpType.\"",
          "name": "checkRollbackAndSetRemoteOfferWithDifferentType"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "promise_test: Unhandled rejection with value: object \"TypeError: Failed to execute 'setRemoteDescription' on 'RTCPeerConnection': The provided value 'rollback' is not a valid enum value of type RTCSdpType.\"",
          "name": "checkRemoteRollback"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "promise_test: Unhandled rejection with value: object \"TypeError: Cannot read property 'mid' of undefined\"",
          "name": "checkMsectionReuse"
        }
      ],
      "duration": 1834,
      "message": "Cannot read property 'receiver' of undefined"
    },
    {
      "test": "/webrtc/RTCPeerConnection-ontrack.https.html",
      "status": "OK",
      "message": null,
      "duration": 1779,
      "subtests": [
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_true: Expect trackEvent.transceiver to be defined and is instance of RTCRtpTransceiver expected true got false",
          "name": "setRemoteDescription should trigger ontrack event when the MSID of the stream is is parsed."
        },
        {
          "status": "PASS",
          "message": null,
          "name": "setRemoteDescription() with m= line of recvonly direction should not trigger track event"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_true: Expect trackEvent.transceiver to be defined and is instance of RTCRtpTransceiver expected true got false",
          "name": "addTrack() should cause remote connection to fire ontrack when setRemoteDescription()"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "Failed to execute 'addTransceiver' on 'RTCPeerConnection': This operation is only supported in 'unified-plan'. 'unified-plan' will become the default behavior in the future, but it is currently experimental. To try it out, construct the RTCPeerConnection with sdpSemantics:'unified-plan' present in the RTCConfiguration argument.",
          "name": "addTransceiver('video') should cause remote connection to fire ontrack when setRemoteDescription()"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "Failed to execute 'addTransceiver' on 'RTCPeerConnection': This operation is only supported in 'unified-plan'. 'unified-plan' will become the default behavior in the future, but it is currently experimental. To try it out, construct the RTCPeerConnection with sdpSemantics:'unified-plan' present in the RTCConfiguration argument.",
          "name": "addTransceiver() with inactive direction should not cause remote connection to fire ontrack when setRemoteDescription()"
        }
      ]
    },
    {
      "test": "/webrtc/RTCDTMFSender-ontonechange-long.https.html",
      "status": "OK",
      "message": null,
      "duration": 13759,
      "subtests": [
        {
          "status": "PASS",
          "message": null,
          "name": "insertDTMF with duration greater than 6000 should be clamped to 6000"
        }
      ]
    },
    {
      "test": "/webrtc/protocol/jsep-initial-offer.https.html",
      "status": "OK",
      "message": null,
      "duration": 338,
      "subtests": [
        {
          "status": "PASS",
          "message": null,
          "name": "Offer conforms to basic SDP requirements"
        }
      ]
    },
    {
      "status": "TIMEOUT",
      "expected": "OK",
      "test": "/webrtc/RTCPeerConnection-connectionState.html",
      "subtests": [
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_equals: expected (string) \"new\" but got (undefined) undefined",
          "name": "Initial connectionState should be new"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_equals: expected (string) \"closed\" but got (undefined) undefined",
          "name": "Closing the connection should set connectionState to closed"
        },
        {
          "status": "TIMEOUT",
          "expected": "PASS",
          "message": "Test timed out",
          "name": "connection with one data channel should eventually have connected connection state"
        },
        {
          "status": "TIMEOUT",
          "expected": "PASS",
          "message": "Test timed out",
          "name": "connection with one data channel should eventually have transports in connected state"
        }
      ],
      "duration": 10140,
      "message": null
    },
    {
      "test": "/webrtc/RTCPeerConnection-setRemoteDescription-nomsid.html",
      "status": "OK",
      "message": null,
      "duration": 267,
      "subtests": [
        {
          "status": "PASS",
          "message": null,
          "name": "setRemoteDescription with an SDP without a=msid lines triggers ontrack with a default stream."
        }
      ]
    },
    {
      "test": "/webrtc/RTCRtpReceiver-getCapabilities.html",
      "status": "OK",
      "message": null,
      "duration": 2020,
      "subtests": [
        {
          "status": "PASS",
          "message": null,
          "name": "RTCRtpSender.getCapabilities('audio') should return RTCRtpCapabilities dictionary"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "RTCRtpSender.getCapabilities('video') should return RTCRtpCapabilities dictionary"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "RTCRtpSender.getCapabilities('dummy') should return null"
        }
      ]
    },
    {
      "test": "/webrtc/RTCPeerConnection-setRemoteDescription-pranswer.html",
      "status": "OK",
      "message": null,
      "duration": 1368,
      "subtests": [
        {
          "status": "PASS",
          "message": null,
          "name": "setRemoteDescription(pranswer) from stable state should reject with InvalidStateError"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "setRemoteDescription(pranswer) from have-local-offer state should succeed"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "setRemoteDescription(pranswer) multiple times should succeed"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "setRemoteDescription(answer) from have-remote-pranswer state should succeed"
        }
      ]
    },
    {
      "test": "/webrtc/RTCPeerConnection-setLocalDescription-pranswer.html",
      "status": "OK",
      "message": null,
      "duration": 1621,
      "subtests": [
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_throws: function \"function() { throw e }\" threw object \"OperationError: Failed to execute 'setLocalDescription' on 'RTCPeerConnection': Failed to set local pranswer sdp: Called in wrong state: kStable\" that is not a DOMException InvalidStateError: property \"code\" is equal to 0, expected 11",
          "name": "setLocalDescription(pranswer) from stable state should reject with InvalidStateError"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_equals: expected null but got object \"[object RTCSessionDescription]\"",
          "name": "setLocalDescription(pranswer) should succeed"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "setLocalDescription(pranswer) can be applied multiple times while still in have-local-pranswer"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "setLocalDescription(answer) from have-local-pranswer state should succeed"
        }
      ]
    },
    {
      "test": "/webrtc/RTCPeerConnectionIceEvent-constructor.html",
      "status": "OK",
      "message": null,
      "duration": 218,
      "subtests": [
        {
          "status": "PASS",
          "message": null,
          "name": "RTCPeerConnectionIceEvent with no arguments throws TypeError"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_equals: expected (object) null but got (undefined) undefined",
          "name": "RTCPeerConnectionIceEvent with no eventInitDict (default)"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_equals: expected (object) null but got (undefined) undefined",
          "name": "RTCPeerConnectionIceEvent with empty object as eventInitDict (default)"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "RTCPeerConnectionIceEvent.candidate is null when constructed with { candidate: null }"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "RTCPeerConnectionIceEvent.candidate is null when constructed with { candidate: undefined }"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "Failed to construct 'RTCIceCandidate': The 'candidate' property is not a string, or is empty.",
          "name": "RTCPeerConnectionIceEvent with RTCIceCandidate"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "RTCPeerConnectionIceEvent with non RTCIceCandidate object throws"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "RTCPeerConnectionIceEvent bubbles and cancelable"
        }
      ]
    },
    {
      "test": "/webrtc/RTCPeerConnection-setRemoteDescription-answer.html",
      "status": "OK",
      "message": null,
      "duration": 368,
      "subtests": [
        {
          "status": "PASS",
          "message": null,
          "name": "setRemoteDescription() with valid state and answer should succeed"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "Calling setRemoteDescription(answer) from stable state should reject with InvalidStateError"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "Calling setRemoteDescription(answer) from have-remote-offer state should reject with InvalidStateError"
        }
      ]
    },
    {
      "test": "/webrtc/RTCPeerConnection-createDataChannel.html",
      "status": "OK",
      "message": null,
      "duration": 1328,
      "subtests": [
        {
          "status": "PASS",
          "message": null,
          "name": "createDataChannel with no argument should throw TypeError"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "createDataChannel with closed connection should throw InvalidStateError"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_equals: expected (object) null but got (undefined) undefined",
          "name": "createDataChannel attribute default values"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "Failed to execute 'createDataChannel' on 'RTCPeerConnection': RTCDataChannel is not supported",
          "name": "createDataChannel with provided parameters should initialize attributes to provided values"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "createDataChannel with label \"foo\" should succeed"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "createDataChannel with label null should succeed"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "createDataChannel with label undefined should succeed"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "createDataChannel with label lone surrogate should succeed"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "createDataChannel with ordered false should succeed"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "createDataChannel with ordered null/undefined should succeed"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_equals: expected (number) 0 but got (undefined) undefined",
          "name": "createDataChannel with maxPacketLifeTime 0 should succeed"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "createDataChannel with maxRetransmits 0 should succeed"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_throws: function \"() => pc.createDataChannel('', {\n    maxPacketLifeTime: 0,\n    maxRetransmits: 0\n  })\" threw object \"NotSupportedError: Failed to execute 'createDataChannel' on 'RTCPeerConnection': RTCDataChannel is not supported\" (\"NotSupportedError\") expected object \"TypeError\" (\"TypeError\")",
          "name": "createDataChannel with both maxPacketLifeTime and maxRetransmits should throw SyntaxError"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "createDataChannel with protocol \"foo\" should succeed"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "createDataChannel with protocol null should succeed"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "createDataChannel with protocol undefined should succeed"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "createDataChannel with protocol lone surrogate should succeed"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "createDataChannel with negotiated true should succeed"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "createDataChannel with id 0 should succeed"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "createDataChannel with id 1 should succeed"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "Failed to execute 'createDataChannel' on 'RTCPeerConnection': RTCDataChannel is not supported",
          "name": "createDataChannel with id 65534 should succeed"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "createDataChannel with id -1 should throw TypeError"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_throws: function \"() => pc.createDataChannel('', { id })\" threw object \"NotSupportedError: Failed to execute 'createDataChannel' on 'RTCPeerConnection': RTCDataChannel is not supported\" (\"NotSupportedError\") expected object \"TypeError\" (\"TypeError\")",
          "name": "createDataChannel with id 65535 should throw TypeError"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "createDataChannel with id 65536 should throw TypeError"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_equals: expected (string) \"high\" but got (undefined) undefined",
          "name": "createDataChannel with priority \"high\" should succeed"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_throws: function \"() => pc.createDataChannel('', { priority: 'invalid' })\" did not throw",
          "name": "createDataChannel with invalid priority should throw TypeError"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_throws: function \"() =>\n    pc.createDataChannel('', {\n      label: ' '.repeat(65536),\n      negotiated: false\n    })\" did not throw",
          "name": "createDataChannel with negotiated false and long label should throw TypeError"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_throws: function \"() =>\n    pc.createDataChannel('', {\n      protocol: ' '.repeat(65536),\n      negotiated: false\n    })\" did not throw",
          "name": "createDataChannel with negotiated false and long protocol should throw TypeError"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_equals: expectedbut got \"\"",
          "name": "createDataChannel with negotiated true and long label and long protocol should succeed"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_equals: Expect initial id to be null expected (object) null but got (number) 65535",
          "name": "Channels created after SCTP transport is established should have id assigned"
        }
      ]
    },
    {
      "test": "/webrtc/RTCPeerConnection-generateCertificate.html",
      "status": "OK",
      "message": null,
      "duration": 1270,
      "subtests": [
        {
          "status": "PASS",
          "message": null,
          "name": "generateCertificate() with compulsary RSASSA-PKCS1-v1_5 parameters should succeed"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "generateCertificate() with compulsary ECDSA parameters should succeed"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "generateCertificate() with invalid string algorithm should reject with NotSupportedError"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "generateCertificate() with invalid algorithm dict should reject with NotSupportedError"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "generateCertificate() with valid expires parameter should succeed"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "generateCertificate() with 0 expires parameter should generate expired cert"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_unreached: Should have rejected: undefined Reached unreachable code",
          "name": "generateCertificate() with invalid range for expires should reject with TypeError"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_unreached: Should have rejected: undefined Reached unreachable code",
          "name": "generateCertificate() with invalid type for expires should reject with TypeError"
        }
      ]
    },
    {
      "test": "/webrtc/RTCPeerConnection-canTrickleIceCandidates.html",
      "status": "OK",
      "message": null,
      "duration": 1820,
      "subtests": [
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_equals: canTrickleIceCandidates property is null expected (object) null but got (undefined) undefined",
          "name": "canTrickleIceCandidates property is null prior to setRemoteDescription"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_true: canTrickleIceCandidates property is true after setRemoteDescription expected true got undefined",
          "name": "canTrickleIceCandidates property is true after setRemoteDescription with a=ice-options:trickle"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_false: canTrickleIceCandidates property is false after setRemoteDescription expected false got undefined",
          "name": "canTrickleIceCandidates property is false after setRemoteDescription without a=ice-options:trickle"
        }
      ]
    },
    {
      "test": "/webrtc/legacy/RTCPeerConnection-addStream.https.html",
      "status": "OK",
      "message": null,
      "duration": 1831,
      "subtests": [
        {
          "status": "PASS",
          "message": null,
          "name": "Legacy addStream(): Media stream stats references track stats"
        }
      ]
    },
    {
      "test": "/webrtc/RTCRtpParameters-headerExtensions.html",
      "status": "OK",
      "message": null,
      "duration": 1571,
      "subtests": [
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "Failed to execute 'addTransceiver' on 'RTCPeerConnection': This operation is only supported in 'unified-plan'. 'unified-plan' will become the default behavior in the future, but it is currently experimental. To try it out, construct the RTCPeerConnection with sdpSemantics:'unified-plan' present in the RTCConfiguration argument.",
          "name": "setParameters() with modified headerExtensions should reject with InvalidModificationError"
        }
      ]
    },
    {
      "test": "/webrtc/RTCPeerConnection-transceivers.https.html",
      "status": "OK",
      "message": null,
      "duration": 1610,
      "subtests": [
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_true: expected true got false",
          "name": "addTrack: creates a transceiver for the sender"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_array_equals: pc.getTransceivers() equals [transceiver] lengths differ, expected 1 got 0",
          "name": "addTrack: \"transceiver == {sender,receiver}\""
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "promise_test: Unhandled rejection with value: object \"TypeError: Cannot read property 'sender' of null\"",
          "name": "addTrack: transceiver.sender is associated with the track"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "promise_test: Unhandled rejection with value: object \"TypeError: Cannot read property 'receiver' of null\"",
          "name": "addTrack: transceiver.receiver has its own track"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "promise_test: Unhandled rejection with value: object \"TypeError: Cannot read property 'receiver' of null\"",
          "name": "addTrack: transceiver.receiver's track is muted"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "promise_test: Unhandled rejection with value: object \"TypeError: Cannot read property 'mid' of null\"",
          "name": "addTrack: transceiver is not associated with an m-section"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "promise_test: Unhandled rejection with value: object \"TypeError: Cannot read property 'stopped' of null\"",
          "name": "addTrack: transceiver is not stopped"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "promise_test: Unhandled rejection with value: object \"TypeError: Cannot read property 'direction' of null\"",
          "name": "addTrack: transceiver's direction is sendrecv"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "promise_test: Unhandled rejection with value: object \"TypeError: Cannot read property 'currentDirection' of null\"",
          "name": "addTrack: transceiver's currentDirection is null"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "promise_test: Unhandled rejection with value: object \"TypeError: Cannot read property 'mid' of null\"",
          "name": "setLocalDescription(offer): transceiver gets associated with an m-section"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "promise_test: Unhandled rejection with value: object \"TypeError: Cannot read property 'mid' of null\"",
          "name": "setLocalDescription(offer): transceiver.mid matches the offer SDP"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "setRemoteDescription(offer): ontrack fires with a track"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "setRemoteDescription(offer): ontrack's track.id is the same as track.id"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_true: trackEvent.transceiver instanceof RTCRtpTransceiver expected true got false",
          "name": "setRemoteDescription(offer): ontrack fires with a transceiver."
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "promise_test: Unhandled rejection with value: object \"TypeError: Cannot read property 'mid' of null\"",
          "name": "setRemoteDescription(offer): transceiver.mid is the same on both ends"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_array_equals: pc2.getTransceivers() equals [transceiver] lengths differ, expected 1 got 0",
          "name": "setRemoteDescription(offer): \"transceiver == {sender,receiver}\""
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "promise_test: Unhandled rejection with value: object \"TypeError: Cannot read property 'direction' of null\"",
          "name": "setRemoteDescription(offer): transceiver.direction is recvonly"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "promise_test: Unhandled rejection with value: object \"TypeError: Cannot read property 'currentDirection' of null\"",
          "name": "setRemoteDescription(offer): transceiver.currentDirection is null"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "promise_test: Unhandled rejection with value: object \"TypeError: Cannot read property 'stopped' of null\"",
          "name": "setRemoteDescription(offer): transceiver.stopped is false"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "promise_test: Unhandled rejection with value: object \"TypeError: Cannot read property 'currentDirection' of null\"",
          "name": "setLocalDescription(answer): transceiver.currentDirection is recvonly"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "promise_test: Unhandled rejection with value: object \"TypeError: Cannot read property 'currentDirection' of null\"",
          "name": "setLocalDescription(answer): transceiver.currentDirection is sendonly"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "promise_test: Unhandled rejection with value: object \"InvalidStateError: Failed to execute 'addTransceiver' on 'RTCPeerConnection': This operation is only supported in 'unified-plan'. 'unified-plan' will become the default behavior in the future, but it is currently experimental. To try it out, construct the RTCPeerConnection with sdpSemantics:'unified-plan' present in the RTCConfiguration argument.\"",
          "name": "addTransceiver(track): creates a transceiver for the track"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "promise_test: Unhandled rejection with value: object \"InvalidStateError: Failed to execute 'addTransceiver' on 'RTCPeerConnection': This operation is only supported in 'unified-plan'. 'unified-plan' will become the default behavior in the future, but it is currently experimental. To try it out, construct the RTCPeerConnection with sdpSemantics:'unified-plan' present in the RTCConfiguration argument.\"",
          "name": "addTransceiver(track): \"transceiver == {sender,receiver}\""
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "promise_test: Unhandled rejection with value: object \"InvalidStateError: Failed to execute 'addTransceiver' on 'RTCPeerConnection': This operation is only supported in 'unified-plan'. 'unified-plan' will become the default behavior in the future, but it is currently experimental. To try it out, construct the RTCPeerConnection with sdpSemantics:'unified-plan' present in the RTCConfiguration argument.\"",
          "name": "addTransceiver(track, init): initialize direction to inactive"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "promise_test: Unhandled rejection with value: object \"InvalidStateError: Failed to execute 'addTransceiver' on 'RTCPeerConnection': This operation is only supported in 'unified-plan'. 'unified-plan' will become the default behavior in the future, but it is currently experimental. To try it out, construct the RTCPeerConnection with sdpSemantics:'unified-plan' present in the RTCConfiguration argument.\"",
          "name": "addTransceiver(track, init): initialize sendEncodings[0].active to false"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "promise_test: Unhandled rejection with value: object \"InvalidStateError: Failed to execute 'addTransceiver' on 'RTCPeerConnection': This operation is only supported in 'unified-plan'. 'unified-plan' will become the default behavior in the future, but it is currently experimental. To try it out, construct the RTCPeerConnection with sdpSemantics:'unified-plan' present in the RTCConfiguration argument.\"",
          "name": "addTransceiver(0 streams): ontrack fires with no stream"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "promise_test: Unhandled rejection with value: object \"InvalidStateError: Failed to execute 'addTransceiver' on 'RTCPeerConnection': This operation is only supported in 'unified-plan'. 'unified-plan' will become the default behavior in the future, but it is currently experimental. To try it out, construct the RTCPeerConnection with sdpSemantics:'unified-plan' present in the RTCConfiguration argument.\"",
          "name": "addTransceiver(1 stream): ontrack fires with corresponding stream"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "promise_test: Unhandled rejection with value: object \"InvalidStateError: Failed to execute 'addTransceiver' on 'RTCPeerConnection': This operation is only supported in 'unified-plan'. 'unified-plan' will become the default behavior in the future, but it is currently experimental. To try it out, construct the RTCPeerConnection with sdpSemantics:'unified-plan' present in the RTCConfiguration argument.\"",
          "name": "addTransceiver(2 streams): ontrack fires with corresponding two streams"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_equals: trackEvent.streams.length == 0 expected 0 but got 1",
          "name": "addTrack(0 streams): ontrack fires with no stream"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "addTrack(1 stream): ontrack fires with corresponding stream"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "promise_test: Unhandled rejection with value: object \"NotSupportedError: Failed to execute 'addTrack' on 'RTCPeerConnection': Adding a track to multiple streams is not supported.\"",
          "name": "addTrack(2 streams): ontrack fires with corresponding two streams"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "promise_test: Unhandled rejection with value: object \"InvalidStateError: Failed to execute 'addTransceiver' on 'RTCPeerConnection': This operation is only supported in 'unified-plan'. 'unified-plan' will become the default behavior in the future, but it is currently experimental. To try it out, construct the RTCPeerConnection with sdpSemantics:'unified-plan' present in the RTCConfiguration argument.\"",
          "name": "addTransceiver('audio'): creates a transceiver with direction sendrecv"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "promise_test: Unhandled rejection with value: object \"InvalidStateError: Failed to execute 'addTransceiver' on 'RTCPeerConnection': This operation is only supported in 'unified-plan'. 'unified-plan' will become the default behavior in the future, but it is currently experimental. To try it out, construct the RTCPeerConnection with sdpSemantics:'unified-plan' present in the RTCConfiguration argument.\"",
          "name": "addTransceiver('audio'): transceiver.receiver.track.kind == 'audio'"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "promise_test: Unhandled rejection with value: object \"InvalidStateError: Failed to execute 'addTransceiver' on 'RTCPeerConnection': This operation is only supported in 'unified-plan'. 'unified-plan' will become the default behavior in the future, but it is currently experimental. To try it out, construct the RTCPeerConnection with sdpSemantics:'unified-plan' present in the RTCConfiguration argument.\"",
          "name": "addTransceiver('video'): transceiver.receiver.track.kind == 'video'"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "promise_test: Unhandled rejection with value: object \"InvalidStateError: Failed to execute 'addTransceiver' on 'RTCPeerConnection': This operation is only supported in 'unified-plan'. 'unified-plan' will become the default behavior in the future, but it is currently experimental. To try it out, construct the RTCPeerConnection with sdpSemantics:'unified-plan' present in the RTCConfiguration argument.\"",
          "name": "addTransceiver('audio'): transceiver.sender.track == null"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "promise_test: Unhandled rejection with value: object \"InvalidStateError: Failed to execute 'addTransceiver' on 'RTCPeerConnection': This operation is only supported in 'unified-plan'. 'unified-plan' will become the default behavior in the future, but it is currently experimental. To try it out, construct the RTCPeerConnection with sdpSemantics:'unified-plan' present in the RTCConfiguration argument.\"",
          "name": "addTransceiver('audio'): transceiver.currentDirection is null"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "promise_test: Unhandled rejection with value: object \"InvalidStateError: Failed to execute 'addTransceiver' on 'RTCPeerConnection': This operation is only supported in 'unified-plan'. 'unified-plan' will become the default behavior in the future, but it is currently experimental. To try it out, construct the RTCPeerConnection with sdpSemantics:'unified-plan' present in the RTCConfiguration argument.\"",
          "name": "addTransceiver('audio'): transceiver.stopped is false"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "promise_test: Unhandled rejection with value: object \"InvalidStateError: Failed to execute 'addTransceiver' on 'RTCPeerConnection': This operation is only supported in 'unified-plan'. 'unified-plan' will become the default behavior in the future, but it is currently experimental. To try it out, construct the RTCPeerConnection with sdpSemantics:'unified-plan' present in the RTCConfiguration argument.\"",
          "name": "addTrack reuses reusable transceivers"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "promise_test: Unhandled rejection with value: object \"InvalidStateError: Failed to execute 'addTransceiver' on 'RTCPeerConnection': This operation is only supported in 'unified-plan'. 'unified-plan' will become the default behavior in the future, but it is currently experimental. To try it out, construct the RTCPeerConnection with sdpSemantics:'unified-plan' present in the RTCConfiguration argument.\"",
          "name": "addTransceiver does not reuse reusable transceivers"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "promise_test: Unhandled rejection with value: object \"TypeError: Cannot read property 'direction' of null\"",
          "name": "Can setup two-way call using a single transceiver"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "promise_test: Unhandled rejection with value: object \"InvalidStateError: Failed to execute 'addTransceiver' on 'RTCPeerConnection': This operation is only supported in 'unified-plan'. 'unified-plan' will become the default behavior in the future, but it is currently experimental. To try it out, construct the RTCPeerConnection with sdpSemantics:'unified-plan' present in the RTCConfiguration argument.\"",
          "name": "Closing the PC stops the transceivers"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "promise_test: Unhandled rejection with value: object \"TypeError: Cannot set property 'direction' of null\"",
          "name": "Changing transceiver direction to 'sendrecv' makes ontrack fire"
        }
      ]
    },
    {
      "status": "TIMEOUT",
      "expected": "OK",
      "test": "/webrtc/RTCTrackEvent-fire.html",
      "subtests": [
        {
          "status": "PASS",
          "message": null,
          "name": "Applying a remote description with removed msid should trigger firing a removetrack event on the corresponding stream"
        },
        {
          "status": "TIMEOUT",
          "expected": "PASS",
          "message": "Test timed out",
          "name": "Applying a remote description with a new msid should trigger firing an event with populated streams"
        }
      ],
      "duration": 11444,
      "message": null
    },
    {
      "test": "/webrtc/simplecall-no-ssrcs.https.html",
      "status": "OK",
      "message": null,
      "duration": 517,
      "subtests": [
        {
          "status": "PASS",
          "message": null,
          "name": "Can set up a basic WebRTC call without announcing ssrcs."
        }
      ]
    },
    {
      "test": "/webrtc/simplecall.https.html",
      "status": "OK",
      "message": null,
      "duration": 572,
      "subtests": [
        {
          "status": "PASS",
          "message": null,
          "name": "Can set up a basic WebRTC call."
        }
      ]
    },
    {
      "test": "/webrtc/RTCCertificate.html",
      "status": "OK",
      "message": null,
      "duration": 1170,
      "subtests": [
        {
          "status": "PASS",
          "message": null,
          "name": "Constructing RTCPeerConnection with expired certificate should reject with InvalidAccessError"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "Calling setConfiguration with different set of certs should reject with InvalidModificationError"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "RTCCertificate should have at least one fingerprint"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "RTCPeerConnection({ certificates }) should generate offer SDP with fingerprint of provided certificate"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_true: Expect fingerprint line to be found in SDP expected true got false",
          "name": "RTCPeerConnection({ certificates }) should generate offer SDP with fingerprint of all provided certificates"
        }
      ]
    },
    {
      "test": "/webrtc/protocol/missing-fields.html",
      "status": "OK",
      "message": null,
      "duration": 421,
      "subtests": [
        {
          "status": "PASS",
          "message": null,
          "name": "Offer description with no mid is accepted"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "Answer description with no mid is accepted"
        }
      ]
    },
    {
      "test": "/webrtc/RTCPeerConnection-ondatachannel.html",
      "status": "OK",
      "message": null,
      "duration": 2022,
      "subtests": [
        {
          "status": "PASS",
          "message": null,
          "name": "datachannel event should fire when new data channel is announced to the remote peer"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_equals: expected (string) \"high\" but got (undefined) undefined",
          "name": "Data channel created on remote peer should match the same configuration as local peer"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "Data channel created with negotiated set to true should not fire datachannel event on remote peer"
        }
      ]
    },
    {
      "test": "/webrtc/RTCPeerConnection-getStats.https.html",
      "status": "OK",
      "message": null,
      "duration": 1933,
      "subtests": [
        {
          "status": "PASS",
          "message": null,
          "name": "getStats() with no argument should succeed"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "getStats(null) should succeed"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "getStats() with track not added to connection should reject with InvalidAccessError"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "getStats() with track added via addTrack should succeed"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "promise_test: Unhandled rejection with value: object \"InvalidStateError: Failed to execute 'addTransceiver' on 'RTCPeerConnection': This operation is only supported in 'unified-plan'. 'unified-plan' will become the default behavior in the future, but it is currently experimental. To try it out, construct the RTCPeerConnection with sdpSemantics:'unified-plan' present in the RTCConfiguration argument.\"",
          "name": "getStats() with track added via addTransceiver should succeed"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "promise_test: Unhandled rejection with value: object \"InvalidStateError: Failed to execute 'addTransceiver' on 'RTCPeerConnection': This operation is only supported in 'unified-plan'. 'unified-plan' will become the default behavior in the future, but it is currently experimental. To try it out, construct the RTCPeerConnection with sdpSemantics:'unified-plan' present in the RTCConfiguration argument.\"",
          "name": "getStats() with track associated with more than one sender should reject with InvalidAccessError"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "Failed to execute 'addTransceiver' on 'RTCPeerConnection': This operation is only supported in 'unified-plan'. 'unified-plan' will become the default behavior in the future, but it is currently experimental. To try it out, construct the RTCPeerConnection with sdpSemantics:'unified-plan' present in the RTCConfiguration argument.",
          "name": "getStats() with track associated with both sender and receiver should reject with InvalidAccessError"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "getStats() with no argument should return stats report containing peer-connection stats on an empty PC"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_true: Expect statsReport to contain stats object of type outbound-rtp expected true got false",
          "name": "getStats() with no argument should return stats report containing peer-connection stats and outbound-track-stats"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_true: Expect statsReport to contain stats object of type outbound-rtp expected true got false",
          "name": "getStats() with no argument should return stats for no-stream tracks"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_true: Expect statsReport to contain stats object of type outbound-rtp expected true got false",
          "name": "getStats() on track associated with RtpSender should return stats report containing outbound-rtp stats"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "Failed to execute 'addTransceiver' on 'RTCPeerConnection': This operation is only supported in 'unified-plan'. 'unified-plan' will become the default behavior in the future, but it is currently experimental. To try it out, construct the RTCPeerConnection with sdpSemantics:'unified-plan' present in the RTCConfiguration argument.",
          "name": "getStats() on track associated with RtpReceiver should return stats report containing inbound-rtp stats"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_unreached: test failed with error: Error: assert_true: Expect dictionary.dataChannelIdentifier to be integer expected true got false Reached unreachable code",
          "name": "getStats() with connected peer connections having tracks and data channel should return all mandatory to implement stats"
        }
      ]
    },
    {
      "test": "/webrtc/historical.html",
      "status": "OK",
      "message": null,
      "duration": 268,
      "subtests": [
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_false: expected false got true",
          "name": "RTCDataChannel member reliable should not exist"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_false: expected false got true",
          "name": "RTCPeerConnection member addStream should not exist"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_false: expected false got true",
          "name": "RTCPeerConnection member createDTMFSender should not exist"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_false: expected false got true",
          "name": "RTCPeerConnection member getLocalStreams should not exist"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_false: expected false got true",
          "name": "RTCPeerConnection member getRemoteStreams should not exist"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "RTCPeerConnection member getStreamById should not exist"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_false: expected false got true",
          "name": "RTCPeerConnection member onaddstream should not exist"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_false: expected false got true",
          "name": "RTCPeerConnection member onremovestream should not exist"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_false: expected false got true",
          "name": "RTCPeerConnection member removeStream should not exist"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "RTCPeerConnection member updateIce should not exist"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "RTCRtpTransceiver member setDirection should not exist"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "DataChannel interface should not exist"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "mozRTCIceCandidate interface should not exist"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "mozRTCPeerConnection interface should not exist"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "mozRTCSessionDescription interface should not exist"
        },
        {
          "status": "FAIL",
          "expected": "PASS",
          "message": "assert_false: expected false got true",
          "name": "webkitRTCPeerConnection interface should not exist"
        }
      ]
    }
  ]
}